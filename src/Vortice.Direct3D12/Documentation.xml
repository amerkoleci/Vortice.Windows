<?xml version="1.0" encoding="utf-8"?>
<comments>
  <comment id="D3D12_DEVICE_REMOVED_EXTENDED_DATA">
    <summary>
      <para>Represents Device Removed Extended Data (DRED) version 1.0 data.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_device_removed_extended_data" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DEVICE_REMOVED_EXTENDED_DATA::Flags">
    <summary>An input parameter of type <a href="https://docs.microsoft.comne-d3d12-d3d12_dred_flags.md">D3D12_DRED_FLAGS</a>, specifying control flags for the Direct3D runtime.</summary>
  </comment>
  <comment id="D3D12_DEVICE_REMOVED_EXTENDED_DATA::pHeadAutoBreadcrumbNode">
    <summary>An output parameter of type pointer to <a href="https://docs.microsoft.comns-d3d12-d3d12_auto_breadcrumb_node.md">D3D12_AUTO_BREADCRUMB_NODE</a> representing the returned auto-breadcrumb object(s). This is a pointer to the head of a linked list of auto-breadcrumb objects. All of the nodes in the linked list represent potentially incomplete command list execution on the GPU at the time of the device-removal event.</summary>
  </comment>
  <comment id="D3D12_ROOT_SIGNATURE_DESC1">
    <summary>
      <para>Describes the layout of a root signature version 1.1.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_root_signature_desc1" /></para>
    </summary>
  </comment>
  <comment id="D3D12_ROOT_SIGNATURE_DESC1::NumParameters">
    <summary>The number of slots in the root signature. This number is also the number of elements in the <i>pParameters</i> array.</summary>
  </comment>
  <comment id="D3D12_ROOT_SIGNATURE_DESC1::pParameters">
    <summary>An array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_root_parameter1">D3D12_ROOT_PARAMETER1</a> structures for the slots in the root signature.</summary>
  </comment>
  <comment id="D3D12_ROOT_SIGNATURE_DESC1::NumStaticSamplers">
    <summary>Specifies the number of static samplers.</summary>
  </comment>
  <comment id="D3D12_ROOT_SIGNATURE_DESC1::pStaticSamplers">
    <summary>Pointer to one or more <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_static_sampler_desc">D3D12_STATIC_SAMPLER_DESC</a> structures.</summary>
  </comment>
  <comment id="D3D12_ROOT_SIGNATURE_DESC1::Flags">
    <summary>Specifies the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_root_signature_flags">D3D12_ROOT_SIGNATURE_FLAGS</a> that determine the data volatility.</summary>
  </comment>
  <comment id="D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER">
    <summary>
      <para>Opaque data structure describing driver versioning for a serialized acceleration structure.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_serialized_data_driver_matching_identifier" /></para>
    </summary>
  </comment>
  <comment id="D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER::DriverOpaqueGUID">
    <summary>The opaque identifier of the driver.</summary>
  </comment>
  <comment id="D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER::DriverOpaqueVersioningData">
    <summary>The opaque driver versioning data.</summary>
  </comment>
  <comment id="D3D12_RESIDENCY_PRIORITY">
    <summary>
      <para>Specifies broad residency priority buckets useful for quickly establishing an application priority scheme.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_residency_priority" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RESIDENCY_PRIORITY::D3D12_RESIDENCY_PRIORITY_MINIMUM">
    <summary>Indicates a minimum priority.</summary>
  </comment>
  <comment id="D3D12_RESIDENCY_PRIORITY::D3D12_RESIDENCY_PRIORITY_LOW">
    <summary>Indicates a low priority.</summary>
  </comment>
  <comment id="D3D12_RESIDENCY_PRIORITY::D3D12_RESIDENCY_PRIORITY_NORMAL">
    <summary>Indicates a normal, medium, priority.</summary>
  </comment>
  <comment id="D3D12_RESIDENCY_PRIORITY::D3D12_RESIDENCY_PRIORITY_HIGH">
    <summary>Indicates a high priority. Applications are discouraged from using priories greater than this. For more information see <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12device1-setresidencypriority">ID3D12Device1::SetResidencyPriority</a>.</summary>
  </comment>
  <comment id="D3D12_RESIDENCY_PRIORITY::D3D12_RESIDENCY_PRIORITY_MAXIMUM">
    <summary>Indicates a maximum priority. Applications are discouraged from using priorities greater than this; <b>D3D12_RESIDENCY_PRIORITY_MAXIMUM</b> is not guaranteed to be available. For more information see <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12device1-setresidencypriority">ID3D12Device1::SetResidencyPriority</a></summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM">
    <summary>
      <para>Represents a compressed bitstream from which video is decoded.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_video_decode_compressed_bitstream" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM::pBuffer">
    <summary>A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a> representing the source buffer containing the compressed bitstream to decode.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM::Offset">
    <summary>The offset to the beginning of the first slice.  This offset has alignment requirements based on the tier value of the video decoder. For more information on decoding tiers, see <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_decode_tier.md">D3D12_VIDEO_DECODE_TIER</a>.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM::Size">
    <summary>The size of the subregion of <i>pBuffer</i> that contains the bitstream.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_BARRIER_TYPE">
    <summary>
      <para>Specifies a type of resource barrier (transition in resource use) description.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_resource_barrier_type" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RESOURCE_BARRIER_TYPE::D3D12_RESOURCE_BARRIER_TYPE_TRANSITION">
    <summary>A transition barrier that indicates a transition of a set of subresources between different usages. The caller must specify the before and after usages of the subresources.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_BARRIER_TYPE::D3D12_RESOURCE_BARRIER_TYPE_ALIASING">
    <summary>An aliasing barrier that indicates a transition between usages of 2 different resources that have mappings into the same tile pool. The caller can specify both the before and the after resource. Note that one or both resources can be <b>NULL</b>, which indicates that any tiled resource could cause aliasing.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_BARRIER_TYPE::D3D12_RESOURCE_BARRIER_TYPE_UAV">
    <summary>An unordered access view (UAV) barrier that indicates all UAV accesses (reads or writes) to a particular resource must complete before any future UAV accesses (read or write) can begin.</summary>
  </comment>
  <comment id="D3D12_SUBRESOURCE_RANGE_UINT64">
    <summary>
      <para>Describes a subresource memory range.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_subresource_range_uint64" /></para>
    </summary>
  </comment>
  <comment id="D3D12_SUBRESOURCE_RANGE_UINT64::Subresource">
    <summary>The index of the subresource.</summary>
  </comment>
  <comment id="D3D12_SUBRESOURCE_RANGE_UINT64::Range">
    <summary>A memory range within the subresource.</summary>
  </comment>
  <comment id="D3D12_PIPELINE_STATE_FLAGS">
    <summary>
      <para>Flags to control pipeline state.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_pipeline_state_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_PIPELINE_STATE_FLAGS::D3D12_PIPELINE_STATE_FLAG_NONE">
    <summary>Indicates no flags.</summary>
  </comment>
  <comment id="D3D12_PIPELINE_STATE_FLAGS::D3D12_PIPELINE_STATE_FLAG_TOOL_DEBUG">
    <summary>Indicates that the pipeline state should be compiled with additional information to assist debugging.
          This can only be set on WARP devices.</summary>
  </comment>
  <comment id="ID3D12CommandAllocator">
    <summary>
      <para>Represents the allocations of storage for graphics processing unit (GPU) commands.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12commandallocator" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TEXCUBE_ARRAY_SRV">
    <summary>
      <para>Describes the subresources from an array of cube textures to use in a shader-resource view.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_texcube_array_srv" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TEXCUBE_ARRAY_SRV::MostDetailedMip">
    <summary>Index of the most detailed mipmap level to use; this number is between 0 and <b>MipLevels</b> (from the original TextureCube for which <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12device-createshaderresourceview">ID3D12Device::CreateShaderResourceView</a> creates a view) -1.</summary>
  </comment>
  <comment id="D3D12_TEXCUBE_ARRAY_SRV::MipLevels">
    <summary>The maximum number of mipmap levels for the view of the texture. See the remarks in <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tex1d_srv">D3D12_TEX1D_SRV</a>.

Set to -1 to indicate all the mipmap levels from <b>MostDetailedMip</b> on down to least detailed.</summary>
  </comment>
  <comment id="D3D12_TEXCUBE_ARRAY_SRV::First2DArrayFace">
    <summary>Index of the first 2D texture to use.</summary>
  </comment>
  <comment id="D3D12_TEXCUBE_ARRAY_SRV::NumCubes">
    <summary>Number of cube textures in the array.</summary>
  </comment>
  <comment id="D3D12_TEXCUBE_ARRAY_SRV::ResourceMinLODClamp">
    <summary>A value to clamp sample LOD values to. For example, if you specify 2.0f for the clamp value, you ensure that no individual sample accesses a mip level less than 2.0f.</summary>
  </comment>
  <comment id="ID3D12DebugDevice::ReportLiveDeviceObjects">
    <summary>
      <para>Reports information about a device object's lifetime.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12debugdevice-reportlivedeviceobjects" /></para>
      <param name="Flags">A value from the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ne-d3d12sdklayers-d3d12_rldo_flags">D3D12_RLDO_FLAGS</a> enumeration.
            This method uses the value in <i>Flags</i> to determine the amount of information to report about a device object's lifetime.</param>
    </summary>
  </comment>
  <comment id="ID3D12ShaderReflection::GetNumInterfaceSlots">
    <summary>
      <para>Gets the number of interface slots in a shader.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getnuminterfaceslots" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_REFERENCE_SET">
    <summary>
      <para>Contains the reference frames needed to perform video processing.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_video_process_reference_set" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_REFERENCE_SET::NumPastFrames">
    <summary>The number of past reference frames provided in <i>ppPastFrames</i>.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_REFERENCE_SET::ppPastFrames">
    <summary>A pointer to an array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a> surfaces. The number of elements in the array is <i>NumPastFrames</i>.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_REFERENCE_SET::pPastSubresources">
    <summary>An array of subresource indices for the list of <i>ppPastFrames</i> textures.  NULL indicates subresource 0 for each resource.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_REFERENCE_SET::NumFutureFrames">
    <summary>The number of future reference frames provided in <i>ppPastFrames</i>.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_REFERENCE_SET::ppFutureFrames">
    <summary>A pointer to an array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a> surfaces. The number of elements in the array is <i>NumFutureFrames</i>.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_REFERENCE_SET::pFutureSubresources">
    <summary>An array of subresource indices for the list of <i>ppFutureFrames</i> textures.  NULL indicates subresource 0 for each resource.</summary>
  </comment>
  <comment id="D3D12_MEASUREMENTS_ACTION">
    <summary>
      <para>Defines constants that specify what should be done with the results of earlier workload instrumentation.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_measurements_action" /></para>
    </summary>
  </comment>
  <comment id="D3D12_MEASUREMENTS_ACTION::D3D12_MEASUREMENTS_ACTION_KEEP_ALL">
    <summary>The default setting. Specifies that all results should be kept.</summary>
  </comment>
  <comment id="D3D12_MEASUREMENTS_ACTION::D3D12_MEASUREMENTS_ACTION_COMMIT_RESULTS">
    <summary>Specifies that the driver has seen all the data that it's ever going to, so it should stop waiting for more and go ahead compiling optimized shaders.</summary>
  </comment>
  <comment id="D3D12_MEASUREMENTS_ACTION::D3D12_MEASUREMENTS_ACTION_COMMIT_RESULTS_HIGH_PRIORITY">
    <summary>Like <b>D3D12_MEASUREMENTS_ACTION_COMMIT_RESULTS</b>, but also specifies that your application doesn't care about glitches, so the runtime should ignore the usual idle priority rules and go ahead using as many threads as possible to get shader recompiles done fast. Available only in <b>Developer mode</b>.</summary>
  </comment>
  <comment id="D3D12_MEASUREMENTS_ACTION::D3D12_MEASUREMENTS_ACTION_DISCARD_PREVIOUS">
    <summary>Specifies that the optimization state should be reset; hinting that whatever has previously been measured no longer applies.</summary>
  </comment>
  <comment id="D3D12_COMPARISON_FUNC">
    <summary>
      <para>Specifies comparison options.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_comparison_func" /></para>
    </summary>
  </comment>
  <comment id="D3D12_COMPARISON_FUNC::D3D12_COMPARISON_FUNC_NEVER">
    <summary>Never pass the comparison.</summary>
  </comment>
  <comment id="D3D12_COMPARISON_FUNC::D3D12_COMPARISON_FUNC_LESS">
    <summary>If the source data is less than the destination data, the comparison passes.</summary>
  </comment>
  <comment id="D3D12_COMPARISON_FUNC::D3D12_COMPARISON_FUNC_EQUAL">
    <summary>If the source data is equal to the destination data, the comparison passes.</summary>
  </comment>
  <comment id="D3D12_COMPARISON_FUNC::D3D12_COMPARISON_FUNC_LESS_EQUAL">
    <summary>If the source data is less than or equal to the destination data, the comparison passes.</summary>
  </comment>
  <comment id="D3D12_COMPARISON_FUNC::D3D12_COMPARISON_FUNC_GREATER">
    <summary>If the source data is greater than the destination data, the comparison passes.</summary>
  </comment>
  <comment id="D3D12_COMPARISON_FUNC::D3D12_COMPARISON_FUNC_NOT_EQUAL">
    <summary>If the source data is not equal to the destination data, the comparison passes.</summary>
  </comment>
  <comment id="D3D12_COMPARISON_FUNC::D3D12_COMPARISON_FUNC_GREATER_EQUAL">
    <summary>If the source data is greater than or equal to the destination data, the comparison passes.</summary>
  </comment>
  <comment id="D3D12_COMPARISON_FUNC::D3D12_COMPARISON_FUNC_ALWAYS">
    <summary>Always pass the comparison.</summary>
  </comment>
  <comment id="ID3D12Device::CreateFence">
    <summary>
      <para>Creates a fence object.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createfence" /></para>
      <param name="InitialValue">The initial value for the fence.</param>
      <param name="Flags">A combination of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_fence_flags">D3D12_FENCE_FLAGS</a>-typed values that are combined by using a bitwise OR operation. 
            The resulting value specifies options for the fence.</param>
      <param name="riid">The globally unique identifier (<b>GUID</b>) for the fence interface (<a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12fence">ID3D12Fence</a>).
            The <b>REFIID</b>, or <b>GUID</b>, of the interface to the fence can be obtained by using the __uuidof() macro.
            For example, __uuidof(ID3D12Fence) will get the <b>GUID</b> of the interface to a fence.</param>
      <param name="ppFence">A pointer to a memory block that receives a pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12fence">ID3D12Fence</a> interface that is used to access the fence.</param>
    </summary>
  </comment>
  <comment id="ID3D12VideoDecodeCommandList">
    <summary>
      <para>Encapsulates a list of graphics commands for video decoding.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/nn-d3d12video-id3d12videodecodecommandlist" /></para>
    </summary>
  </comment>
  <comment id="D3D12_QUERY_HEAP_TYPE">
    <summary>
      <para>Specifies the type of query heap to create.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_query_heap_type" /></para>
    </summary>
  </comment>
  <comment id="D3D12_QUERY_HEAP_TYPE::D3D12_QUERY_HEAP_TYPE_OCCLUSION">
    <summary>This returns a binary 0/1 result:  0 indicates that no samples passed depth and stencil testing, 1 indicates that at least one sample passed depth and stencil testing.  This enables occlusion queries to not interfere with any GPU performance optimization associated with depth/stencil testing.</summary>
  </comment>
  <comment id="D3D12_QUERY_HEAP_TYPE::D3D12_QUERY_HEAP_TYPE_TIMESTAMP">
    <summary>Indicates that the heap is for high-performance timing data.</summary>
  </comment>
  <comment id="D3D12_QUERY_HEAP_TYPE::D3D12_QUERY_HEAP_TYPE_PIPELINE_STATISTICS">
    <summary>Indicates the heap is to contain pipeline data. Refer to <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_query_data_pipeline_statistics">D3D12_QUERY_DATA_PIPELINE_STATISTICS</a>.</summary>
  </comment>
  <comment id="D3D12_QUERY_HEAP_TYPE::D3D12_QUERY_HEAP_TYPE_SO_STATISTICS">
    <summary>Indicates the heap is to contain stream output data. Refer to <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_query_data_so_statistics">D3D12_QUERY_DATA_SO_STATISTICS</a>.</summary>
  </comment>
  <comment id="D3D12_QUERY_HEAP_TYPE::D3D12_QUERY_HEAP_TYPE_VIDEO_DECODE_STATISTICS">
    <summary>Indicates the heap is to contain video decode statistics data. Refer to <a href="https://docs.microsoft.com../d3d12video/ns-d3d12video-d3d12_query_data_video_decode_statistics.md">D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS</a>.

Video decode statistics can only be queried from video decode command lists (<a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_command_list_type">D3D12_COMMAND_LIST_TYPE_VIDEO_DECODE</a>). See <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_query_type">D3D12_QUERY_TYPE_DECODE_STATISTICS</a> for more details.</summary>
  </comment>
  <comment id="D3D12_QUERY_HEAP_TYPE::D3D12_QUERY_HEAP_TYPE_COPY_QUEUE_TIMESTAMP">
    <summary>Indicates the heap is to contain timestamp queries emitted exclusively by copy command lists. Copy queue timestamps can only be queried from a copy command list, and a copy command list can not emit to a regular timestamp query Heap.

Support for this query heap type is not universal. You must use <a href="https://docs.microsoft.com/windows/win32/api/d3d12/nf-d3d12-id3d12device-checkfeaturesupport">CheckFeatureSupport</a> with <a href="https://docs.microsoft.com./ne-d3d12-d3d12_feature.md">D3D12_FEATURE_D3D12_OPTIONS3</a> to determine whether the adapter supports copy queue timestamp queries.</summary>
  </comment>
  <comment id="ID3D12ShaderReflectionVariable::GetBuffer">
    <summary>
      <para>Returns the ID3D12ShaderReflectionConstantBuffer of the present ID3D12ShaderReflectionVariable.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflectionvariable-getbuffer" /></para>
    </summary>
  </comment>
  <comment id="ID3D12Device5::EnumerateMetaCommandParameters">
    <summary>
      <para>Queries reflection metadata about the parameters of the specified meta command.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device5-enumeratemetacommandparameters" /></para>
      <param name="CommandId">A reference to the globally unique identifier (GUID) of the meta command whose parameters you wish to be returned in <i>pParameterDescs</i>.</param>
      <param name="Stage">A <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_meta_command_parameter_stage">D3D12_META_COMMAND_PARAMETER_STAGE</a> specifying the stage of the parameters that you wish to be included in the query.</param>
      <param name="pTotalStructureSizeInBytes">An optional pointer to a <a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a> containing the size of the structure containing the parameter values, which you pass when creating/initializing/executing the meta command, as appropriate.</param>
      <param name="pParameterCount">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a> containing the number of parameters to query for. This field determines the size of the <i>pParameterDescs</i> array, unless <i>pParameterDescs</i> is <b>nullptr</b>.</param>
      <param name="pParameterDescs">An optional pointer to an array of  <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_meta_command_parameter_desc">D3D12_META_COMMAND_PARAMETER_DESC</a> containing the descriptions of the parameters. Pass <b>nullptr</b> to have the parameter count returned in <i>pParameterCount</i>.</param>
    </summary>
  </comment>
  <comment id="ID3D12InfoQueue::SetMuteDebugOutput">
    <summary>
      <para>Set a boolean that turns the debug output on or off.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-setmutedebugoutput" /></para>
      <param name="bMute">Disable/Enable the debug output (true to disable or mute the output, false to enable the output).</param>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO">
    <summary>
      <para>Describes a video extension command parameter.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_video_extension_command_parameter_info" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO::Name">
    <summary>A pointer to a wide string containing the name of the command.</summary>
  </comment>
  <comment id="D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO::Type">
    <summary>A member of the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_extension_command_parameter_type.md">D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE</a> specifying the type of the parameter.</summary>
  </comment>
  <comment id="D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO::Flags">
    <summary>A member of the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_extension_command_parameter_flags.md">D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS</a> enumeration specifying the usage of the parameter.</summary>
  </comment>
  <comment id="D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER">
    <summary>
      <para>Describes the GPU memory layout of an acceleration structure visualization.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_build_raytracing_acceleration_structure_tools_visualization_header" /></para>
    </summary>
  </comment>
  <comment id="D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER::Type">
    <summary>The type of acceleration structure.</summary>
  </comment>
  <comment id="D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER::NumDescs">
    <summary>The number of descriptions.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_FEATURE_LEVELS">
    <summary>
      <para>Describes info about the feature levels supported by the current graphics driver.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_feature_data_feature_levels" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_FEATURE_LEVELS::NumFeatureLevels">
    <summary>The number of <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">feature levels</a> in the array at <b>pFeatureLevelsRequested</b>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_FEATURE_LEVELS::pFeatureLevelsRequested">
    <summary>A pointer to an array of <a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_feature_level">D3D_FEATURE_LEVEL</a>s that the application is requesting for the driver and hardware to evaluate.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_FEATURE_LEVELS::MaxSupportedFeatureLevel">
    <summary>The maximum <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">feature level</a> that the driver and hardware support.</summary>
  </comment>
  <comment id="ID3D12Tools">
    <summary>
      <para>This interface is used to configure the runtime for tools such as PIX. Its not intended or supported for any other scenario.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12tools" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TEX1D_UAV">
    <summary>
      <para>Describes a unordered-access 1D texture resource.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_tex1d_uav" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TEX1D_UAV::MipSlice">
    <summary>The mipmap slice index.</summary>
  </comment>
  <comment id="ID3D12PipelineLibrary::LoadGraphicsPipeline">
    <summary>
      <para>Retrieves the requested PSO from the library.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12pipelinelibrary-loadgraphicspipeline" /></para>
      <param name="pName">The unique name of the PSO.</param>
      <param name="pDesc">Specifies a description of the required PSO in a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_graphics_pipeline_state_desc">D3D12_GRAPHICS_PIPELINE_STATE_DESC</a> structure. This input description is matched against the data in the current library database, and stored in order to prevent duplication of PSO contents.</param>
      <param name="riid">Specifies a REFIID for the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12pipelinestate">ID3D12PipelineState</a> object. Typically set this, and the following parameter, with the macro <c>IID_PPV_ARGS(&amp;PSO1)</c>, where <i>PSO1</i> is the name of the object.</param>
      <param name="ppPipelineState">Specifies a pointer that will reference the returned PSO.</param>
    </summary>
  </comment>
  <comment id="ID3D12InfoQueue::PushEmptyStorageFilter">
    <summary>
      <para>Push an empty storage filter onto the storage-filter stack.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-pushemptystoragefilter" /></para>
    </summary>
  </comment>
  <comment id="ID3D12ProtectedResourceSession::GetDesc">
    <summary>
      <para>Retrieves a description of the protected resource session.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12protectedresourcesession-getdesc" /></para>
    </summary>
  </comment>
  <comment id="ID3D12PipelineLibrary::GetSerializedSize">
    <summary>
      <para>Returns the amount of memory required to serialize the current contents of the database.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12pipelinelibrary-getserializedsize" /></para>
    </summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::Dispatch">
    <summary>
      <para>Executes a compute shader on a thread group.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-dispatch" /></para>
      <param name="ThreadGroupCountX">The number of groups dispatched in the x direction. <i>ThreadGroupCountX</i> must be less than or equal to D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION (65535).</param>
      <param name="ThreadGroupCountY">The number of groups dispatched in the y direction. <i>ThreadGroupCountY</i> must be less than or equal to D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION (65535).</param>
      <param name="ThreadGroupCountZ">The number of groups dispatched in the z direction.  <i>ThreadGroupCountZ</i> must be less than or equal to D3D11_CS_DISPATCH_MAX_THREAD_GROUPS_PER_DIMENSION (65535).
            In feature level 10 the value for <i>ThreadGroupCountZ</i> must be 1.</param>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_ALPHA_BLENDING">
    <summary>
      <para>Specifies alpha blending parameters for video processing.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_video_process_alpha_blending" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_ALPHA_BLENDING::Enable">
    <summary>A boolean value specifying whether alpha blending is enabled.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_ALPHA_BLENDING::Alpha">
    <summary>The planar alpha value. The value can range from 0.0 (transparent) to 1.0 (opaque). If <i>Enable</i> is FALSe, this parameter is ignored.</summary>
  </comment>
  <comment id="D3D12_SHADER_MIN_PRECISION_SUPPORT">
    <summary>
      <para>Describes minimum precision support options for shaders in the current graphics driver.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_shader_min_precision_support" /></para>
    </summary>
  </comment>
  <comment id="D3D12_SHADER_MIN_PRECISION_SUPPORT::D3D12_SHADER_MIN_PRECISION_SUPPORT_NONE">
    <summary>The driver supports only full 32-bit precision for all shader stages.</summary>
  </comment>
  <comment id="D3D12_SHADER_MIN_PRECISION_SUPPORT::D3D12_SHADER_MIN_PRECISION_SUPPORT_10_BIT">
    <summary>The driver supports 10-bit precision.</summary>
  </comment>
  <comment id="D3D12_SHADER_MIN_PRECISION_SUPPORT::D3D12_SHADER_MIN_PRECISION_SUPPORT_16_BIT">
    <summary>The driver supports 16-bit precision.</summary>
  </comment>
  <comment id="D3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS">
    <summary>
      <para>Describes per-command-list settings used by GPU-Based Validation.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/ns-d3d12sdklayers-d3d12_debug_command_list_gpu_based_validation_settings" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS::ShaderPatchMode">
    <summary>Specifies a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ne-d3d12sdklayers-d3d12_gpu_based_validation_shader_patch_mode">D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE</a> that overrides the default device-level shader patch mode (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/nf-d3d12sdklayers-id3d12debugdevice1-setdebugparameter">ID3D12DebugDevice1::SetDebugParameter</a>).  By default this value is initialized to the <i>DefaultShaderPatchMode</i> assigned to the device (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ns-d3d12sdklayers-d3d12_debug_device_gpu_based_validation_settings">D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS</a>.</summary>
  </comment>
  <comment id="D3D12_SAMPLE_POSITION">
    <summary>
      <para>Describes a sub-pixel sample position for use with programmable sample positions.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_sample_position" /></para>
    </summary>
  </comment>
  <comment id="D3D12_SAMPLE_POSITION::X">
    <summary>A signed sub-pixel coordinate value in the X axis.</summary>
  </comment>
  <comment id="D3D12_SAMPLE_POSITION::Y">
    <summary>A signed sub-pixel coordinate value in the Y axis.</summary>
  </comment>
  <comment id="ID3D12InfoQueue::GetBreakOnID">
    <summary>
      <para>Get a message identifier to break on when a message with that identifier passes through the storage filter.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getbreakonid" /></para>
      <param name="ID">Message identifier to break on.</param>
    </summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_BEGINNING_ACCESS">
    <summary>
      <para>Describes the access to resource(s) that is requested by an application at the transition into a render pass.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_render_pass_beginning_access" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_BEGINNING_ACCESS::Type">
    <summary>A <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_render_pass_beginning_access_type">D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE</a>. The type of access being requested.</summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_BEGINNING_ACCESS::Clear">
    <summary>A <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_render_pass_beginning_access_clear_parameters">D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS</a>. Appropriate when  <b>Type</b> is <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_render_pass_beginning_access_type">D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_CLEAR</a>. The clear value to which resource(s) should be cleared.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList3::SetProtectedResourceSession">
    <summary>
      <para>Specifies whether or not protected resources can be accessed by subsequent commands in the command list.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist3-setprotectedresourcesession" /></para>
      <param name="pProtectedResourceSession">An optional pointer to an <b>ID3D12ProtectedResourceSession</b>. You can obtain an <b>ID3D12ProtectedResourceSession</b> by calling [ID3D12Device4::CreateProtectedResourceSession](./nf-d3d12-id3d12device4-createprotectedresourcesession.md).</param>
    </summary>
  </comment>
  <comment id="ID3D12ShaderReflection::GetConstantBufferByName">
    <summary>
      <para>Gets a constant buffer by name.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getconstantbufferbyname" /></para>
      <param name="Name">The constant-buffer name.</param>
    </summary>
  </comment>
  <comment id="D3D12_TEX2DMS_ARRAY_RTV">
    <summary>
      <para>Describes the subresources from an array of multi sampled 2D textures to use in a render-target view.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_tex2dms_array_rtv" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TEX2DMS_ARRAY_RTV::FirstArraySlice">
    <summary>The index of the first texture to use in an array of textures.</summary>
  </comment>
  <comment id="D3D12_TEX2DMS_ARRAY_RTV::ArraySize">
    <summary>The number of textures to use.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_GEOMETRY_AABBS_DESC">
    <summary>
      <para>Describes a set of Axis-aligned bounding boxes that are used in the D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS structure to provide input data to a raytracing acceleration structure build operation.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_raytracing_geometry_aabbs_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RAYTRACING_GEOMETRY_AABBS_DESC::AABBCount">
    <summary>The number of AABBs pointed to in the contiguous array at <i>AABBs</i>.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_GEOMETRY_AABBS_DESC::AABBs">
    <summary>the GPU memory location where an array of AABB descriptions is to be found, including the data stride between AABBs.  The address and stride must each be aligned to 8 bytes, defined as The address must be aligned to 16 bytes, defined as <a href="https://docs.microsoft.com/windows/desktop/direct3d12/constants"> D3D12_RAYTRACING_AABB_BYTE_ALIGNMENT</a>.  The stride can be 0.</summary>
  </comment>
  <comment id="D3D12_TEX1D_DSV">
    <summary>
      <para>Describes the subresource from a 1D texture that is accessible to a depth-stencil view.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_tex1d_dsv" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TEX1D_DSV::MipSlice">
    <summary>The index of the first mipmap level to use.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList4::CopyRaytracingAccelerationStructure">
    <summary>
      <para>Copies a source acceleration structure to destination memory while applying the specified transformation.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist4-copyraytracingaccelerationstructure" /></para>
      <param name="DestAccelerationStructureData">The destination memory. The required size can be discovered by calling <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12graphicscommandlist4-emitraytracingaccelerationstructurepostbuildinfo">EmitRaytracingAccelerationStructurePostbuildInfo</a> beforehand, if necessary for the specified <i>Mode</i>.  

The destination start address must be aligned to 256 bytes, defined as <a href="https://docs.microsoft.com/windows/desktop/direct3d12/constants">D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BYTE_ALIGNMENT</a>, regardless of the specified <i>Mode</i>. 

The destination memory range cannot overlap source. Otherwise, results are undefined.  

The resource state that the memory pointed to must be in depends on the <i>Mode</i> parameter. For more information, see <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_raytracing_acceleration_structure_copy_mode">D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE</a>.</param>
      <param name="SourceAccelerationStructureData">The address of the acceleration structure or other type of data to copy/transform based on the specified <i>Mode</i>.  The data remains unchanged and usable.  The operation only copies the data  pointed to by <i>SourceAccelerationStructureData</i> and not any other data, such as acceleration structures, that the source data may point to.  For example, in the case of a top-level acceleration structure, any bottom-level acceleration structures that it points to are not copied in the operation.

The source memory must be aligned to 256 bytes, defined as <a href="https://docs.microsoft.com/windows/desktop/direct3d12/constants">D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BYTE_ALIGNMENT</a>, regardless of the specified <i>Mode</i>. 

The resource state that the memory pointed to must be in depends on the <i>Mode</i> parameter. For more information, see <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_raytracing_acceleration_structure_copy_mode">D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE</a>.</param>
      <param name="Mode">The type of copy operation to perform. For more information, see <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_raytracing_acceleration_structure_copy_mode">D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE</a>.</param>
    </summary>
  </comment>
  <comment id="D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA">
    <summary>
      <para>Represents versioned Device Removed Extended Data (DRED) data.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_versioned_device_removed_extended_data" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA::Version">
    <summary>A <a href="https://docs.microsoft.comne-d3d12-d3d12_dred_version.md">D3D12_DRED_VERSION</a> value, specifying a DRED version. This value determines which inner data member (of the union) is active.</summary>
  </comment>
  <comment id="D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA::Dred_1_0">
    <summary>A <a href="https://docs.microsoft.comns-d3d12-d3d12_device_removed_extended_data.md">D3D12_DEVICE_REMOVED_EXTENDED_DATA</a> value, containing DRED version 1.0 data.</summary>
  </comment>
  <comment id="D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA::Dred_1_1">
    <summary>A <a href="https://docs.microsoft.comns-d3d12-d3d12_device_removed_extended_data1.md">D3D12_DEVICE_REMOVED_EXTENDED_DATA1</a> value, containing DRED version 1.1 data.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS">
    <summary>
      <para>Specifies flags for the build of a raytracing acceleration structure. Use a value from this enumeration with the D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS structure that provides input to the acceleration structure build operation.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_raytracing_acceleration_structure_build_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_NONE">
    <summary>No options specified for the acceleration structure build.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_UPDATE">
    <summary>Build the acceleration structure such that it supports future updates (via the flag <b>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PERFORM_UPDATE</b>) instead of the app having to entirely rebuild the structure.  This option may result in increased memory consumption, build times, and lower raytracing performance.  Future updates, however, should be faster than building the equivalent acceleration structure from scratch.

This flag can only be set on an initial acceleration structure build, or on an update where the source acceleration structure specified <b>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_UPDATE</b>.  In other words, after an acceleration structure was been built without <b>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_UPDATE</b>, no other acceleration structures can be created from it via updates.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_COMPACTION">
    <summary>Enables the option to compact the acceleration structure by calling <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12graphicscommandlist4-copyraytracingaccelerationstructure">CopyRaytracingAccelerationStructure</a> using compact mode, specified with <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_raytracing_acceleration_structure_copy_mode">D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_COMPACT</a>.  

This option may result in increased memory consumption and build times.  After future compaction, however, the resulting acceleration structure should consume a smaller memory footprint than building the acceleration structure from scratch.  

This flag is compatible with all other flags.  If specified as part of an acceleration structure update, the source acceleration structure must have also been built with this flag.  In other words, after an acceleration structure was been built without <b>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_COMPACTION</b>, no other acceleration structures can be created from it via updates that specify <b>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_COMPACTION</b>.



Specifying ALLOW_COMPACTION may increase pre-compaction acceleration structure size versus not specifying ALLOW_COMPACTION.  



If multiple incremental builds are performed before finally compacting, there may be redundant compaction related work performed.


The size required for the compacted acceleration structure can be queried before compaction via <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12graphicscommandlist4-emitraytracingaccelerationstructurepostbuildinfo">EmitRaytracingAccelerationStructurePostbuildInfo</a>. See <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_raytracing_acceleration_structure_postbuild_info_compacted_size_desc">D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC</a> for more information on properties of compacted acceleration structure size.

<div class="alert"><b>Note</b>  When<b>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_UPDATE</b> is specified, there is certain information that needs to be retained in the acceleration structure, and compaction will only help so much. However, if the pipeline knows that the acceleration structure will no longer be updated, it can make the structure more compact.  Some apps may benefit from compacting twice - once after the initial build, and again after the acceleration structure has settled to a static state, if that occurs.</div>
<div> </div></summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_TRACE">
    <summary>Construct a high quality acceleration structure that maximizes raytracing performance at the expense of additional build time.  Typically, the implementation will take 2-3 times the build time than the default setting in order to get better tracing performance. 

This flag is recommended for static geometry in particular.  It is compatible with all other flags except for <b>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_BUILD</b>.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_BUILD">
    <summary>Construct a lower quality acceleration structure, trading raytracing performance for build speed.  Typically, the implementation will take 1/2 to 1/3 the build time than default setting, with a sacrifice in tracing performance.

This flag is compatible with all other flags except for <b>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PREFER_FAST_BUILD</b>.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_MINIMIZE_MEMORY">
    <summary>Minimize the amount of scratch memory used during the acceleration structure build as well as the size of the result.  This option may result in increased build times and/or raytracing times. This is orthogonal to the <b>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_COMPACTION</b> flag and the explicit acceleration structure compaction that it enables.  Combining the flags can mean both the initial acceleration structure as well as the result of compacting it use less memory.

The impact of using this flag for a build is reflected in the result of calling <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12device5-getraytracingaccelerationstructureprebuildinfo">GetRaytracingAccelerationStructurePrebuildInfo</a> before doing the build to retrieve memory requirements for the build.

This flag is compatible with all other flags.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAGS::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PERFORM_UPDATE">
    <summary>Perform an acceleration structure update, as opposed to building from scratch.  This is faster than a full build, but can negatively impact raytracing performance, especially if the positions of the underlying objects have changed significantly from the original build of the acceleration structure before updates.

If the addresses of the source and destination acceleration structures are identical, the update is performed in-place.  Any other overlapping of address ranges of the source and destination is invalid.  For non-overlapping source and destinations, the source acceleration structure is unmodified.  The memory requirement for the output acceleration structure is the same as in the input acceleration structure

The source acceleration structure must have been built with <b>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_UPDATE</b>.

This flag is compatible with all other flags.  The other flags selections, aside from <b>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_UPDATE</b> and <b>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PERFORM_UPDATE</b>, must match the flags in the source acceleration structure.

Acceleration structure updates can be performed in unlimited succession, as long as the source acceleration structure was created with <b>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_UPDATE</b> and the flags for the update build continue to specify <b>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_UPDATE</b>.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_ALIASING_BARRIER">
    <summary>
      <para>Describes the transition between usages of two different resources that have mappings into the same heap.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_resource_aliasing_barrier" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RESOURCE_ALIASING_BARRIER::pResourceBefore">
    <summary>A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a> object that represents the before resource used in the transition.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_ALIASING_BARRIER::pResourceAfter">
    <summary>A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a> object that represents the after resource used in the transition.</summary>
  </comment>
  <comment id="ID3D12DebugCommandList::AssertResourceState">
    <summary>
      <para>Checks whether a resource, or subresource, is in a specified state, or not.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12debugcommandlist-assertresourcestate" /></para>
      <param name="pResource">Specifies the  <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a> to check.</param>
      <param name="Subresource">The index of the subresource to check. This can be set to an index, or D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES.</param>
      <param name="State">Specifies the state to check for. This can be one or more D3D12_RESOURCE_STATES flags Or'ed together.</param>
    </summary>
  </comment>
  <comment id="D3D12_RANGE_UINT64">
    <summary>
      <para>Describes a memory range in a 64-bit address space.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_range_uint64" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RANGE_UINT64::Begin">
    <summary>The offset, in bytes, denoting the beginning of a memory range.</summary>
  </comment>
  <comment id="D3D12_RANGE_UINT64::End">
    <summary>The offset, in bytes, denoting the end of a memory range.
            <b>End</b> is one-past-the-end.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::SetGraphicsRootConstantBufferView">
    <summary>
      <para>Sets a CPU descriptor handle for the constant buffer in the graphics root signature.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setgraphicsrootconstantbufferview" /></para>
      <param name="RootParameterIndex">The slot number for binding.</param>
      <param name="BufferLocation">The GPU virtual address of the constant buffer.
            D3D12_GPU_VIRTUAL_ADDRESS is a typedef'd alias of UINT64.</param>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_FILTER_FLAGS">
    <summary>
      <para>Specifies support for the image filters defined by the D3D12_VIDEO_PROCESS_FILTER enumeration.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ne-d3d12video-d3d12_video_process_filter_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_FILTER_FLAGS::D3D12_VIDEO_PROCESS_FILTER_FLAG_NONE">
    <summary>The video processor doesn't support any filters.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_FILTER_FLAGS::D3D12_VIDEO_PROCESS_FILTER_FLAG_BRIGHTNESS">
    <summary>The video processor can adjust the brightness level.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_FILTER_FLAGS::D3D12_VIDEO_PROCESS_FILTER_FLAG_CONTRAST">
    <summary>The video processor can adjust the contrast level.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_FILTER_FLAGS::D3D12_VIDEO_PROCESS_FILTER_FLAG_HUE">
    <summary>The video processor can adjust hue.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_FILTER_FLAGS::D3D12_VIDEO_PROCESS_FILTER_FLAG_SATURATION">
    <summary>The video processor can adjust the saturation level.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_FILTER_FLAGS::D3D12_VIDEO_PROCESS_FILTER_FLAG_NOISE_REDUCTION">
    <summary>The video processor can perform noise reduction.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_FILTER_FLAGS::D3D12_VIDEO_PROCESS_FILTER_FLAG_EDGE_ENHANCEMENT">
    <summary>The video processor can perform edge enhancement.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_FILTER_FLAGS::D3D12_VIDEO_PROCESS_FILTER_FLAG_ANAMORPHIC_SCALING">
    <summary>The video processor can perform anamorphic scaling. Anamorphic scaling can be used to stretch 4:3 content to a widescreen 16:9 aspect ratio.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_FILTER_FLAGS::D3D12_VIDEO_PROCESS_FILTER_FLAG_STEREO_ADJUSTMENT">
    <summary>For stereo 3D video, the video processor can adjust the offset between the left and right views, allowing the user to reduce potential eye strain.</summary>
  </comment>
  <comment id="ID3D12VideoDecoderHeap">
    <summary>
      <para>Represents a Direct3D 12 video decoder heap.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/nn-d3d12video-id3d12videodecoderheap" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_ORIENTATION">
    <summary>
      <para>Specifies an orientation operation to be performed by a video processor.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ne-d3d12video-d3d12_video_process_orientation" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_ORIENTATION::D3D12_VIDEO_PROCESS_ORIENTATION_DEFAULT">
    <summary>No change in orientation. 0 degrees.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_ORIENTATION::D3D12_VIDEO_PROCESS_ORIENTATION_FLIP_HORIZONTAL">
    <summary>The image is flipped horizontally.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_ORIENTATION::D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_90">
    <summary>The image is rotated 90 degrees clockwise.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_ORIENTATION::D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_90_FLIP_HORIZONTAL">
    <summary>The image is rotated 90 degrees clockwise and then flipped horizontally.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_ORIENTATION::D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_180">
    <summary>The image is rotated 180 degrees clockwise.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_ORIENTATION::D3D12_VIDEO_PROCESS_ORIENTATION_FLIP_VERTICAL">
    <summary>The image is flipped vertically.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_ORIENTATION::D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_270">
    <summary>The image is rotated 270 degrees clockwise.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_ORIENTATION::D3D12_VIDEO_PROCESS_ORIENTATION_CLOCKWISE_270_FLIP_HORIZONTAL">
    <summary>The image is rotated 270 degrees clockwise and then flipped horizontally.</summary>
  </comment>
  <comment id="ID3D12DeviceChild::GetDevice">
    <summary>
      <para>Gets a pointer to the device that created this interface.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12devicechild-getdevice" /></para>
      <param name="riid">The globally unique identifier (<b>GUID</b>) for the device interface.
            The <b>REFIID</b>, or <b>GUID</b>, of the interface to the device can be obtained by using the __uuidof() macro.
            For example, __uuidof(<a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12device">ID3D12Device</a>) will get the <b>GUID</b> of the interface to a device.</param>
      <param name="ppvDevice">A pointer to a memory block that receives a pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12device">ID3D12Device</a> interface for the device.</param>
    </summary>
  </comment>
  <comment id="D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT">
    <summary>
      <para>Contains a pointer to the head of a linked list of D3D12_AUTO_BREADCRUMB_NODE objects.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_dred_auto_breadcrumbs_output" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT::pHeadAutoBreadcrumbNode">
    <summary>A pointer to a constant <a href="https://docs.microsoft.comns-d3d12-d3d12_auto_breadcrumb_node.md">D3D12_AUTO_BREADCRUMB_NODE</a> object representing the head of a linked list of auto-breadcrumb nodes, or <c>nullptr</c> if the list is empty.</summary>
  </comment>
  <comment id="D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS">
    <summary>
      <para>Defines the inputs for a raytracing acceleration structure build operation. This structure is used by ID3D12GraphicsCommandList4::BuildRaytracingAccelerationStructure and ID3D12Device5::GetRaytracingAccelerationStructurePrebuildInfo.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_build_raytracing_acceleration_structure_inputs" /></para>
    </summary>
  </comment>
  <comment id="D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS::Type">
    <summary>The type of acceleration structure to build.</summary>
  </comment>
  <comment id="D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS::Flags">
    <summary>The build flags.</summary>
  </comment>
  <comment id="D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS::NumDescs">
    <summary>If <i>Type</i> is <b>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TOP_LEVEL</b>, this value is the number of instances, laid out based on <i>DescsLayout</i>.

If <i>Type</i> is <b>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BOTTOM_LEVEL</b>, this value is the number of elements referred to by <i>pGeometryDescs</i> or <i>ppGeometryDescs</i>. Which of these fields  is used depends on <i>DescsLayout</i>.</summary>
  </comment>
  <comment id="D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS::DescsLayout">
    <summary>How geometry descriptions are specified; either an array of descriptions or an array of pointers to descriptions.</summary>
  </comment>
  <comment id="D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS::InstanceDescs">
    <summary>If <i>Type</i> is <b>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TOP_LEVEL</b>, this refers to <i>NumDescs</i><a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_raytracing_instance_desc">D3D12_RAYTRACING_INSTANCE_DESC</a> structures in GPU memory describing instances.  Each instance must be aligned to 16 bytes, defined as <a href="https://docs.microsoft.com/windows/desktop/direct3d12/constants">D3D12_RAYTRACING_INSTANCE_DESC_BYTE_ALIGNMENT</a>.

If <i>Type</i> is not <b>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TOP_LEVEL</b>, this parameter is unused.

If <i>DescLayout</i> is <b>D3D12_ELEMENTS_LAYOUT_ARRAY</b>, <i>InstanceDescs</i> points to an array of instance descriptions in GPU memory. 

If <i>DescLayout</i> is <b>D3D12_ELEMENTS_LAYOUT_ARRAY_OF_POINTERS</b>, <i>InstanceDescs</i> points to an array in GPU memory of <a href="https://docs.microsoft.com/windows/desktop/direct3d12/d3d12_gpu_virtual_address">D3D12_GPU_VIRTUAL_ADDRESS</a> pointers to instance descriptions. 

The memory pointed to must be in state <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_states">D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE</a>.</summary>
  </comment>
  <comment id="D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS::pGeometryDescs">
    <summary>If <i>Type</i> is <b>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BOTTOM_LEVEL</b>, and <i>DescsLayout</i> is <b>D3D12_ELEMENTS_LAYOUT_ARRAY</b>, this field is used and points to <i>NumDescs</i> contiguous <b>D3D12_RAYTRACING_GEOMETRY_DESC</b> structures on the CPU, describing individual geometries.   

If <i>Type</i> is not <b>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BOTTOM_LEVEL</b> or <i>DescsLayout</i> is not <b>D3D12_ELEMENTS_LAYOUT_ARRAY</b>, this parameter is unused.</summary>
  </comment>
  <comment id="D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS::ppGeometryDescs">
    <summary>If <i>Type</i> is <b>D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BOTTOM_LEVEL</b>, and <i>DescsLayout</i> is <b>D3D12_ELEMENTS_LAYOUT_ARRAY_OF_POINTERS</b>, this field is used and points to an array of <i>NumDescs</i> pointers to <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_raytracing_geometry_desc">D3D12_RAYTRACING_GEOMETRY_DESC</a> structures on the CPU, describing individual geometries.</summary>
  </comment>
  <comment id="D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE">
    <summary>
      <para>Specifies the types of parameters for video extension commands.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ne-d3d12video-d3d12_video_extension_command_parameter_type" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE::D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT8">
    <summary>Unsigned 8-bit integer.</summary>
  </comment>
  <comment id="D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE::D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT16">
    <summary>Unsigned 16-bit integer.</summary>
  </comment>
  <comment id="D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE::D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT32">
    <summary>Unsigned 32-bit integer.</summary>
  </comment>
  <comment id="D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE::D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_UINT64">
    <summary>Unsigned 64-bit integer.</summary>
  </comment>
  <comment id="D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE::D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT8">
    <summary>Signed 8-bit integer.</summary>
  </comment>
  <comment id="D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE::D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT16">
    <summary>Signed 16-bit integer.</summary>
  </comment>
  <comment id="D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE::D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT32">
    <summary>Signed 32-bit integer.</summary>
  </comment>
  <comment id="D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE::D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_SINT64">
    <summary>Signed 64-bit integer.</summary>
  </comment>
  <comment id="D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE::D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_FLOAT">
    <summary>IEEE 32-bit floating point number</summary>
  </comment>
  <comment id="D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE::D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_DOUBLE">
    <summary>IEEE 64-bit floating point number</summary>
  </comment>
  <comment id="D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE::D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_TYPE_RESOURCE">
    <summary>A D3D12DDI_HRESOURCE handle.  The caller must use resource barriers to transition to the state appropriate for the parameter.

| D3D12_COMMAND_LIST_SUPPORT_FLAGS value        | Read                      | Write                  |
|-------------------|---------------------------|------------------------|
| D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_DECODE | D3D12_RESOURCE_STATE_VIDEO_DECODE_READ | D3D12_RESOURCE_STATE_VIDEO_DECODE_WRITE |
| D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_PROCESS | D3D12_RESOURCE_STATE_VIDEO_PROCESS_READ | D3D12_RESOURCE_STATE_VIDEO_PROCESS_WRITE |
| D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_ENCODE | D3D12_RESOURCE_STATE_VIDEO_ENCODE_READ | D3D12_RESOURCE_STATE_VIDEO_ENCODE_WRITE |</summary>
  </comment>
  <comment id="ID3D12Device::CreateComputePipelineState">
    <summary>
      <para>Creates a compute pipeline state object.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createcomputepipelinestate" /></para>
      <param name="pDesc">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_compute_pipeline_state_desc">D3D12_COMPUTE_PIPELINE_STATE_DESC</a> structure that describes compute pipeline state.</param>
      <param name="riid">The globally unique identifier (<b>GUID</b>) for the pipeline state interface (<a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12pipelinestate">ID3D12PipelineState</a>).
            The <b>REFIID</b>, or <b>GUID</b>, of the interface to the pipeline state can be obtained by using the __uuidof() macro.
            For example, __uuidof(ID3D12PipelineState) will get the <b>GUID</b> of the interface to a pipeline state.</param>
      <param name="ppPipelineState">A pointer to a memory block that receives a pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12pipelinestate">ID3D12PipelineState</a> interface for the pipeline state object.
            The pipeline state object is an immutable state object.  It contains no methods.</param>
    </summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList4::EmitRaytracingAccelerationStructurePostbuildInfo">
    <summary>
      <para>Emits post-build properties for a set of acceleration structures. This enables applications to know the output resource requirements for performing acceleration structure operations via ID3D12GraphicsCommandList4::CopyRaytracingAccelerationStructure.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist4-emitraytracingaccelerationstructurepostbuildinfo" /></para>
      <param name="pDesc">Description of pos-tbuild information to generate.</param>
      <param name="NumSourceAccelerationStructures">Number of pointers to acceleration structure GPU virtual addresses pointed to by <i>pSourceAccelerationStructureData</i>.  This number also affects the destination (output), which will be a contiguous array of <b>NumSourceAccelerationStructures</b> output structures, where the type of the structures depends on <i>InfoType</i> field of the supplied in the <i>pDesc</i> description.</param>
      <param name="pSourceAccelerationStructureData">Pointer to array of GPU virtual addresses of size <i>NumSourceAccelerationStructures</i>.

The address must be aligned to 256 bytes, defined as <a href="https://docs.microsoft.com/windows/desktop/direct3d12/constants">D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BYTE_ALIGNMENT</a>. 

The memory pointed to must be in state <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_states">D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE</a>.</param>
    </summary>
  </comment>
  <comment id="ID3D12InfoQueue::SetBreakOnID">
    <summary>
      <para>Set a message identifier to break on when a message with that identifier passes through the storage filter.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-setbreakonid" /></para>
      <param name="ID">Message identifier to break on.</param>
      <param name="bEnable">Turns this breaking condition on or off (true for on, false for off).</param>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS">
    <summary>
      <para>Specifies the deinterlacing video processor capabilities.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ne-d3d12video-d3d12_video_process_deinterlace_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS::D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_NONE">
    <summary>No deinterlacing capabilities are available.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS::D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_BOB">
    <summary>The video processor can perform bob deinterlacing. In bob deinterlacing, missing field lines are interpolated from the lines above and below. Bob deinterlacing does not require reference frames.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS::D3D12_VIDEO_PROCESS_DEINTERLACE_FLAG_CUSTOM">
    <summary>The video processor can perform a custom high-quality deinterlacing, which requires the number of reference frames indicated in <i>PastFrames</i> and <i>FutureFrames</i> output fields of the <a href="ns-d3d12video-d3d12_feature_data_video_process_reference_info.md">D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO</a> populated by a call to <a href="nf-d3d12video-id3d12videodevice-checkfeaturesupport.md">ID3D12VideoDevice::CheckFeatureSupport</a> when the feature specified is <a href="ne-d3d12video-d3d12_feature_video.md">D3D12_FEATURE_VIDEO_PROCESS_REFERENCE_INFO</a>. If the video processor doesn’t have the necessary number of reference frames, it falls back to bob deinterlacing.</summary>
  </comment>
  <comment id="D3D12_TEX3D_RTV">
    <summary>
      <para>Describes the subresources from a 3D texture to use in a render-target view.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_tex3d_rtv" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TEX3D_RTV::MipSlice">
    <summary>The index of the mipmap level to use mip slice.</summary>
  </comment>
  <comment id="D3D12_TEX3D_RTV::FirstWSlice">
    <summary>First depth level to use.</summary>
  </comment>
  <comment id="D3D12_TEX3D_RTV::WSize">
    <summary>Number of depth levels to use in the render-target view, starting from <b>FirstWSlice</b>. A value of -1 indicates all of the slices along the w axis, starting from <b>FirstWSlice</b>.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS">
    <summary>
      <para>Specifies the parameters for the input stream for a video decode operation.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_video_decode_input_stream_arguments" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS::NumFrameArguments">
    <summary>The count of frame parameters provided in the <i>FrameArguments</i> field. The maximum number of frame arguments is 10.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS::FrameArguments">
    <summary>An array of <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_decode_frame_argument.md">D3D12_VIDEO_DECODE_FRAME_ARGUMENT</a> structures containing the parameters to decode a frame.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS::ReferenceFrames">
    <summary>A <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_decode_reference_frames.md">D3D12_VIDEO_DECODE_REFERENCE_FRAMES</a> structure containing the reference frames needed to decode a frame.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS::CompressedBitstream">
    <summary>A <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_decode_compressed_bitstream.md">D3D12_VIDEO_DECODE_COMPRESSED_BITSTREAM</a> structure representing the compressed bitstream in a single continuous buffer.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_INPUT_STREAM_ARGUMENTS::pHeap">
    <summary>An <a href="https://docs.microsoft.comnn-d3d12video-id3d12videodecoderheap.md">ID3D12VideoDecoderHeap</a> representing a pointer to the heap for the current decode resolution.</summary>
  </comment>
  <comment id="ID3D12ShaderReflectionType::GetMemberTypeName">
    <summary>
      <para>Gets a shader-reflection-variable type.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflectiontype-getmembertypename" /></para>
      <param name="Index">Zero-based index.</param>
    </summary>
  </comment>
  <comment id="ID3D12Device::CreateSharedHandle">
    <summary>
      <para>Creates a shared handle to an heap, resource, or fence object.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createsharedhandle" /></para>
      <param name="pObject">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12devicechild">ID3D12DeviceChild</a> interface that represents the heap, resource, or fence object to create for sharing.
            The following interfaces (derived from <b>ID3D12DeviceChild</b>) are supported:
            

<ul>
<li>
<a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12heap">ID3D12Heap</a>
</li>
<li>
<a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a>
</li>
<li>
<a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12fence">ID3D12Fence</a>
</li>
</ul></param>
      <param name="pAttributes">A pointer to a <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/aa379560(v=vs.85)">SECURITY_ATTRIBUTES</a>structure that contains two separate but related data members: an optional security descriptor, and a <b>Boolean</b>value that determines whether child processes can inherit the returned handle.
            

Set this parameter to <b>NULL</b> if you want child processes that the
              application might create to not  inherit  the handle returned by
              <b>CreateSharedHandle</b>, and if you want the resource that is associated with the returned handle to get a default security
              descriptor.
            

The <b>lpSecurityDescriptor</b> member of the structure specifies a
              <a href="https://docs.microsoft.com/windows/desktop/api/winnt/ns-winnt-security_descriptor">SECURITY_DESCRIPTOR</a> for the resource.
              Set this member to <b>NULL</b> if you want the runtime to assign a default security descriptor to the resource that is associated with the returned handle.
              The ACLs in the default security descriptor for the resource come from the primary or impersonation token of the creator.
              For more info, see <a href="https://docs.microsoft.com/windows/desktop/Sync/synchronization-object-security-and-access-rights">Synchronization Object Security and Access Rights</a>.</param>
      <param name="Access">Currently the only value this parameter accepts is GENERIC_ALL.</param>
      <param name="Name">A <b>NULL</b>-terminated <b>UNICODE</b> string that contains the name to associate with the shared heap.
              The name is limited to MAX_PATH characters.
              Name comparison is case-sensitive.
            

If <i>Name</i> matches the name of an existing resource, <b>CreateSharedHandle</b> fails with <a href="https://docs.microsoft.com/windows/desktop/direct3ddxgi/dxgi-error">DXGI_ERROR_NAME_ALREADY_EXISTS</a>.
              This occurs because these objects share the same namespace.
            

The name can have a "Global\" or "Local\" prefix to explicitly create the object in the global or session namespace.
              The remainder of the name can contain any character except the backslash character (\\).
              For more information, see
              <a href="https://docs.microsoft.com/windows/desktop/TermServ/kernel-object-namespaces">Kernel Object Namespaces</a>.
              Fast user switching is implemented using Terminal Services sessions.
              Kernel object names must follow the guidelines outlined for Terminal Services so that applications can support multiple users.
            

The object can be created in a private namespace.
              For more information, see <a href="https://docs.microsoft.com/windows/desktop/Sync/object-namespaces">Object Namespaces</a>.</param>
      <param name="pHandle">A pointer to a variable that receives the NT HANDLE value to the resource to share.
            You can use this handle in calls to access the resource.</param>
    </summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC">
    <summary>
      <para>Describes the space requirement for decoding an acceleration structure into a form that can be visualized by tools.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_raytracing_acceleration_structure_postbuild_info_tools_visualization_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC::DecodedSizeInBytes">
    <summary>The space requirement for decoding an acceleration structure into a form that can be visualized by tools.</summary>
  </comment>
  <comment id="D3D12_PRIMITIVE_TOPOLOGY_TYPE">
    <summary>
      <para>Specifies how the pipeline interprets geometry or hull shader input primitives.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_primitive_topology_type" /></para>
    </summary>
  </comment>
  <comment id="D3D12_PRIMITIVE_TOPOLOGY_TYPE::D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED">
    <summary>The shader has not been initialized with an input primitive type.</summary>
  </comment>
  <comment id="D3D12_PRIMITIVE_TOPOLOGY_TYPE::D3D12_PRIMITIVE_TOPOLOGY_TYPE_POINT">
    <summary>Interpret the input primitive as a point.</summary>
  </comment>
  <comment id="D3D12_PRIMITIVE_TOPOLOGY_TYPE::D3D12_PRIMITIVE_TOPOLOGY_TYPE_LINE">
    <summary>Interpret the input primitive as a line.</summary>
  </comment>
  <comment id="D3D12_PRIMITIVE_TOPOLOGY_TYPE::D3D12_PRIMITIVE_TOPOLOGY_TYPE_TRIANGLE">
    <summary>Interpret the input primitive as a triangle.</summary>
  </comment>
  <comment id="D3D12_PRIMITIVE_TOPOLOGY_TYPE::D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH">
    <summary>Interpret the input primitive as a control point patch.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS">
    <summary>
      <para>Describes Direct3D 12 feature options in the current graphics driver.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_feature_data_d3d12_options" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS::DoublePrecisionFloatShaderOps">
    <summary>Specifies whether <b>double</b> types are allowed for shader operations.
              If <b>TRUE</b>, double types are allowed; otherwise <b>FALSE</b>.
              The supported operations are equivalent to Direct3D 11's <b>ExtendedDoublesShaderInstructions</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options">D3D11_FEATURE_DATA_D3D11_OPTIONS</a> structure.
            

To use any HLSL shader that is compiled with a <b>double</b> type,
              the runtime must set <b>DoublePrecisionFloatShaderOps</b> to <b>TRUE</b>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS::OutputMergerLogicOp">
    <summary>Specifies whether logic operations are available in blend state. The runtime sets this member to <b>TRUE</b> if logic operations are available in blend state and <b>FALSE</b> otherwise. This member is <b>FALSE</b> for feature level 9.1, 9.2, and 9.3.  This member is optional for feature level 10, 10.1, and 11.  This member is <b>TRUE</b> for feature level 11.1 and 12.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS::MinPrecisionSupport">
    <summary>A combination of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_shader_min_precision_support">D3D12_SHADER_MIN_PRECISION_SUPPORT</a>-typed values that are combined by using a bitwise OR operation. The resulting value specifies minimum precision levels that the driver supports for shader stages. A value of zero indicates that the driver supports only full 32-bit precision for all shader stages.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS::TiledResourcesTier">
    <summary>Specifies whether the hardware and driver support tiled resources. The runtime sets this member to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_tiled_resources_tier">D3D12_TILED_RESOURCES_TIER</a>-typed value that indicates if the hardware and driver support tiled resources and at what tier level.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS::ResourceBindingTier">
    <summary>Specifies the level at which the hardware and driver support resource binding. The runtime sets this member to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_binding_tier">D3D12_RESOURCE_BINDING_TIER</a>-typed value that indicates the tier level.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS::PSSpecifiedStencilRefSupported">
    <summary>Specifies whether pixel shader stencil ref is supported. If <b>TRUE</b>, it's supported; otherwise <b>FALSE</b>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS::TypedUAVLoadAdditionalFormats">
    <summary>Specifies whether the loading of additional formats for typed unordered-access views (UAVs) is supported.
            If <b>TRUE</b>, it's supported; otherwise <b>FALSE</b>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS::ROVsSupported">
    <summary>Specifies whether <a href="https://docs.microsoft.com/windows/desktop/direct3d12/directx-12-glossary">Rasterizer Order Views</a> (ROVs) are supported. If <b>TRUE</b>, they're supported; otherwise <b>FALSE</b>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS::ConservativeRasterizationTier">
    <summary>Specifies the level at which the hardware and driver support conservative rasterization. The runtime sets this member to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_conservative_rasterization_tier">D3D12_CONSERVATIVE_RASTERIZATION_TIER</a>-typed value that indicates the tier level.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS::MaxGPUVirtualAddressBitsPerResource">
    <summary>Don't use this field; instead, use the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_feature_data_gpu_virtual_address_support">D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT</a> query
            (a structure with a <b>MaxGPUVirtualAddressBitsPerResource</b> member), which is more accurate.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS::StandardSwizzle64KBSupported">
    <summary>TRUE if the hardware supports textures with the 64KB standard swizzle pattern.
            Support for this pattern enables zero-copy texture optimizations while providing near-equilateral locality for each dimension within the texture.
            For texture swizzle options and restrictions, see <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_texture_layout">D3D12_TEXTURE_LAYOUT</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS::CrossNodeSharingTier">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_cross_node_sharing_tier">D3D12_CROSS_NODE_SHARING_TIER</a> enumeration constant that specifies the level of sharing across nodes of an adapter that has multiple nodes,
            such as Tier 1 Emulated, Tier 1, or Tier 2.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS::CrossAdapterRowMajorTextureSupported">
    <summary>FALSE means the device only supports copy operations to and from cross-adapter row-major textures.
            TRUE means the device supports shader resource views, unordered access views, and render target views of cross-adapter row-major textures.
            "Cross-adapter" means between multiple adapters (even from different IHVs).</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS::VPAndRTArrayIndexFromAnyShaderFeedingRasterizerSupportedWithoutGSEmulation">
    <summary>Whether the viewport (VP) and Render Target (RT) array index from any shader feeding the rasterizer are supported without geometry shader emulation.
            Compare the <b>VPAndRTArrayIndexFromAnyShaderFeedingRasterizer</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options3">D3D11_FEATURE_DATA_D3D11_OPTIONS3</a> structure.
            In <a href="https://docs.microsoft.com/windows/desktop/api/d3d12shader/nf-d3d12shader-id3d12shaderreflection-getrequiresflags">ID3D12ShaderReflection::GetRequiresFlags</a>, see the #define D3D_SHADER_REQUIRES_VIEWPORT_AND_RT_ARRAY_INDEX_FROM_ANY_SHADER_FEEDING_RASTERIZER.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS::ResourceHeapTier">
    <summary>Specifies the level at which the hardware and driver require heap attribution related to resource type.
            The runtime sets this member to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_heap_tier">D3D12_RESOURCE_HEAP_TIER</a> enumeration constant.</summary>
  </comment>
  <comment id="D3D12_TEX2D_DSV">
    <summary>
      <para>Describes the subresource from a 2D texture that is accessible to a depth-stencil view.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_tex2d_dsv" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TEX2D_DSV::MipSlice">
    <summary>The index of the first mipmap level to use.</summary>
  </comment>
  <comment id="ID3D12Resource::Unmap">
    <summary>
      <para>Invalidates the CPU pointer to the specified subresource in the resource. Unmap also flushes the CPU cache, when necessary, so that GPU reads to this address reflect any modifications made by the CPU.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12resource-unmap" /></para>
      <param name="Subresource">Specifies the index of the subresource.</param>
      <param name="pWrittenRange">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_range">D3D12_RANGE</a> structure that describes the range of memory to unmap.

This indicates the region the CPU might have modified, and the coordinates are subresource-relative. A null pointer indicates the entire subresource might have been modified by the CPU. It is valid to specify the CPU didn't write any data by passing a range where <b>End</b> is less than or equal to <b>Begin</b>.</param>
    </summary>
  </comment>
  <comment id="D3D12_TEX2DMS_ARRAY_SRV">
    <summary>
      <para>Describes the subresources from an array of multi sampled 2D textures to use in a shader-resource view.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_tex2dms_array_srv" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TEX2DMS_ARRAY_SRV::FirstArraySlice">
    <summary>The index of the first texture to use in an array of textures.</summary>
  </comment>
  <comment id="D3D12_TEX2DMS_ARRAY_SRV::ArraySize">
    <summary>Number of textures to use.</summary>
  </comment>
  <comment id="D3D12_META_COMMAND_PARAMETER_FLAGS">
    <summary>
      <para>Defines constants that specify the flags for a parameter to a meta command. Values can be bitwise OR'd together.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_meta_command_parameter_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_META_COMMAND_PARAMETER_FLAGS::D3D12_META_COMMAND_PARAMETER_FLAG_INPUT">
    <summary>Specifies that the parameter is an input resource.</summary>
  </comment>
  <comment id="D3D12_META_COMMAND_PARAMETER_FLAGS::D3D12_META_COMMAND_PARAMETER_FLAG_OUTPUT">
    <summary>Specifies that the parameter is an output resource.</summary>
  </comment>
  <comment id="D3D12_DXIL_LIBRARY_DESC">
    <summary>
      <para>Describes a DXIL library state subobject that can be included in a state object.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_dxil_library_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DXIL_LIBRARY_DESC::DXILLibrary">
    <summary>The library to include in the state object.  Must have been compiled with library target 6.3 or higher.  It is fine to specify the same library multiple times either in the same state object / collection or across multiple, as long as the names exported each time don’t conflict in a given state object.</summary>
  </comment>
  <comment id="D3D12_DXIL_LIBRARY_DESC::NumExports">
    <summary>The size of <i>pExports</i> array.  If 0, everything gets exported from the library.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::SetComputeRootUnorderedAccessView">
    <summary>
      <para>Sets a CPU descriptor handle for the unordered-access-view resource in the compute root signature.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setcomputerootunorderedaccessview" /></para>
      <param name="RootParameterIndex">The slot number for binding.</param>
      <param name="BufferLocation">The GPU virtual address of the buffer.
            D3D12_GPU_VIRTUAL_ADDRESS is a typedef'd alias of UINT64.</param>
    </summary>
  </comment>
  <comment id="ID3D12ShaderReflectionType::GetMemberTypeByIndex">
    <summary>
      <para>Gets a shader-reflection-variable type by index.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflectiontype-getmembertypebyindex" /></para>
      <param name="Index">Zero-based index.</param>
    </summary>
  </comment>
  <comment id="D3D12_QUERY_HEAP_DESC">
    <summary>
      <para>Describes the purpose of a query heap. A query heap contains an array of individual queries.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_query_heap_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_QUERY_HEAP_DESC::Type">
    <summary>Specifies one member of <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_query_heap_type">D3D12_QUERY_HEAP_TYPE</a>.</summary>
  </comment>
  <comment id="D3D12_QUERY_HEAP_DESC::Count">
    <summary>Specifies the number of queries the heap should contain.</summary>
  </comment>
  <comment id="D3D12_QUERY_HEAP_DESC::NodeMask">
    <summary>For single GPU operation, set this to zero. If there are multiple GPU nodes, set a bit to identify the node (the  device's physical adapter) to which the query heap applies.
            Each bit in the mask corresponds to a single node.
            Only 1 bit must be set.
          Refer to <a href="https://docs.microsoft.com/windows/win32/direct3d12/multi-engine">Multi-adapter systems</a>.</summary>
  </comment>
  <comment id="ID3D12Device5::CheckDriverMatchingIdentifier">
    <summary>
      <para>Reports the compatibility of serialized data, such as a serialized raytracing acceleration structure resulting from a call to CopyRaytracingAccelerationStructure with mode D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_SERIALIZE, with the current device/driver.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device5-checkdrivermatchingidentifier" /></para>
      <param name="SerializedDataType">The type of the serialized data. For more information, see <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_serialized_data_type">D3D12_SERIALIZED_DATA_TYPE</a>.</param>
      <param name="pIdentifierToCheck">Identifier from the header of the serialized data to check with the driver. For more information, see <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_serialized_data_driver_matching_identifier">D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER</a>.</param>
    </summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList4::SetPipelineState1">
    <summary>
      <para>Sets a state object on the command list.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist4-setpipelinestate1" /></para>
      <param name="pStateObject">The state object to set on the command list. In the current release, this can only be of type <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_state_object_type">D3D12_STATE_OBJECT_TYPE_RAYTRACING_PIPELINE</a>.</param>
    </summary>
  </comment>
  <comment id="D3D12_RESOURCE_BARRIER_FLAGS">
    <summary>
      <para>Flags for setting split resource barriers.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_resource_barrier_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RESOURCE_BARRIER_FLAGS::D3D12_RESOURCE_BARRIER_FLAG_NONE">
    <summary>No flags.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_BARRIER_FLAGS::D3D12_RESOURCE_BARRIER_FLAG_BEGIN_ONLY">
    <summary>This starts a barrier transition in a new state, putting a resource in a temporary no-access condition.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_BARRIER_FLAGS::D3D12_RESOURCE_BARRIER_FLAG_END_ONLY">
    <summary>This barrier completes a transition, setting a new state and restoring active access to a resource.</summary>
  </comment>
  <comment id="ID3D12LibraryReflection::GetDesc">
    <summary>
      <para>Fills the library descriptor structure for the library reflection.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12libraryreflection-getdesc" /></para>
      <param name="pDesc">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12shader/ns-d3d12shader-d3d12_library_desc">D3D12_LIBRARY_DESC</a> structure that receives a description of the library reflection.</param>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES">
    <summary>
      <para>Provides data for calls to ID3D12VideoDevice::CheckFeatureSupport when the feature specified is D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES. Retrieves the protected resources support for video motion estimation.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_feature_data_video_motion_estimator_protected_resources" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES::NodeIndex">
    <summary>In multi-adapter operation, identifies the physical adapter of the device this operation applies to.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES::SupportFlags">
    <summary>A member of the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_protected_resource_support_flags.md">D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS</a> enumeration specifying support for protected resources.</summary>
  </comment>
  <comment id="ID3D12InfoQueue::PushCopyOfRetrievalFilter">
    <summary>
      <para>Push a copy of retrieval filter currently on the top of the retrieval-filter stack onto the retrieval-filter stack.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-pushcopyofretrievalfilter" /></para>
    </summary>
  </comment>
  <comment id="D3D12_SHADER_RESOURCE_VIEW_DESC">
    <summary>
      <para>Describes a shader-resource view.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_shader_resource_view_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_SHADER_RESOURCE_VIEW_DESC::Format">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>-typed value that specifies the viewing format. See remarks.</summary>
  </comment>
  <comment id="D3D12_SHADER_RESOURCE_VIEW_DESC::ViewDimension">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_srv_dimension">D3D12_SRV_DIMENSION</a>-typed value that specifies the resource type of the view. This type is the same as the resource type of the underlying resource. This member also determines which _SRV to use in the union below.</summary>
  </comment>
  <comment id="D3D12_SHADER_RESOURCE_VIEW_DESC::Shader4ComponentMapping">
    <summary>A value, constructed using the <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_shader_component_mapping">D3D12_ENCODE_SHADER_4_COMPONENT_MAPPING</a> macro. The <b>D3D12_SHADER_COMPONENT_MAPPING</b> enumeration specifies what values from memory should be returned when the texture is accessed in a shader via this shader resource view (SRV). For example, it can route component 1 (green) from memory, or the constant <c>0</c>, into component 2 (<c>.b</c>) of the value given to the shader.</summary>
  </comment>
  <comment id="D3D12_SHADER_RESOURCE_VIEW_DESC::Buffer">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_buffer_srv">D3D12_BUFFER_SRV</a> structure that views the resource as a buffer.</summary>
  </comment>
  <comment id="D3D12_SHADER_RESOURCE_VIEW_DESC::Texture1D">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tex1d_srv">D3D12_TEX1D_SRV</a> structure that views the resource as a 1D texture.</summary>
  </comment>
  <comment id="D3D12_SHADER_RESOURCE_VIEW_DESC::Texture1DArray">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tex1d_array_srv">D3D12_TEX1D_ARRAY_SRV</a> structure that views the resource as a 1D-texture array.</summary>
  </comment>
  <comment id="D3D12_SHADER_RESOURCE_VIEW_DESC::Texture2D">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tex2d_srv">D3D12_TEX2D_SRV</a> structure that views the resource as a 2D-texture.</summary>
  </comment>
  <comment id="D3D12_SHADER_RESOURCE_VIEW_DESC::Texture2DArray">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tex2d_array_srv">D3D12_TEX2D_ARRAY_SRV</a> structure that views the resource as a 2D-texture array.</summary>
  </comment>
  <comment id="D3D12_SHADER_RESOURCE_VIEW_DESC::Texture2DMS">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tex2dms_srv">D3D12_TEX2DMS_SRV</a> structure that views the resource as a 2D-multisampled texture.</summary>
  </comment>
  <comment id="D3D12_SHADER_RESOURCE_VIEW_DESC::Texture2DMSArray">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tex2dms_array_srv">D3D12_TEX2DMS_ARRAY_SRV</a> structure that views the resource as a 2D-multisampled-texture array.</summary>
  </comment>
  <comment id="D3D12_SHADER_RESOURCE_VIEW_DESC::Texture3D">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tex3d_srv">D3D12_TEX3D_SRV</a> structure that views the resource as a 3D texture.</summary>
  </comment>
  <comment id="D3D12_SHADER_RESOURCE_VIEW_DESC::TextureCube">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_texcube_srv">D3D12_TEXCUBE_SRV</a> structure that views the resource as a 3D-cube texture.</summary>
  </comment>
  <comment id="D3D12_SHADER_RESOURCE_VIEW_DESC::TextureCubeArray">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_texcube_array_srv">D3D12_TEXCUBE_ARRAY_SRV</a> structure that views the resource as a 3D-cube-texture array.</summary>
  </comment>
  <comment id="D3D12_SHADER_RESOURCE_VIEW_DESC::RaytracingAccelerationStructure">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_raytracing_acceleration_structure_srv">D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV</a> structure that views the resource as a raytracing acceleration structure.</summary>
  </comment>
  <comment id="ID3D12QueryHeap">
    <summary>
      <para>Manages a query heap. A query heap holds an array of queries, referenced by indexes.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12queryheap" /></para>
    </summary>
  </comment>
  <comment id="ID3D12DebugCommandList1::GetDebugParameter">
    <summary>
      <para>Gets optional Command List Debug Layer settings.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12debugcommandlist1-getdebugparameter" /></para>
      <param name="Type">Specifies a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ne-d3d12sdklayers-d3d12_debug_command_list_parameter_type">D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE</a> value that determines which debug parameter data to copy to the memory pointed to by <i>pData</i>.</param>
      <param name="pData">Points to the memory that will be filled with a copy of the debug parameter data. The interpretation of this data depends on the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ne-d3d12sdklayers-d3d12_debug_command_list_parameter_type">D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE</a> given in the <i>Type</i> parameter.</param>
      <param name="DataSize">Size in bytes of the memory buffer pointed to by <i>pData</i>.</param>
    </summary>
  </comment>
  <comment id="ID3D12Device::CreateUnorderedAccessView">
    <summary>
      <para>Creates a view for unordered accessing.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createunorderedaccessview" /></para>
      <param name="pResource">A pointer to the <a href="https://docs.microsoft.com/windows/win32/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a> object that represents the unordered access.
          
At least one of <i>pResource</i> or <i>pDesc</i> must be provided.

A null <i>pResource</i> is used to initialize a null descriptor, which guarantees Direct3D 11-like null binding behavior (reading 0s, writes are discarded), but must have a valid <i>pDesc</i> in order to determine the descriptor type.</param>
      <param name="pCounterResource">The <a href="https://docs.microsoft.com/windows/win32/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a> for the counter (if any) associated with the UAV.

If <i>pCounterResource</i> is not specified, then the <b>CounterOffsetInBytes</b> member of the <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_buffer_uav">D3D12_BUFFER_UAV</a> structure must be 0.

If <i>pCounterResource</i> is specified, then there is a counter associated with the UAV, and the runtime performs validation of the following requirements:

<ul>
<li>The <b>StructureByteStride</b> member of the <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_buffer_uav">D3D12_BUFFER_UAV</a> structure must be greater than 0.
              </li>
<li>The format must be DXGI_FORMAT_UNKNOWN.
              </li>
<li>The D3D12_BUFFER_UAV_FLAG_RAW flag (a <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_buffer_uav_flags">D3D12_BUFFER_UAV_FLAGS</a> enumeration constant) must not be set.
              </li>
<li>Both of the resources (<i>pResource</i> and <i>pCounterResource</i>) must be buffers.
              </li>
<li>The <b>CounterOffsetInBytes</b> member of the <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_buffer_uav">D3D12_BUFFER_UAV</a> structure must be a multiple of <b>D3D12_UAV_COUNTER_PLACEMENT_ALIGNMENT</b> (4096), and must be within the range of the counter resource.
              </li>
<li><i>pResource</i> cannot be NULL
              </li>
<li><i>pDesc</i> cannot be NULL.
              </li>
</ul></param>
      <param name="pDesc">A pointer to a <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_unordered_access_view_desc">D3D12_UNORDERED_ACCESS_VIEW_DESC</a> structure that describes the unordered-access view.
          
A null <i>pDesc</i> is used to initialize a default descriptor, if possible. This behavior is identical to the D3D11 null descriptor behavior, where defaults are filled in. This behavior inherits the resource format and dimension (if not typeless) and for buffers UAVs target a full buffer and are typed, and for textures UAVs target the first mip and all array slices. Not all resources support null descriptor initialization.</param>
      <param name="DestDescriptor">Describes the CPU descriptor handle that represents the start of the heap that holds the unordered-access view.</param>
    </summary>
  </comment>
  <comment id="D3D12_QUERY_DATA_SO_STATISTICS">
    <summary>
      <para>Describes query data for stream output.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_query_data_so_statistics" /></para>
    </summary>
  </comment>
  <comment id="D3D12_QUERY_DATA_SO_STATISTICS::NumPrimitivesWritten">
    <summary>Specifies the number of primitives written.</summary>
  </comment>
  <comment id="D3D12_QUERY_DATA_SO_STATISTICS::PrimitivesStorageNeeded">
    <summary>Specifies the total amount of storage needed by the primitives.</summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_HEAP_TYPE">
    <summary>
      <para>Specifies a type of descriptor heap.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_descriptor_heap_type" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_HEAP_TYPE::D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV">
    <summary>The descriptor heap for the combination of constant-buffer, shader-resource, and unordered-access views.</summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_HEAP_TYPE::D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER">
    <summary>The descriptor heap for the sampler.</summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_HEAP_TYPE::D3D12_DESCRIPTOR_HEAP_TYPE_RTV">
    <summary>The descriptor heap for the render-target view.</summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_HEAP_TYPE::D3D12_DESCRIPTOR_HEAP_TYPE_DSV">
    <summary>The descriptor heap for the depth-stencil view.</summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_HEAP_TYPE::D3D12_DESCRIPTOR_HEAP_TYPE_NUM_TYPES">
    <summary>The number of types of descriptor heaps.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS5">
    <summary>
      <para>Indicates the level of support that the adapter provides for render passes, ray tracing, and shader-resource view tier 3 tiled resources.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_feature_data_d3d12_options5" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS5::SRVOnlyTiledResourceTier3">
    <summary>A boolean value indicating whether the options require shader-resource view tier 3 tiled resource support. For more information, see <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_tiled_resources_tier">D3D12_TILED_RESOURCES_TIER</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS5::RenderPassesTier">
    <summary>The extent to which a device driver and/or the hardware efficiently supports render passes. See <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_render_pass_tier">D3D12_RENDERPASS_TIER</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_VIDEO">
    <summary>
      <para>Specifies a Direct3D 12 video feature or feature set to query about.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ne-d3d12video-d3d12_feature_video" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_VIDEO::D3D12_FEATURE_VIDEO_DECODE_SUPPORT">
    <summary>Check if a decode profile, bitstream encryption, resolution, and format are supported.  The result is a <a href="ne-d3d12video-d3d12_video_decode_tier.md">D3D12_VIDEO_DECODE_TIER</a> indicating the level of support.  The associated data structure is <a href="ns-d3d12video-d3d12_feature_data_video_decode_support.md">D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_VIDEO::D3D12_FEATURE_VIDEO_DECODE_PROFILES">
    <summary>Retrieve the list of decode profiles supported by the adapter.  Call <b>CheckFeatureSupport</b> specifying the feature D3D12_FEATURE_VIDEO_DECODE_PROFILE_COUNT to get the number of profiles before calling <b>CheckFeatureSupport</b> for the D3D12_FEATURE_VIDEO_DECODE_PROFILES feature.  The associated data structure is <a href="ns-d3d12video-d3d12_feature_data_video_decode_profiles.md">D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_VIDEO::D3D12_FEATURE_VIDEO_DECODE_FORMATS">
    <summary>Retrieves the list of supported decode formats for a <a href="ns-d3d12video-d3d12_video_decode_configuration.md">D3D12_VIDEO_DECODE_CONFIGURATION</a>. Call <b>CheckFeatureSupport</b> specifying the feature D3D12_FEATURE_VIDEO_DECODE_FORMAT_COUNT to get the number of profiles before calling <b>CheckFeatureSupport</b> for the D3D12_FEATURE_VIDEO_DECODE_PROFILES feature.The associated data structure is <a href="ns-d3d12video-d3d12_feature_data_video_decode_formats.md">D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_VIDEO::D3D12_FEATURE_VIDEO_DECODE_CONVERSION_SUPPORT">
    <summary>Check if a colorspace conversion, format conversion, and scale are supported.  The associated data structure is <a href="ns-d3d12video-d3d12_feature_data_video_decode_conversion_support.md">D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_VIDEO::D3D12_FEATURE_VIDEO_PROCESS_SUPPORT">
    <summary>Retrieves the video processor capabilities.  The associated data structure is <a href="ns-d3d12video-d3d12_feature_data_video_process_support.md">D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_VIDEO::D3D12_FEATURE_VIDEO_PROCESS_MAX_INPUT_STREAMS">
    <summary>Retrieves the maximum number of streams that can be enabled at the same time.  The associated data structure is <a href="ns-d3d12video-d3d12_feature_data_video_process_max_input_streams.md">D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_VIDEO::D3D12_FEATURE_VIDEO_PROCESS_REFERENCE_INFO">
    <summary>Retrieves the number of past and future frames required for a given deinterlace mode, filters, frame rate conversion, and features.  The associated data structure is <a href="ns-d3d12video-d3d12_feature_data_video_process_reference_info.md">D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_VIDEO::D3D12_FEATURE_VIDEO_DECODER_HEAP_SIZE">
    <summary>Checks the allocation size of a video decoder heap. The associated data structure is <a href="ns-d3d12video-d3d12_feature_data_video_decoder_heap_size.md">D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE</a>. For information on residency budgeting for heaps, see <a href="https://docs.microsoft.com/windows/win32/direct3d12/residency">Residency</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_VIDEO::D3D12_FEATURE_VIDEO_PROCESSOR_SIZE">
    <summary>Checks the allocation size of a video processor heap. The associated data structure is <a href="ns-d3d12video-d3d12_feature_data_video_processor_size.md">D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE</a>. For information on residency budgeting for heaps, see <a href="https://docs.microsoft.com/windows/win32/direct3d12/residency">Residency</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_VIDEO::D3D12_FEATURE_VIDEO_DECODE_PROFILE_COUNT">
    <summary>Retrieves the number of supported decoder profiles. The returned count is used when querying for <b>D3D12_FEATURE_VIDEO_DECODE_PROFILES</b>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_VIDEO::D3D12_FEATURE_VIDEO_DECODE_FORMAT_COUNT">
    <summary>Retrieves the number of supported decoder profiles. The returned count is used when querying for <b>D3D12_FEATURE_VIDEO_DECODE_FORMATS</b>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_VIDEO::D3D12_FEATURE_VIDEO_ARCHITECTURE">
    <summary>Indicates if the video engine is IO coherent with the CPU.</summary>
  </comment>
  <comment id="D3D12_FEATURE_VIDEO::D3D12_FEATURE_VIDEO_DECODE_HISTOGRAM">
    <summary>Retrieves the supported components, bin count, and counter bit depth for the a decode histogram with the specified decode profile, resolution, and format. The associated data structure is <a href="ns-d3d12video-d3d12_feature_data_video_decode_histogram.md">D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_VIDEO::D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR">
    <summary>Retrieves the supported resolutions, search block sizes, and precision for motion estimation. The associated data structure is <a href="https://docs.microsoft.comns-d3d12video-d3d12_feature_data_video_motion_estimator.md">D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_VIDEO::D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR_SIZE">
    <summary>Checks the allocation size of a motion estimator heap. The associated data structure is <a href="https://docs.microsoft.comns-d3d12video-d3d12_feature_data_video_motion_estimator_size.md">D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_VIDEO::D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_COUNT">
    <summary>Retrieves the supported number of video extension commands.  The associated data structure is <a href="https://docs.microsoft.comns-d3d12video-d3d12_feature_data_video_extension_command_count.md">D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_VIDEO::D3D12_FEATURE_VIDEO_EXTENSION_COMMANDS">
    <summary>Retrieves a list of <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_extension_command_info.md">D3D12_VIDEO_EXTENSION_COMMAND_INFO</a> structures describing video extension commands. The associated data structure is <a href="https://docs.microsoft.comns-d3d12video-d3d12_feature_data_video_extension_command_count.md">D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_VIDEO::D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT">
    <summary>Retrieves the parameter count for the specified parameter stage. The associated data structure is <a href="https://docs.microsoft.comns-d3d12video-d3d12_feature_data_video_extension_command_parameter_count.md">D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_VIDEO::D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_PARAMETERS">
    <summary>Retrieves a list of <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_extension_command_parameter_info.md">D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO</a> structures describing video extension command parameters for the specified parameter stage. The associated data structure is <a href="https://docs.microsoft.comns-d3d12video-d3d12_feature_data_video_extension_command_parameters.md">D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_VIDEO::D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_SUPPORT">
    <summary>Queries for command-defined support information. The associated data structure is <a href="https://docs.microsoft.comns-d3d12video-d3d12_feature_data_video_extension_command_support.md">D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_VIDEO::D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_SIZE">
    <summary>Checks the allocation size of a video extension command. The associated data structure is <a href="https://docs.microsoft.comns-d3d12video-d3d12_feature_data_video_extension_command_size.md">D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_VIDEO::D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES">
    <summary>Checks support for motion estimation with protected resources. The associated data structure is <a href="https://docs.microsoft.comns-d3d12video-d3d12_feature_data_video_motion_estimator_protected_resources.md">D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_PROTECTED_RESOURCES</a>.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM">
    <summary>
      <para>Represents the histogram output buffer for a single component.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_video_decode_output_histogram" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM::Offset">
    <summary>The offset location in <i>pBuffer</i> to write the component histogram.  Must be 256-byte aligned.  Set to zero when a component is disabled.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM::pBuffer">
    <summary>And <a href="https://docs.microsoft.com../d3d12/nn-d3d12-id3d12resource.md">ID3D12Resource</a> representing the target buffer for hardware to write the components histogram.  Set to a nullptr when the component histogram is disabled.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_OUTPUT_STREAM">
    <summary>
      <para>Represents the output stream for video processing commands.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_video_process_output_stream" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_OUTPUT_STREAM::pTexture2D">
    <summary>A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a> representing the output surfaces for the video process command.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_OUTPUT_STREAM::Subresource">
    <summary>The subresource indices to use within the resource specified <i>pTexture2D</i> resource.</summary>
  </comment>
  <comment id="ID3D12InfoQueue::PopRetrievalFilter">
    <summary>
      <para>Pop a retrieval filter from the top of the retrieval-filter stack.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-popretrievalfilter" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RAYTRACING_PIPELINE_CONFIG">
    <summary>
      <para>A state subobject that represents a raytracing pipeline configuration.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_raytracing_pipeline_config" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RAYTRACING_PIPELINE_CONFIG::MaxTraceRecursionDepth">
    <summary>Limit on ray recursion for the raytracing pipeline. It must be in the range of 0 to 31. Below the maximum recursion depth, shader invocations such as closest hit or miss shaders can call <b>TraceRay</b> any number of times.  At the maximum recursion depth, <b>TraceRay</b> calls result in the device going into removed state.</summary>
  </comment>
  <comment id="D3D12_SHADER_BYTECODE">
    <summary>
      <para>Describes shader data.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_shader_bytecode" /></para>
    </summary>
  </comment>
  <comment id="D3D12_SHADER_BYTECODE::pShaderBytecode">
    <summary>A pointer to a memory block that contains the shader data.</summary>
  </comment>
  <comment id="D3D12_SHADER_BYTECODE::BytecodeLength">
    <summary>The size, in bytes, of the shader data that the <b>pShaderBytecode</b> member points to.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::IASetVertexBuffers">
    <summary>
      <para>Sets a CPU descriptor handle for the vertex buffers.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-iasetvertexbuffers" /></para>
      <param name="StartSlot">Index into the device's zero-based array to begin setting vertex buffers.</param>
      <param name="NumViews">The number of views in the <i>pViews</i> array.</param>
      <param name="pViews">Specifies the vertex buffer views in an array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_vertex_buffer_view">D3D12_VERTEX_BUFFER_VIEW</a> structures.</param>
    </summary>
  </comment>
  <comment id="D3D12_SHADER_CACHE_SUPPORT_FLAGS">
    <summary>
      <para>Describes the level of support for shader caching in the current graphics driver.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_shader_cache_support_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_SHADER_CACHE_SUPPORT_FLAGS::D3D12_SHADER_CACHE_SUPPORT_NONE">
    <summary>Indicates that the driver does not support shader caching.</summary>
  </comment>
  <comment id="D3D12_SHADER_CACHE_SUPPORT_FLAGS::D3D12_SHADER_CACHE_SUPPORT_SINGLE_PSO">
    <summary>Indicates that the driver supports the CachedPSO member of the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_graphics_pipeline_state_desc">D3D12_GRAPHICS_PIPELINE_STATE_DESC</a> and <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_compute_pipeline_state_desc">D3D12_COMPUTE_PIPELINE_STATE_DESC</a> structures. This is always supported.</summary>
  </comment>
  <comment id="D3D12_SHADER_CACHE_SUPPORT_FLAGS::D3D12_SHADER_CACHE_SUPPORT_LIBRARY">
    <summary>Indicates that the driver supports the ID3D12PipelineLibrary interface, which provides application-controlled PSO grouping and caching. This is supported by drivers targetting the Windows 10 Anniversary Update.</summary>
  </comment>
  <comment id="D3D12_SHADER_CACHE_SUPPORT_FLAGS::D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_INPROC_CACHE">
    <summary>Indicates that the driver supports an OS-managed shader cache that stores compiled shaders in memory during the current run of the application.</summary>
  </comment>
  <comment id="D3D12_SHADER_CACHE_SUPPORT_FLAGS::D3D12_SHADER_CACHE_SUPPORT_AUTOMATIC_DISK_CACHE">
    <summary>Indicates that the driver supports an OS-managed shader cache that stores compiled shaders on disk to accelerate future runs of the application.</summary>
  </comment>
  <comment id="D3D12_BOX">
    <summary>
      <para>Describes a 3D box.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_box" /></para>
    </summary>
  </comment>
  <comment id="D3D12_BOX::left">
    <summary>The x position of the left hand side of the box.</summary>
  </comment>
  <comment id="D3D12_BOX::top">
    <summary>The y position of the top of the box.</summary>
  </comment>
  <comment id="D3D12_BOX::front">
    <summary>The z position of the front of the box.</summary>
  </comment>
  <comment id="D3D12_BOX::right">
    <summary>The x position of the right hand side of the box, plus 1. This means that <c>right - left</c> equals the width of the box.</summary>
  </comment>
  <comment id="D3D12_BOX::bottom">
    <summary>The y position of the bottom of the box, plus 1. This means that <c>bottom - top</c> equals the height of the box.</summary>
  </comment>
  <comment id="D3D12_BOX::back">
    <summary>The z position of the back of the box, plus 1. This means that <c>back - front</c> equals the depth of the box.</summary>
  </comment>
  <comment id="D3D12_TEX2D_ARRAY_RTV">
    <summary>
      <para>Describes the subresources from an array of 2D textures to use in a render-target view.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_tex2d_array_rtv" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TEX2D_ARRAY_RTV::MipSlice">
    <summary>The index of the mipmap level to use mip slice.</summary>
  </comment>
  <comment id="D3D12_TEX2D_ARRAY_RTV::FirstArraySlice">
    <summary>The index of the first texture to use in an array of textures.</summary>
  </comment>
  <comment id="D3D12_TEX2D_ARRAY_RTV::ArraySize">
    <summary>Number of textures in the array to use in the render target view, starting from <b>FirstArraySlice</b>.</summary>
  </comment>
  <comment id="D3D12_TEX2D_ARRAY_RTV::PlaneSlice">
    <summary>The index (plane slice number) of the plane to use in an array of textures.</summary>
  </comment>
  <comment id="D3D12_LOCAL_ROOT_SIGNATURE">
    <summary>
      <para>Defines a local root signature state subobject that will be used with associated shaders.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_local_root_signature" /></para>
    </summary>
  </comment>
  <comment id="D3D12_LOCAL_ROOT_SIGNATURE::pLocalRootSignature">
    <summary>The root signature that will function as a local root signature.  A state object holds a reference to this signature.</summary>
  </comment>
  <comment id="ID3D12InfoQueue::GetMessageCountLimit">
    <summary>
      <para>Get the maximum number of messages that can be added to the message queue.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getmessagecountlimit" /></para>
    </summary>
  </comment>
  <comment id="ID3D12FunctionReflection">
    <summary>
      <para>A function-reflection interface accesses function info.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nn-d3d12shader-id3d12functionreflection" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE">
    <summary>
      <para>Indicates the debug parameter type used by ID3D12DebugCommandList1::SetDebugParameter and ID3D12DebugCommandList1::GetDebugParameter.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/ne-d3d12sdklayers-d3d12_debug_command_list_parameter_type" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE::D3D12_DEBUG_COMMAND_LIST_PARAMETER_GPU_BASED_VALIDATION_SETTINGS">
    <summary>Indicates the parameter is type <a href="https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ns-d3d12sdklayers-d3d12_debug_command_list_gpu_based_validation_settings">D3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS</a>.</summary>
  </comment>
  <comment id="D3D12_TEX2DMS_SRV">
    <summary>
      <para>Describes the subresources from a multi sampled 2D texture to use in a shader-resource view.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_tex2dms_srv" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TEX2DMS_SRV::UnusedField_NothingToDefine">
    <summary>Integer of any value. See remarks.</summary>
  </comment>
  <comment id="ID3D12Resource::GetGPUVirtualAddress">
    <summary>
      <para>This method returns the GPU virtual address of a buffer resource.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12resource-getgpuvirtualaddress" /></para>
    </summary>
  </comment>
  <comment id="D3D12_SHADER_VARIABLE_DESC">
    <summary>
      <para>Describes a shader variable.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/ns-d3d12shader-d3d12_shader_variable_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_SHADER_VARIABLE_DESC::Name">
    <summary>The variable name.</summary>
  </comment>
  <comment id="D3D12_SHADER_VARIABLE_DESC::StartOffset">
    <summary>Offset from the start of the parent structure to the beginning of the variable.</summary>
  </comment>
  <comment id="D3D12_SHADER_VARIABLE_DESC::Size">
    <summary>Size of the variable (in bytes).</summary>
  </comment>
  <comment id="D3D12_SHADER_VARIABLE_DESC::uFlags">
    <summary>A combination of <a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_shader_variable_flags">D3D_SHADER_VARIABLE_FLAGS</a>-typed values that are combined by using a bitwise-OR operation. 
            The resulting value identifies shader-variable properties.</summary>
  </comment>
  <comment id="D3D12_SHADER_VARIABLE_DESC::DefaultValue">
    <summary>The default value for initializing the variable.
            Emits default values for reflection.</summary>
  </comment>
  <comment id="D3D12_SHADER_VARIABLE_DESC::StartTexture">
    <summary>Offset from the start of the variable to the beginning of the texture.</summary>
  </comment>
  <comment id="D3D12_SHADER_VARIABLE_DESC::TextureSize">
    <summary>The size of the texture, in bytes.</summary>
  </comment>
  <comment id="D3D12_SHADER_VARIABLE_DESC::StartSampler">
    <summary>Offset from the start of the variable to the beginning of the sampler.</summary>
  </comment>
  <comment id="D3D12_SHADER_VARIABLE_DESC::SamplerSize">
    <summary>The size of the sampler, in bytes.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT">
    <summary>
      <para>Specifies indices for arrays of per component histogram information.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ne-d3d12video-d3d12_video_decode_histogram_component" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT::D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_Y">
    <summary>If the format is a YUV format, indicates a histogram for the Y component.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT::D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_U">
    <summary>If the format is a YUV format, indicates a histogram for the U component.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT::D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_V">
    <summary>If the format is a YUV format, indicates a histogram for the V component.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT::D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_R">
    <summary>If the format is an RGB/BGR format, indicates a histogram for the R component.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT::D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_G">
    <summary>If the format is an RGB/BGR format, indicates a histogram for the G component.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT::D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_B">
    <summary>If the format is an RGB/BGR format, indicates a histogram for the B component.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT::D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_A">
    <summary>If the format has an alpha channel, indicates a histogram for the A component.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::RSSetViewports">
    <summary>
      <para>Bind an array of viewports to the rasterizer stage of the pipeline.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-rssetviewports" /></para>
      <param name="NumViewports">Number of viewports to bind.
            The range of valid values is (0, D3D12_VIEWPORT_AND_SCISSORRECT_OBJECT_COUNT_PER_PIPELINE).</param>
      <param name="pViewports">An array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_viewport">D3D12_VIEWPORT</a> structures to bind to the device.</param>
    </summary>
  </comment>
  <comment id="D3D12_RAY_FLAGS">
    <summary>
      <para>Flags passed to the TraceRay function to override transparency, culling, and early-out behavior.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_ray_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RAY_FLAGS::D3D12_RAY_FLAG_NONE">
    <summary>No options selected.</summary>
  </comment>
  <comment id="D3D12_RAY_FLAGS::D3D12_RAY_FLAG_FORCE_OPAQUE">
    <summary>All ray-primitive intersections encountered in a raytrace are treated as opaque. So no any hit shaders will be executed regardless of whether or not the hit geometry specifies D3D12_RAYTRACING_GEOMETRY_FLAG_OPAQUE, and regardless of the instance flags on the instance that was hit.

This flag is mutually exclusive with RAY_FLAG_FORCE_NON_OPAQUE, RAY_FLAG_CULL_OPAQUE and RAY_FLAG_CULL_NON_OPAQUE.</summary>
  </comment>
  <comment id="D3D12_RAY_FLAGS::D3D12_RAY_FLAG_FORCE_NON_OPAQUE">
    <summary>All ray-primitive intersections encountered in a raytrace are treated as non-opaque. So any hit shaders, if present, will be executed regardless of whether or not the hit geometry specifies D3D12_RAYTRACING_GEOMETRY_FLAG_OPAQUE, and regardless of the instance flags on the instance that was hit. This flag is mutually exclusive with RAY_FLAG_FORCE_\OPAQUE, RAY_FLAG_CULL_OPAQUE and RAY_FLAG_CULL_NON_OPAQUE.</summary>
  </comment>
  <comment id="D3D12_RAY_FLAGS::D3D12_RAY_FLAG_ACCEPT_FIRST_HIT_AND_END_SEARCH">
    <summary>The first ray-primitive intersection encountered in a raytrace automatically causes <a href="https://docs.microsoft.com/windows/desktop/direct3d12/accepthitandendsearch-function">AcceptHitAndEndSearch</a> to be called immediately after the any hit shader, including if there is no any hit shader.

The only exception is when the preceding any hit shader calls <a href="https://docs.microsoft.com/windows/desktop/direct3d12/ignorehit-function">IgnoreHit</a>, in which case the ray continues unaffected such that the next hit becomes another candidate to be the first hit. For this exception to apply, the any hit shader has to actually be executed. So if the any hit shader is skipped because the hit is treated as opaque (e.g. due to RAY_FLAG_FORCE_OPAQUE or D3D12_RAYTRACING_GEOMETRY_FLAG_OPAQUE or D3D12_RAYTRACING_INSTANCE_FLAG_OPAQUE being set), then <b>AcceptHitAndEndSearch</b> is called.

If a closest hit shader is present at the first hit, it gets invoked unless RAY_FLAG_SKIP_CLOSEST_HIT_SHADER is also present. The one hit that was found is considered “closest”, even though other potential hits that might be closer on the ray may not have been visited.

A typical use for this flag is for shadows, where only a single hit needs to be found.</summary>
  </comment>
  <comment id="D3D12_RAY_FLAGS::D3D12_RAY_FLAG_SKIP_CLOSEST_HIT_SHADER">
    <summary>Even if at least one hit has been committed, and the hit group for the closest hit contains a closest hit shader, skip execution of that shader.</summary>
  </comment>
  <comment id="D3D12_RAY_FLAGS::D3D12_RAY_FLAG_CULL_BACK_FACING_TRIANGLES">
    <summary>Enables culling of back facing triangles. See <a href="https://msdn.microsoft.com/en-us/library/Mt815589(v=VS.85).aspx">D3D12_RAYTRACING_INSTANCE_FLAGS</a> for selecting which triangles are back facing, per-instance.

On instances that specify D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_CULL_DISABLE, this flag has no effect.

On geometry types other than D3D12_RAYTRACING_GEOMETRY_TYPE_TRIANGLES, this flag has no effect.

This flag is mutually exclusive with RAY_FLAG_CULL_FRONT_FACING_TRIANGLES.</summary>
  </comment>
  <comment id="D3D12_RAY_FLAGS::D3D12_RAY_FLAG_CULL_FRONT_FACING_TRIANGLES">
    <summary>Enables culling of front facing triangles. See <a href="https://msdn.microsoft.com/en-us/library/Mt815589(v=VS.85).aspx">D3D12_RAYTRACING_INSTANCE_FLAGS</a> for selecting which triangles are back facing, per-instance.

On instances that specify D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_CULL_DISABLE, this flag has no effect.

On geometry types other than D3D12_RAYTRACING_GEOMETRY_TYPE_TRIANGLES, this flag has no effect.

This flag is mutually exclusive with RAY_FLAG_CULL_FRONT_FACING_TRIANGLES.</summary>
  </comment>
  <comment id="D3D12_RAY_FLAGS::D3D12_RAY_FLAG_CULL_OPAQUE">
    <summary>Culls all primitives that are considered opaque based on their geometry and instance flags.

This flag is mutually exclusive with RAY_FLAG_FORCE_OPAQUE, RAY_FLAG_FORCE_NON_OPAQUE, and RAY_FLAG_CULL_NON_OPAQUE.</summary>
  </comment>
  <comment id="D3D12_RAY_FLAGS::D3D12_RAY_FLAG_CULL_NON_OPAQUE">
    <summary>Culls all primitives that are considered non-opaque based on their geometry and instance flags.

This flag is mutually exclusive with RAY_FLAG_FORCE_OPAQUE, RAY_FLAG_FORCE_NON_OPAQUE, and RAY_FLAG_CULL_OPAQUE.</summary>
  </comment>
  <comment id="ID3D12Device4">
    <summary>
      <para>Represents a virtual adapter. This interface extends <a href="https://docs.microsoft.com../d3d12/nn-d3d12-id3d12device3.md">ID3D12Device3</a>.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12device4" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE">
    <summary>
      <para>Describes the allocation size of a video motion estimator heap.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_feature_data_video_motion_estimator_size" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE::NodeIndex">
    <summary>In multi-adapter operation, identifies the physical adapter of the device this operation applies to.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE::InputFormat">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a> structure specifying the format of the input and reference resources.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE::BlockSize">
    <summary>A value from the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_motion_estimator_search_block_size.md">D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE</a> specifying the search block size for motion estimation.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE::Precision">
    <summary>A value from the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_motion_estimator_vector_precision.md">D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION</a> specifying the search block size for motion estimation.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE::SizeRange">
    <summary>A <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_size_range.md">D3D12_VIDEO_SIZE_RANGE</a> structure representing the minimum and maximum input and reference frame size, in pixels, used by the motion estimator.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE::Protected">
    <summary>TRUE if the motion estimator operates on protected resource input and produces protected output; otherwise, FALSE.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE::MotionVectorHeapMemoryPoolL0Size">
    <summary>The allocation size of the motion vector heap in the L0 memory pool. L0 is the physical system memory pool. When the adapter is discrete/NUMA, this pool has greater bandwidth for the CPU and less bandwidth for the GPU. When the adapter is UMA, this pool is the only one which is valid. For more information, see <a href="https://docs.microsoft.com/windows/win32/direct3d12/residency">Residency</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE::MotionVectorHeapMemoryPoolL1Size">
    <summary>The allocation size of the motion vector heap in the L1 memory pool. L1 is typically known as the physical video memory pool. L1 is only available when the adapter is discrete/NUMA, and has greater bandwidth for the GPU and cannot even be accessed by the CPU. When the adapter is UMA, this pool is not available. For more information, see <a href="https://docs.microsoft.com/windows/win32/direct3d12/residency">Residency</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE::MotionEstimatorMemoryPoolL0Size">
    <summary>The allocation size of the motion estimator heap in the L0 memory pool. L0 is the physical system memory pool. When the adapter is discrete/NUMA, this pool has greater bandwidth for the CPU and less bandwidth for the GPU. When the adapter is UMA, this pool is the only one which is valid. For more information, see <a href="https://docs.microsoft.com/windows/win32/direct3d12/residency">Residency</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR_SIZE::MotionEstimatorMemoryPoolL1Size">
    <summary>The allocation size of the motion estimator heap in the L1 memory pool. L1 is typically known as the physical video memory pool. L1 is only available when the adapter is discrete/NUMA, and has greater bandwidth for the GPU and cannot even be accessed by the CPU. When the adapter is UMA, this pool is not available. For more information, see <a href="https://docs.microsoft.com/windows/win32/direct3d12/residency">Residency</a>.</summary>
  </comment>
  <comment id="D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS">
    <summary>
      <para>Specifies the usage of the associated video extension command parameter.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ne-d3d12video-d3d12_video_extension_command_parameter_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS::D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_NONE">
    <summary>None. Set for simple data type parameters.</summary>
  </comment>
  <comment id="D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS::D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_READ">
    <summary>The resource parameter is read. This flag is for <b>ID3D12Resource</b> only and is not valid for simple data type parameters.</summary>
  </comment>
  <comment id="D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAGS::D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_FLAG_WRITE">
    <summary>The resource parameter is written. This flag is for <b>ID3D12Resource</b> only and is not valid for simple data type parameters.</summary>
  </comment>
  <comment id="ID3D12VideoProcessor">
    <summary>
      <para>Provides methods for getting information about the parameters to the call to ID3D12VideoDevice::CreateVideoProcessor that created the video processor.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/nn-d3d12video-id3d12videoprocessor" /></para>
    </summary>
  </comment>
  <comment id="ID3D12InfoQueue::SetBreakOnSeverity">
    <summary>
      <para>Set a message severity level to break on when a message with that severity level passes through the storage filter.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-setbreakonseverity" /></para>
      <param name="Severity">A message severity level to break on.</param>
      <param name="bEnable">Turns this breaking condition on or off (true for on, false for off).</param>
    </summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::CopyResource">
    <summary>
      <para>Copies the entire contents of the source resource to the destination resource.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-copyresource" /></para>
      <param name="pDstResource">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a>interface that represents the destination resource.</param>
      <param name="pSrcResource">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a>interface that represents the source resource.</param>
    </summary>
  </comment>
  <comment id="D3D12_ROOT_DESCRIPTOR_TABLE1">
    <summary>
      <para>Describes the root signature 1.1 layout of a descriptor table as a collection of descriptor ranges that are all relative to a single base descriptor handle.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_root_descriptor_table1" /></para>
    </summary>
  </comment>
  <comment id="D3D12_ROOT_DESCRIPTOR_TABLE1::NumDescriptorRanges">
    <summary>The number of descriptor ranges in the table layout.</summary>
  </comment>
  <comment id="D3D12_ROOT_DESCRIPTOR_TABLE1::pDescriptorRanges">
    <summary>An array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_descriptor_range1">D3D12_DESCRIPTOR_RANGE1</a> structures that describe the descriptor ranges.</summary>
  </comment>
  <comment id="D3D12_SHADER_VISIBILITY">
    <summary>
      <para>Specifies the shaders that can access the contents of a given root signature slot.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_shader_visibility" /></para>
    </summary>
  </comment>
  <comment id="D3D12_SHADER_VISIBILITY::D3D12_SHADER_VISIBILITY_ALL">
    <summary>Specifies that all shader stages can access whatever is bound at the root signature slot.</summary>
  </comment>
  <comment id="D3D12_SHADER_VISIBILITY::D3D12_SHADER_VISIBILITY_VERTEX">
    <summary>Specifies that the vertex shader stage can access whatever is bound at the root signature slot.</summary>
  </comment>
  <comment id="D3D12_SHADER_VISIBILITY::D3D12_SHADER_VISIBILITY_HULL">
    <summary>Specifies that the hull shader stage can access whatever is bound at the root signature slot.</summary>
  </comment>
  <comment id="D3D12_SHADER_VISIBILITY::D3D12_SHADER_VISIBILITY_DOMAIN">
    <summary>Specifies that the domain shader stage can access whatever is bound at the root signature slot.</summary>
  </comment>
  <comment id="D3D12_SHADER_VISIBILITY::D3D12_SHADER_VISIBILITY_GEOMETRY">
    <summary>Specifies that the geometry shader stage can access whatever is bound at the root signature slot.</summary>
  </comment>
  <comment id="D3D12_SHADER_VISIBILITY::D3D12_SHADER_VISIBILITY_PIXEL">
    <summary>Specifies that the pixel shader stage can access whatever is bound at the root signature slot.</summary>
  </comment>
  <comment id="D3D12_SHADER_VISIBILITY::D3D12_SHADER_VISIBILITY_AMPLIFICATION">
    <summary>Specifies that the amplification shader stage can access whatever is bound at the root signature slot.</summary>
  </comment>
  <comment id="D3D12_SHADER_VISIBILITY::D3D12_SHADER_VISIBILITY_MESH">
    <summary>Specifies that the mesh shader stage can access whatever is bound at the root signature slot.</summary>
  </comment>
  <comment id="D3D12_RENDER_TARGET_VIEW_DESC">
    <summary>
      <para>Describes the subresources from a resource that are accessible by using a render-target view.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_render_target_view_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RENDER_TARGET_VIEW_DESC::Format">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>-typed value that specifies the viewing format.</summary>
  </comment>
  <comment id="D3D12_RENDER_TARGET_VIEW_DESC::ViewDimension">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_rtv_dimension">D3D12_RTV_DIMENSION</a>-typed value that specifies how the render-target resource will be accessed. This type specifies how the resource will be accessed. This member also determines which _RTV to use in the following union.</summary>
  </comment>
  <comment id="D3D12_RENDER_TARGET_VIEW_DESC::Buffer">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_buffer_rtv">D3D12_BUFFER_RTV</a> structure that specifies which buffer elements can be accessed.</summary>
  </comment>
  <comment id="D3D12_RENDER_TARGET_VIEW_DESC::Texture1D">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tex1d_rtv">D3D12_TEX1D_RTV</a> structure that specifies the subresources in a 1D texture that can be accessed.</summary>
  </comment>
  <comment id="D3D12_RENDER_TARGET_VIEW_DESC::Texture1DArray">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tex1d_array_rtv">D3D12_TEX1D_ARRAY_RTV</a> structure that specifies the subresources in a 1D texture array that can be accessed.</summary>
  </comment>
  <comment id="D3D12_RENDER_TARGET_VIEW_DESC::Texture2D">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tex2d_rtv">D3D12_TEX2D_RTV</a> structure that specifies the subresources in a 2D texture that can be accessed.</summary>
  </comment>
  <comment id="D3D12_RENDER_TARGET_VIEW_DESC::Texture2DArray">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tex2d_array_rtv">D3D12_TEX2D_ARRAY_RTV</a> structure that specifies the subresources in a 2D texture array that can be accessed.</summary>
  </comment>
  <comment id="D3D12_RENDER_TARGET_VIEW_DESC::Texture2DMS">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tex2dms_rtv">D3D12_TEX2DMS_RTV</a> structure that specifies a single subresource because a multisampled 2D texture only contains one subresource.</summary>
  </comment>
  <comment id="D3D12_RENDER_TARGET_VIEW_DESC::Texture2DMSArray">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tex2dms_array_rtv">D3D12_TEX2DMS_ARRAY_RTV</a> structure that specifies the subresources in a multisampled 2D texture array that can be accessed.</summary>
  </comment>
  <comment id="D3D12_RENDER_TARGET_VIEW_DESC::Texture3D">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tex3d_rtv">D3D12_TEX3D_RTV</a> structure that specifies subresources in a 3D texture that can be accessed.</summary>
  </comment>
  <comment id="D3D12_STATE_OBJECT_DESC">
    <summary>
      <para>Description of a state object. Pass this structure into ID3D12Device::CreateStateObject.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_state_object_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_STATE_OBJECT_DESC::Type">
    <summary>The type of the state object.</summary>
  </comment>
  <comment id="D3D12_STATE_OBJECT_DESC::NumSubobjects">
    <summary>Size of the <i>pSubobjects</i> array.</summary>
  </comment>
  <comment id="D3D12_STATE_OBJECT_DESC::pSubobjects">
    <summary>An array of subobject definitions.</summary>
  </comment>
  <comment id="D3D12_TEXCUBE_SRV">
    <summary>
      <para>Describes the subresource from a cube texture to use in a shader-resource view.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_texcube_srv" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TEXCUBE_SRV::MostDetailedMip">
    <summary>Index of the most detailed mipmap level to use; this number is between 0 and <b>MipLevels</b> (from the original TextureCube for which <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12device-createshaderresourceview">ID3D12Device::CreateShaderResourceView</a> creates a view) -1.</summary>
  </comment>
  <comment id="D3D12_TEXCUBE_SRV::MipLevels">
    <summary>The maximum number of mipmap levels for the view of the texture. See the remarks in <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tex1d_srv">D3D12_TEX1D_SRV</a>.

Set to -1 to indicate all the mipmap levels from <b>MostDetailedMip</b> on down to least detailed.</summary>
  </comment>
  <comment id="D3D12_TEXCUBE_SRV::ResourceMinLODClamp">
    <summary>A value to clamp sample LOD values to. For example, if you specify 2.0f for the clamp value, you ensure that no individual sample accesses a mip level less than 2.0f.</summary>
  </comment>
  <comment id="ID3D12DescriptorHeap">
    <summary>
      <para>A descriptor heap is a collection of contiguous allocations of descriptors, one allocation for every descriptor.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12descriptorheap" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DRED_PAGE_FAULT_OUTPUT">
    <summary>
      <para>Describes allocation data related to a GPU page fault on a given virtual address (VA).</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_dred_page_fault_output" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DRED_PAGE_FAULT_OUTPUT::PageFaultVA">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/direct3d12/d3d12_gpu_virtual_address">D3D12_GPU_VIRTUAL_ADDRESS</a> containing the GPU virtual address (VA) of the faulting operation if device removal was due to a GPU page fault.</summary>
  </comment>
  <comment id="D3D12_DRED_PAGE_FAULT_OUTPUT::pHeadExistingAllocationNode">
    <summary>A pointer to a constant <a href="https://docs.microsoft.comns-d3d12-d3d12_dred_allocation_node.md">D3D12_DRED_ALLOCATION_NODE</a> object representing the head of a linked list of allocation nodes for active allocated runtime objects with virtual address (VA) ranges that match the faulting VA (<c>PageFaultVA</c>). Has a value of <c>nullptr</c> if the list is empty.</summary>
  </comment>
  <comment id="D3D12_DRED_PAGE_FAULT_OUTPUT::pHeadRecentFreedAllocationNode">
    <summary>A pointer to a constant <a href="https://docs.microsoft.comns-d3d12-d3d12_dred_allocation_node.md">D3D12_DRED_ALLOCATION_NODE</a> object representing the head of a linked list of allocation nodes for recently freed runtime objects with virtual address (VA) ranges that match the faulting VA (<c>PageFaultVA</c>). Has a value of <c>nullptr</c> if the list is empty.</summary>
  </comment>
  <comment id="D3D12_DRED_ENABLEMENT">
    <summary>
      <para>Defines constants that specify render/compute GPU operations.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_dred_enablement" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DRED_ENABLEMENT::D3D12_DRED_ENABLEMENT_SYSTEM_CONTROLLED">
    <summary>Specifies that a DRED feature is enabled only when DRED is turned on by the system automatically (for example, when a user is reproducing a problem via FeedbackHub).</summary>
  </comment>
  <comment id="D3D12_DRED_ENABLEMENT::D3D12_DRED_ENABLEMENT_FORCED_OFF">
    <summary>Specifies that a DRED feature should be force-disabled, regardless of the system state.</summary>
  </comment>
  <comment id="D3D12_DRED_ENABLEMENT::D3D12_DRED_ENABLEMENT_FORCED_ON">
    <summary>Specifies that a DRED feature should be force-enabled, regardless of the system state.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::IASetIndexBuffer">
    <summary>
      <para>Sets the view for the index buffer.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-iasetindexbuffer" /></para>
      <param name="pView">The view specifies the index buffer's address, size, and <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>, as a pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_index_buffer_view">D3D12_INDEX_BUFFER_VIEW</a> structure.</param>
    </summary>
  </comment>
  <comment id="D3D12_RLDO_FLAGS">
    <summary>
      <para>Specifies options for the amount of information to report about a live device object's lifetime.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/ne-d3d12sdklayers-d3d12_rldo_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RLDO_FLAGS::D3D12_RLDO_SUMMARY">
    <summary>Obtain a summary about a live device object's lifetime.</summary>
  </comment>
  <comment id="D3D12_RLDO_FLAGS::D3D12_RLDO_DETAIL">
    <summary>Obtain detailed information about a live device object's lifetime.</summary>
  </comment>
  <comment id="D3D12_RLDO_FLAGS::D3D12_RLDO_IGNORE_INTERNAL">
    <summary>This flag indicates to ignore objects which have no external refcounts keeping them alive. D3D objects are printed using an external refcount and an internal refcount. Typically, all objects are printed. This flag means ignore the objects whose external refcount is 0, because the application is not responsible for keeping them alive.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList">
    <summary>
      <para>Encapsulates a list of graphics commands for rendering. Includes APIs for instrumenting the command list execution, and for setting and clearing the pipeline state.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12graphicscommandlist" /></para>
    </summary>
  </comment>
  <comment id="D3D12_GPU_BASED_VALIDATION_FLAGS">
    <summary>
      <para>Describes the level of GPU-based validation to perform at runtime.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/ne-d3d12sdklayers-d3d12_gpu_based_validation_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_GPU_BASED_VALIDATION_FLAGS::D3D12_GPU_BASED_VALIDATION_FLAGS_NONE">
    <summary>Default behavior; resource states, descriptors, and descriptor tables are all validated.</summary>
  </comment>
  <comment id="D3D12_GPU_BASED_VALIDATION_FLAGS::D3D12_GPU_BASED_VALIDATION_FLAGS_DISABLE_STATE_TRACKING">
    <summary>When set, GPU-based validation does not perform resource state validation which greatly reduces the performance cost of GPU-based validtion. Descriptors and descriptor heaps are still validated.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_GEOMETRY_TYPE">
    <summary>
      <para>Specifies the type of geometry used for raytracing. Use a value from this enumeration to specify the geometry type in a D3D12_RAYTRACING_GEOMETRY_DESC.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_raytracing_geometry_type" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RAYTRACING_GEOMETRY_TYPE::D3D12_RAYTRACING_GEOMETRY_TYPE_TRIANGLES">
    <summary>The geometry consists of triangles.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_GEOMETRY_TYPE::D3D12_RAYTRACING_GEOMETRY_TYPE_PROCEDURAL_PRIMITIVE_AABBS">
    <summary>The geometry procedurally is defined during raytracing by intersection shaders.  For the purpose of acceleration structure builds, the geometry’s bounds are described with axis-aligned bounding boxes using the  <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_raytracing_geometry_aabbs_desc">D3D12_RAYTRACING_GEOMETRY_AABBS_DESC</a> structure.</summary>
  </comment>
  <comment id="ID3D12PipelineLibrary::StorePipeline">
    <summary>
      <para>Adds the input PSO to an internal database with the corresponding name.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12pipelinelibrary-storepipeline" /></para>
      <param name="pName">Specifies a unique name for the library. Overwriting is not supported.</param>
      <param name="pPipeline">Specifies the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12pipelinestate">ID3D12PipelineState</a> to add.</param>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES">
    <summary>
      <para>Retrieves the list of supported profiles.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_feature_data_video_decode_profiles" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES::NodeIndex">
    <summary>For single GPU operation, set this to zero. If there are multiple GPU nodes, set a bit to identify the node (the device's physical adapter) to which the command queue applies. Each bit in the mask corresponds to a single node. Only 1 bit may be set.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES::ProfileCount">
    <summary>The number of profiles to retrieve.  This number must match the value returned from a call [ID3D12VideoDevice::CheckFeatureSupport](nf-d3d12video-id3d12videodevice-checkfeaturesupport.md) when the feature specified is <a href="https://docs.microsoft.comne-d3d12video-d3d12_feature_video.md">D3D12\_FEATURE\_VIDEO\_DECODE\_PROFILE\_COUNT</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODE_PROFILES::pProfiles">
    <summary>A list of GUIDs representing the supported profiles.  The calling application must allocate storage for the profile list before calling <b>CheckFeatureSupport</b>.</summary>
  </comment>
  <comment id="ID3D12ShaderReflection::GetInputParameterDesc">
    <summary>
      <para>Gets an input-parameter description for a shader.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getinputparameterdesc" /></para>
      <param name="ParameterIndex">A zero-based parameter index.</param>
      <param name="pDesc">A pointer to a shader-input-signature description. See <a href="https://docs.microsoft.com/windows/win32/api/d3d12shader/ns-d3d12shader-d3d12_signature_parameter_desc">D3D12_SIGNATURE_PARAMETER_DESC</a>.</param>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT">
    <summary>
      <para>Details the adapter's GPU virtual address space limitations, including maximum address bits per resource and per process.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_feature_data_gpu_virtual_address_support" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT::MaxGPUVirtualAddressBitsPerResource">
    <summary>The maximum GPU virtual address bits per resource.

Some adapters have significantly less bits available per resource than per process, while other adapters have significantly greater bits available per resource than per process. The latter scenario tends to happen in less common scenarios, like when running a 32-bit process on certain UMA adapters.
When per resource capabilities are greater than per process, the greater per resource capabilities can only be leveraged by reserved resources or NULL mapped pages.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT::MaxGPUVirtualAddressBitsPerProcess">
    <summary>The maximum GPU virtual address bits per process.

When this value is nearly equal to the available residency budget, <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12device-evict">Evict</a> will not be a feasible option to manage residency. See <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12device-makeresident">MakeResident</a> for more details.</summary>
  </comment>
  <comment id="D3D12_SO_DECLARATION_ENTRY">
    <summary>
      <para>Describes a vertex element in a vertex buffer in an output slot.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_so_declaration_entry" /></para>
    </summary>
  </comment>
  <comment id="D3D12_SO_DECLARATION_ENTRY::Stream">
    <summary>Zero-based, stream number.</summary>
  </comment>
  <comment id="D3D12_SO_DECLARATION_ENTRY::SemanticName">
    <summary>Type of output element; possible values include: <b>"POSITION"</b>, <b>"NORMAL"</b>, or <b>"TEXCOORD0"</b>.
        Note that if <b>SemanticName</b> is <b>NULL</b> then 
        <b>ComponentCount</b> can be greater than 4 and the described entry will be a gap in the stream out where no data will be written.</summary>
  </comment>
  <comment id="D3D12_SO_DECLARATION_ENTRY::SemanticIndex">
    <summary>Output element's zero-based index. Use, for example, if you have more than one texture coordinate stored in each vertex.</summary>
  </comment>
  <comment id="D3D12_SO_DECLARATION_ENTRY::StartComponent">
    <summary>The component of the entry to begin writing out to. Valid values are 0 to 3. For example, if you only wish to output to the y and z components 
        of a position, <b>StartComponent</b> is 1 and <b>ComponentCount</b> is 2.</summary>
  </comment>
  <comment id="D3D12_SO_DECLARATION_ENTRY::ComponentCount">
    <summary>The number of components of the entry to write out to. Valid values are 1 to 4. For example, if you only wish to output to the y and z components 
        of a position, <b>StartComponent</b> is 1 and <b>ComponentCount</b> is 2.  Note that if <b>SemanticName</b> is <b>NULL</b> then 
        <b>ComponentCount</b> can be greater than 4 and the described entry will be a gap in the stream out where no data will be written.</summary>
  </comment>
  <comment id="D3D12_SO_DECLARATION_ENTRY::OutputSlot">
    <summary>The associated stream output buffer that is bound to the pipeline. 
        The valid range for <b>OutputSlot</b> is 0 to 3.</summary>
  </comment>
  <comment id="ID3D12Device::SetStablePowerState">
    <summary>
      <para>A development-time aid for certain types of profiling and experimental prototyping.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-setstablepowerstate" /></para>
      <param name="Enable">Specifies a BOOL that turns the stable power state on or off.</param>
    </summary>
  </comment>
  <comment id="ID3D12ShaderReflection::GetConversionInstructionCount">
    <summary>
      <para>Gets the number of conversion instructions.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getconversioninstructioncount" /></para>
    </summary>
  </comment>
  <comment id="D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER">
    <summary>
      <para>Defines constants that specify a cross-API sharing support tier.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_shared_resource_compatibility_tier" /></para>
    </summary>
  </comment>
  <comment id="D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER::D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_0">
    <summary>Specifies that the most basic level of cross-API sharing is supported, including the following resource data formats.

* DXGI_FORMAT_R8G8B8A8_UNORM
* DXGI_FORMAT_R8G8B8A8_UNORM_SRGB
* DXGI_FORMAT_B8G8R8A8_UNORM
* DXGI_FORMAT_B8G8R8A8_UNORM_SRGB
* DXGI_FORMAT_B8G8R8X8_UNORM
* DXGI_FORMAT_B8G8R8X8_UNORM_SRGB
* DXGI_FORMAT_R10G10B10A2_UNORM
* DXGI_FORMAT_R16G16B16A16_FLOAT</summary>
  </comment>
  <comment id="D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER::D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_1">
    <summary>Specifies that cross-API sharing functionality of Tier 0 is supported, plus the following formats.

* DXGI_FORMAT_R16G16B16A16_TYPELESS
* DXGI_FORMAT_R10G10B10A2_TYPELESS
* DXGI_FORMAT_R8G8B8A8_TYPELESS
* DXGI_FORMAT_R8G8B8X8_TYPELESS
* DXGI_FORMAT_R16G16_TYPELESS
* DXGI_FORMAT_R8G8_TYPELESS
* DXGI_FORMAT_R32_TYPELESS
* DXGI_FORMAT_R16_TYPELESS
* DXGI_FORMAT_R8_TYPELESS

This level support is built into WDDM 2.4.

Also see [Extended support for shared Texture2D resources](/windows/win32/direct3d11/direct3d-11-1-features#extended-support-for-shared-texture2d-resources).</summary>
  </comment>
  <comment id="D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER::D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_2">
    <summary>Specifies that cross-API sharing functionality of Tier 1 is supported, plus the following formats.

* DXGI_FORMAT_NV12 (also see [Extended NV12 texture support](/windows/win32/direct3d11/direct3d-11-4-features#extended-nv12-texture-support))</summary>
  </comment>
  <comment id="D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER::D3D12_SHARED_RESOURCE_COMPATIBILITY_TIER_3">
    <summary>Specifies that cross-API sharing functionality of Tier 2 is supported, plus the following formats.

* DXGI_FORMAT_R11G11B10_FLOAT</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT">
    <summary>
      <para>Retrieves the number of video extension commands.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_feature_data_video_extension_command_count" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT::NodeIndex">
    <summary>For single GPU operation, set this to zero. If there are multiple GPU nodes, set a bit to identify the node (the device's physical adapter) to which the command queue applies. Each bit in the mask corresponds to a single node. Only 1 bit may be set.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_COUNT::CommandCount">
    <summary>The supported number of video extension commands.</summary>
  </comment>
  <comment id="D3D12_TEXTURE_COPY_LOCATION">
    <summary>
      <para>Describes a portion of a texture for the purpose of texture copies.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_texture_copy_location" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TEXTURE_COPY_LOCATION::pResource">
    <summary>Specifies the resource which will be used for the copy operation.<div> </div>When <b>Type</b> is D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT, <b>pResource</b> must point to a buffer resource.<div> </div>When <b>Type</b> is D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX, <b>pResource</b> must point to a texture resource.</summary>
  </comment>
  <comment id="D3D12_TEXTURE_COPY_LOCATION::Type">
    <summary>Specifies which type of resource location this is: a subresource of a texture, or a description of a texture layout which can be applied to a buffer.
            This <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_texture_copy_type">D3D12_TEXTURE_COPY_TYPE</a> enum indicates which union member to use.</summary>
  </comment>
  <comment id="D3D12_TEXTURE_COPY_LOCATION::PlacedFootprint">
    <summary>Specifies a texture layout, with offset, dimensions, and pitches, for the hardware to understand how to treat a section of a buffer resource as a multi-dimensional texture.
              To fill-in the correct data for a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12graphicscommandlist-copytextureregion">CopyTextureRegion</a> call, 
              see <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_placed_subresource_footprint">D3D12_PLACED_SUBRESOURCE_FOOTPRINT</a>.</summary>
  </comment>
  <comment id="D3D12_TEXTURE_COPY_LOCATION::SubresourceIndex">
    <summary>Specifies the index of the subresource of an arrayed, mip-mapped, or planar texture should be used for the copy operation.</summary>
  </comment>
  <comment id="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE">
    <summary>
      <para>Specifies the type of a sub-object in a pipeline state stream description.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_pipeline_state_subobject_type" /></para>
    </summary>
  </comment>
  <comment id="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_ROOT_SIGNATURE">
    <summary>Indicates a root signature subobject type.
The corresponding subobject type is <b><a href="https://docs.microsoft.com/windows/win32/api/d3d12/nn-d3d12-id3d12rootsignature">ID3D12RootSignature</a></b>.</summary>
  </comment>
  <comment id="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VS">
    <summary>Indicates a vertex shader subobject type.
The corresponding subobject type is <b><a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_shader_bytecode">D3D12_SHADER_BYTECODE</a></b>.</summary>
  </comment>
  <comment id="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PS">
    <summary>Indicates a pixel shader subobject type.
The corresponding subobject type is <b><a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_shader_bytecode">D3D12_SHADER_BYTECODE</a></b>.</summary>
  </comment>
  <comment id="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DS">
    <summary>Indicates a domain shader subobject type.
The corresponding subobject type is <b><a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_shader_bytecode">D3D12_SHADER_BYTECODE</a></b>.</summary>
  </comment>
  <comment id="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_HS">
    <summary>Indicates a hull shader subobject type.
The corresponding subobject type is <b><a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_shader_bytecode">D3D12_SHADER_BYTECODE</a></b>.</summary>
  </comment>
  <comment id="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_GS">
    <summary>Indicates a geometry shader subobject type.
The corresponding subobject type is <b><a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_shader_bytecode">D3D12_SHADER_BYTECODE</a></b>.</summary>
  </comment>
  <comment id="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CS">
    <summary>Indicates a compute shader subobject type.
The corresponding subobject type is <b><a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_shader_bytecode">D3D12_SHADER_BYTECODE</a></b>.</summary>
  </comment>
  <comment id="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_STREAM_OUTPUT">
    <summary>Indicates a stream-output subobject type.
The corresponding subobject type is <b><a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_stream_output_desc">D3D12_STREAM_OUTPUT_DESC</a></b>.</summary>
  </comment>
  <comment id="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_BLEND">
    <summary>Indicates a blend subobject type.
The corresponding subobject type is <b><a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_blend_desc">D3D12_BLEND_DESC</a></b>.</summary>
  </comment>
  <comment id="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_MASK">
    <summary>Indicates a sample mask subobject type.
The corresponding subobject type is <b>UINT</b>.</summary>
  </comment>
  <comment id="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RASTERIZER">
    <summary>Indicates indicates a rasterizer subobject type.
The corresponding subobject type is <b><a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_rasterizer_desc">D3D12_RASTERIZER_DESC</a></b>.</summary>
  </comment>
  <comment id="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL">
    <summary>Indicates a depth stencil subobject type.
The corresponding subobject type is <b><a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_depth_stencil_desc">D3D12_DEPTH_STENCIL_DESC</a></b>.</summary>
  </comment>
  <comment id="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_INPUT_LAYOUT">
    <summary>Indicates an input layout subobject type.
The corresponding subobject type is <b><a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_input_layout_desc">D3D12_INPUT_LAYOUT_DESC</a></b>.</summary>
  </comment>
  <comment id="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_IB_STRIP_CUT_VALUE">
    <summary>Indicates an index buffer strip cut value subobject type.
The corresponding subobject type is <b><a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_index_buffer_strip_cut_value">D3D12_INDEX_BUFFER_STRIP_CUT_VALUE</a></b>.</summary>
  </comment>
  <comment id="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_PRIMITIVE_TOPOLOGY">
    <summary>Indicates a primitive topology subobject type.
The corresponding subobject type is <b><a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_primitive_topology_type">D3D12_PRIMITIVE_TOPOLOGY_TYPE</a></b>.</summary>
  </comment>
  <comment id="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_RENDER_TARGET_FORMATS">
    <summary>Indicates a render target formats subobject type. The corresponding subobject type is <b><a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_rt_format_array">D3D12_RT_FORMAT_ARRAY</a></b> structure, which wraps an array of render target formats along with a count of the array elements.</summary>
  </comment>
  <comment id="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL_FORMAT">
    <summary>Indicates a depth stencil format subobject.
The corresponding subobject type is <b><a href="https://docs.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a></b>.</summary>
  </comment>
  <comment id="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_SAMPLE_DESC">
    <summary>Indicates a sample description subobject type.
The corresponding subobject type is <b><a href="https://docs.microsoft.com/windows/win32/api/dxgicommon/ns-dxgicommon-dxgi_sample_desc">DXGI_SAMPLE_DESC</a></b>.</summary>
  </comment>
  <comment id="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_NODE_MASK">
    <summary>Indicates a node mask subobject type.
The corresponding subobject type is <b><a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_node_mask">D3D12_NODE_MASK</a></b> or <b>UINT</b>.</summary>
  </comment>
  <comment id="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_CACHED_PSO">
    <summary>Indicates a cached pipeline state object subobject type.
The corresponding subobject type is <b><a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_cached_pipeline_state">D3D12_CACHED_PIPELINE_STATE</a></b>.</summary>
  </comment>
  <comment id="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_FLAGS">
    <summary>Indicates a flags subobject type.
The corresponding subobject type is <b><a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_pipeline_state_flags">D3D12_PIPELINE_STATE_FLAGS</a></b>.</summary>
  </comment>
  <comment id="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_DEPTH_STENCIL1">
    <summary>Indicates an expanded depth stencil subobject type. This expansion of the depth stencil subobject supports optional depth bounds checking.
The corresponding subobject type is <b><a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_depth_stencil_desc1">D3D12_DEPTH_STENCIL_DESC1</a></b>.</summary>
  </comment>
  <comment id="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_VIEW_INSTANCING">
    <summary>Indicates a view instancing subobject type.
The corresponding subobject type is <b><a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_view_instancing_desc">D3D12_VIEW_INSTANCING_DESC</a></b>.</summary>
  </comment>
  <comment id="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_AS">
    <summary>Indicates an amplification shader subobject type.
The corresponding subobject type is <b><a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_shader_bytecode">D3D12_SHADER_BYTECODE</a></b>.</summary>
  </comment>
  <comment id="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MS">
    <summary>Indicates a mesh shader subobject type.
The corresponding subobject type is <b><a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_shader_bytecode">D3D12_SHADER_BYTECODE</a></b>.</summary>
  </comment>
  <comment id="D3D12_PIPELINE_STATE_SUBOBJECT_TYPE::D3D12_PIPELINE_STATE_SUBOBJECT_TYPE_MAX_VALID">
    <summary>A sentinel value that marks the exclusive upper-bound of valid values this enumeration represents.</summary>
  </comment>
  <comment id="ID3D12Device7">
    <summary>
      <para>Represents a virtual adapter. This interface extends <a href="https://docs.microsoft.com../d3d12/nn-d3d12-id3d12device6.md">ID3D12Device6</a>.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12device7" /></para>
    </summary>
  </comment>
  <comment id="ID3D12DebugDevice1::SetDebugParameter">
    <summary>
      <para>Modifies the D3D12 optional device-wide Debug Layer settings.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12debugdevice1-setdebugparameter" /></para>
      <param name="Type">Specifies a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ne-d3d12sdklayers-d3d12_debug_device_parameter_type">D3D12_DEBUG_DEVICE_PARAMETER_TYPE</a> value that indicates which debug parameter data to get.</param>
      <param name="pData">Debug parameter data to set.</param>
      <param name="DataSize">Size in bytes of the data pointed to by <i>pData</i>.</param>
    </summary>
  </comment>
  <comment id="D3D12_RESOURCE_ALLOCATION_INFO1">
    <summary>
      <para>Describes parameters needed to allocate resources, including offset.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_resource_allocation_info1" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RESOURCE_ALLOCATION_INFO1::Offset">
    <summary>The offset, in bytes, of the resource.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_ALLOCATION_INFO1::Alignment">
    <summary>The alignment value for the resource; one of 4KB (4096), 64KB (65536), or 4MB (4194304) alignment.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_ALLOCATION_INFO1::SizeInBytes">
    <summary>The size, in bytes, of the resource.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::CopyBufferRegion">
    <summary>
      <para>Copies a region of a buffer from one resource to another.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-copybufferregion" /></para>
      <param name="pDstBuffer">Specifies the destination <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a>.</param>
      <param name="DstOffset">Specifies a UINT64 offset (in bytes) into the destination resource.</param>
      <param name="pSrcBuffer">Specifies the source  <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a>.</param>
      <param name="SrcOffset">Specifies a UINT64 offset (in bytes) into the source resource, to start the copy from.</param>
      <param name="NumBytes">Specifies the number of bytes to copy.</param>
    </summary>
  </comment>
  <comment id="ID3D12ShaderReflection::GetConstantBufferByIndex">
    <summary>
      <para>Gets a constant buffer by index.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getconstantbufferbyindex" /></para>
      <param name="Index">Zero-based index.</param>
    </summary>
  </comment>
  <comment id="ID3D12InfoQueue">
    <summary>
      <para>An information-queue interface stores, retrieves, and filters debug messages. The queue consists of a message queue, an optional storage filter stack, and a optional retrieval filter stack.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nn-d3d12sdklayers-id3d12infoqueue" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY">
    <summary>
      <para>Details the adapter's support for prioritization of different command queue types.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_feature_data_command_queue_priority" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY::CommandListType">
    <summary><a href="https://docs.microsoft.com/visualstudio/code-quality/annotating-structs-and-classes?view=vs-2015">SAL</a>: <c>_In_</c>

The type of the command list you're interested in.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY::Priority">
    <summary><a href="https://docs.microsoft.com/visualstudio/code-quality/annotating-structs-and-classes?view=vs-2015">SAL</a>: <c>_In_</c>

The priority level you're interested in.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY::PriorityForTypeIsSupported">
    <summary><a href="https://docs.microsoft.com/visualstudio/code-quality/annotating-structs-and-classes?view=vs-2015">SAL</a>: <c>_Out_</c>

On return, contains true if the specfied command list type supports the specified priority level; otherwise, false.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::DrawInstanced">
    <summary>
      <para>Draws non-indexed, instanced primitives.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-drawinstanced" /></para>
      <param name="VertexCountPerInstance">Number of vertices to draw.</param>
      <param name="InstanceCount">Number of instances to draw.</param>
      <param name="StartVertexLocation">Index of the first vertex.</param>
      <param name="StartInstanceLocation">A value added to each index before reading per-instance data from a vertex buffer.</param>
    </summary>
  </comment>
  <comment id="D3D12_TEX2DMS_ARRAY_DSV">
    <summary>
      <para>Describes the subresources from an array of multi sampled 2D textures for a depth-stencil view.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_tex2dms_array_dsv" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TEX2DMS_ARRAY_DSV::FirstArraySlice">
    <summary>The index of the first texture to use in an array of textures.</summary>
  </comment>
  <comment id="D3D12_TEX2DMS_ARRAY_DSV::ArraySize">
    <summary>Number of textures to use.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_SHADER_CONFIG">
    <summary>
      <para>A state subobject that represents a shader configuration.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_raytracing_shader_config" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RAYTRACING_SHADER_CONFIG::MaxPayloadSizeInBytes">
    <summary>The maximum storage for scalars (counted as 4 bytes each) in ray payloads in raytracing pipelines that contain this program.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_SHADER_CONFIG::MaxAttributeSizeInBytes">
    <summary>The maximum number of scalars (counted as 4 bytes each) that can be used for attributes in pipelines that contain this shader. The value cannot exceed <a href="https://docs.microsoft.com/windows/desktop/direct3d12/constants">D3D12_RAYTRACING_MAX_ATTRIBUTE_SIZE_IN_BYTES</a>.</summary>
  </comment>
  <comment id="D3D12_VIDEO_FRAME_STEREO_FORMAT">
    <summary>
      <para>Defines the layout in memory of a stereo 3D video frame.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ne-d3d12video-d3d12_video_frame_stereo_format" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_FRAME_STEREO_FORMAT::D3D12_VIDEO_FRAME_STEREO_FORMAT_NONE">
    <summary>No stereo format is specified.</summary>
  </comment>
  <comment id="D3D12_VIDEO_FRAME_STEREO_FORMAT::D3D12_VIDEO_FRAME_STEREO_FORMAT_MONO">
    <summary>The sample does not contain stereo data. If the stereo format is not specified, this value is the default.</summary>
  </comment>
  <comment id="D3D12_VIDEO_FRAME_STEREO_FORMAT::D3D12_VIDEO_FRAME_STEREO_FORMAT_HORIZONTAL">
    <summary>Frame 0 and frame 1 are packed side-by-side, as shown in the following diagram.

![Horizontal stereo format showing the frame 0 pixels on the left of a grid of pixels and the frame 1 pixels on the right](./images/stereo_format_horizontal.png)</summary>
  </comment>
  <comment id="D3D12_VIDEO_FRAME_STEREO_FORMAT::D3D12_VIDEO_FRAME_STEREO_FORMAT_VERTICAL">
    <summary>Frame 0 and frame 1 are packed top-to-bottom, as shown in the following diagram.

![Vertical stereo format showing the frame 0 pixels on the top of a grid of pixels and the frame 1 pixels on the bottom](./images/stereo_format_horizontal.png)</summary>
  </comment>
  <comment id="D3D12_VIDEO_FRAME_STEREO_FORMAT::D3D12_VIDEO_FRAME_STEREO_FORMAT_SEPARATE">
    <summary>Frame 0 and frame 1 are placed in separate resources</summary>
  </comment>
  <comment id="ID3D12Fence::GetCompletedValue">
    <summary>
      <para>Gets the current value of the fence.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12fence-getcompletedvalue" /></para>
    </summary>
  </comment>
  <comment id="ID3D12Device5::CreateMetaCommand">
    <summary>
      <para>Creates an instance of the specified meta command.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device5-createmetacommand" /></para>
      <param name="CommandId">A reference to the globally unique identifier (GUID) of the meta command that you wish to instantiate.</param>
      <param name="NodeMask">For single-adapter operation, set this to zero. If there are multiple adapter nodes, set a bit to identify the node (one of the device's physical adapters) to which the meta command applies. Each bit in the mask corresponds to a single node. Only one bit must be set. See <a href="https://docs.microsoft.com/windows/win32/direct3d12/multi-engine">Multi-adapter systems</a>.</param>
      <param name="pCreationParametersData">An optional pointer to a constant structure containing the values of the parameters for creating the meta command.</param>
      <param name="CreationParametersDataSizeInBytes">A <a href="https://docs.microsoft.com/windows/win32/WinProg/windows-data-types">SIZE_T</a> containing the size of the structure pointed to by <i>pCreationParametersData</i>, if set, otherwise 0.</param>
      <param name="riid">A reference to the globally unique identifier (GUID) of the interface that you wish to be returned in <i>ppMetaCommand</i>. This is expected to be the GUID of <a href="https://docs.microsoft.com/windows/win32/api/d3d12/nn-d3d12-id3d12metacommand">ID3D12MetaCommand</a>.</param>
      <param name="ppMetaCommand">A pointer to a memory block that receives a pointer to the meta command. This is the address of a pointer to an <a href="https://docs.microsoft.com/windows/win32/api/d3d12/nn-d3d12-id3d12metacommand">ID3D12MetaCommand</a>, representing  the meta command created.</param>
    </summary>
  </comment>
  <comment id="D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION">
    <summary>
      <para>Associates a subobject defined directly in a state object with shader exports.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_subobject_to_exports_association" /></para>
    </summary>
  </comment>
  <comment id="D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION::pSubobjectToAssociate">
    <summary>Pointer to the subobject in current state object to define an association to.</summary>
  </comment>
  <comment id="D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION::NumExports">
    <summary>Size of the <i>pExports</i> array.  If 0, this is being explicitly defined as a default association.  Another way to define a default association is to omit this subobject association for that subobject completely.</summary>
  </comment>
  <comment id="D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION::pExports">
    <summary>The array of exports with which the subobject is associated.</summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_HEAP_DESC">
    <summary>
      <para>Describes the descriptor heap.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_descriptor_heap_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_HEAP_DESC::Type">
    <summary>A <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_descriptor_heap_type">D3D12_DESCRIPTOR_HEAP_TYPE</a>-typed value that specifies the types of descriptors in the heap.</summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_HEAP_DESC::NumDescriptors">
    <summary>The number of descriptors in the heap.</summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_HEAP_DESC::Flags">
    <summary>A combination of <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_descriptor_heap_flags">D3D12_DESCRIPTOR_HEAP_FLAGS</a>-typed values that are combined by using a bitwise OR operation. The resulting value specifies options for the heap.</summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_HEAP_DESC::NodeMask">
    <summary>For single-adapter operation, set this to zero.
            If there are multiple adapter nodes, set a bit to identify the node (one of the device's physical adapters) to which the descriptor heap applies.
            Each bit in the mask corresponds to a single node.
            Only one bit must be set.
            See <a href="https://docs.microsoft.com/windows/win32/direct3d12/multi-engine">Multi-adapter systems</a>.</summary>
  </comment>
  <comment id="ID3D12Device::MakeResident">
    <summary>
      <para>Makes objects resident for the device.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-makeresident" /></para>
      <param name="NumObjects">The number of objects  in the <i>ppObjects</i> array to make resident for the device.</param>
      <param name="ppObjects">A pointer to a memory block that contains an array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12pageable">ID3D12Pageable</a> interface pointers for the objects.
          

Even though most D3D12 objects inherit from <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12pageable">ID3D12Pageable</a>, residency changes are only supported on the following objects:
Descriptor Heaps, Heaps, Committed Resources, and Query Heaps</param>
    </summary>
  </comment>
  <comment id="D3D12_ELEMENTS_LAYOUT">
    <summary>
      <para>Describes how the locations of elements are identified.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_elements_layout" /></para>
    </summary>
  </comment>
  <comment id="D3D12_ELEMENTS_LAYOUT::D3D12_ELEMENTS_LAYOUT_ARRAY">
    <summary>For a data set of <i>n</i> elements, the pointer parameter points to the start of <i>n</i> elements in memory.</summary>
  </comment>
  <comment id="D3D12_ELEMENTS_LAYOUT::D3D12_ELEMENTS_LAYOUT_ARRAY_OF_POINTERS">
    <summary>For a data set of <i>n</i> elements, the pointer parameter points to an array of <i>n</i> pointers in memory, each pointing to an individual element of the set.</summary>
  </comment>
  <comment id="D3D12_TILED_RESOURCE_COORDINATE">
    <summary>
      <para>Describes the coordinates of a tiled resource.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_tiled_resource_coordinate" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TILED_RESOURCE_COORDINATE::X">
    <summary>The x-coordinate of the tiled resource.</summary>
  </comment>
  <comment id="D3D12_TILED_RESOURCE_COORDINATE::Y">
    <summary>The y-coordinate of the tiled resource.</summary>
  </comment>
  <comment id="D3D12_TILED_RESOURCE_COORDINATE::Z">
    <summary>The z-coordinate of the tiled resource.</summary>
  </comment>
  <comment id="D3D12_TILED_RESOURCE_COORDINATE::Subresource">
    <summary>The index of the subresource for the tiled resource.

For mipmaps that use nonstandard tiling, or are packed, or both use nonstandard tiling and are packed, any subresource value that indicates any of the packed mipmaps all refer to the same tile. Additionally, the X coordinate is used to indicate a tile within the packed mip region, rather than a logical region of a single subresource. The Y and Z coordinates must be zero.</summary>
  </comment>
  <comment id="D3D12_VIDEO_SIZE_RANGE">
    <summary>
      <para>Describes the range of supported sizes for a video scaler.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_video_size_range" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_SIZE_RANGE::MaxWidth">
    <summary>The largest output width to which content can be scaled.  The largest value allowed is <b>D3D12\_REQ\_TEXTURE2D\_U\_OR\_V\_DIMENSION</b> (16384).</summary>
  </comment>
  <comment id="D3D12_VIDEO_SIZE_RANGE::MaxHeight">
    <summary>The largest output height to which content can be scaled.  The largest value allowed is <b>D3D12\_REQ\_TEXTURE2D\_U\_OR\_V\_DIMENSION</b> (16384).</summary>
  </comment>
  <comment id="D3D12_VIDEO_SIZE_RANGE::MinWidth">
    <summary>The smallest output width to which content can be scaled. The smallest allowed value is 1.</summary>
  </comment>
  <comment id="D3D12_VIDEO_SIZE_RANGE::MinHeight">
    <summary>The smallest output height to which content can be scaled. The smallest allowed value is 1.</summary>
  </comment>
  <comment id="ID3D12Device::CreateCommandSignature">
    <summary>
      <para>This method creates a command signature.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createcommandsignature" /></para>
      <param name="pDesc">Describes the command signature to be created with the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_command_signature_desc">D3D12_COMMAND_SIGNATURE_DESC</a> structure.</param>
      <param name="pRootSignature">Specifies the  <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12rootsignature">ID3D12RootSignature</a> that the command signature applies to.
          

The root signature is required if any of the commands in the signature will update bindings on the pipeline. If the only command present is a draw or dispatch, the root signature parameter can be set to NULL.</param>
      <param name="riid">The globally unique identifier (<b>GUID</b>) for the command signature interface (<a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12commandsignature">ID3D12CommandSignature</a>).
            The <b>REFIID</b>, or <b>GUID</b>, of the interface to the command signature can be obtained by using the __uuidof() macro.
            For example, __uuidof(<b>ID3D12CommandSignature</b>) will get the <b>GUID</b> of the interface to a command signature.</param>
      <param name="ppvCommandSignature">Specifies a pointer, that on successful completion of the method will point to the created command signature (<a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12commandsignature">ID3D12CommandSignature</a>).</param>
    </summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS">
    <summary>
      <para>Describes the clear value to which resource(s) should be cleared at the beginning of a render pass.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_render_pass_beginning_access_clear_parameters" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_BEGINNING_ACCESS_CLEAR_PARAMETERS::ClearValue">
    <summary>A  <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_clear_value">D3D12_CLEAR_VALUE</a>. The clear value to which the resource(s) should be cleared.</summary>
  </comment>
  <comment id="ID3D12InfoQueue::AddApplicationMessage">
    <summary>
      <para>Adds a user-defined message to the message queue and sends that message to debug output.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-addapplicationmessage" /></para>
      <param name="Severity">Severity of a message.</param>
      <param name="pDescription">Specifies the message string.</param>
    </summary>
  </comment>
  <comment id="D3D12_FILTER_REDUCTION_TYPE">
    <summary>
      <para>Specifies the type of filter reduction.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_filter_reduction_type" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FILTER_REDUCTION_TYPE::D3D12_FILTER_REDUCTION_TYPE_STANDARD">
    <summary>The filter type is standard.</summary>
  </comment>
  <comment id="D3D12_FILTER_REDUCTION_TYPE::D3D12_FILTER_REDUCTION_TYPE_COMPARISON">
    <summary>The filter type is comparison.</summary>
  </comment>
  <comment id="D3D12_FILTER_REDUCTION_TYPE::D3D12_FILTER_REDUCTION_TYPE_MINIMUM">
    <summary>The filter type is minimum.</summary>
  </comment>
  <comment id="D3D12_FILTER_REDUCTION_TYPE::D3D12_FILTER_REDUCTION_TYPE_MAXIMUM">
    <summary>The filter type is maximum.</summary>
  </comment>
  <comment id="D3D12_GPU_VIRTUAL_ADDRESS_RANGE">
    <summary>
      <para>Represents a GPU virtual address range.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_gpu_virtual_address_range" /></para>
    </summary>
  </comment>
  <comment id="D3D12_GPU_VIRTUAL_ADDRESS_RANGE::StartAddress">
    <summary>The beginning of the virtual address range.</summary>
  </comment>
  <comment id="D3D12_GPU_VIRTUAL_ADDRESS_RANGE::SizeInBytes">
    <summary>The size of the virtual address range, in bytes.</summary>
  </comment>
  <comment id="D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION">
    <summary>
      <para>This subobject is unsupported in the current release.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_dxil_subobject_to_exports_association" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION::NumExports">
    <summary>Size of the <i>pExports</i> array.  If 0, this is being explicitly defined as a default association.  Another way to define a default association is to omit this subobject association for that subobject completely.</summary>
  </comment>
  <comment id="D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION::pExports">
    <summary>The array of exports with which the subobject is associated.</summary>
  </comment>
  <comment id="D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS">
    <summary>
      <para>Specifies how GPU-Based Validation handles patched pipeline states during ID3D12Device::CreateGraphicsPipelineState and ID3D12Device::CreateComputePipelineState.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/ne-d3d12sdklayers-d3d12_gpu_based_validation_pipeline_state_create_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS::D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_NONE">
    <summary>This is the default value.  Indicates no patching of pipeline states should be done during PSO creation.  Instead PSO’s are patched on first use in a command list.  This can help to reduce the up-front cost of PSO creation but may instead slow down command list recording until a steady-state is reached.</summary>
  </comment>
  <comment id="D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS::D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_TRACKING_ONLY_SHADERS">
    <summary>Indicates that state-tracking GPU-Based Validation PSO’s should be created along with the original PSO at create time.</summary>
  </comment>
  <comment id="D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS::D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_UNGUARDED_VALIDATION_SHADERS">
    <summary>Indicates that unguarded GPU-Based Validation PSO’s should be created along with the original PSO at create time.</summary>
  </comment>
  <comment id="D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS::D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_FRONT_LOAD_CREATE_GUARDED_VALIDATION_SHADERS">
    <summary>Indicates that guarded GPU-Based Validation PSO’s should be created along with the original PSO at create time.</summary>
  </comment>
  <comment id="D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS::D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS_VALID_MASK">
    <summary>Internal use only.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::SOSetTargets">
    <summary>
      <para>Sets the stream output buffer views.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-sosettargets" /></para>
      <param name="StartSlot">Index into the device's zero-based array to begin setting stream output buffers.</param>
      <param name="NumViews">The number of entries in the <i>pViews</i> array.</param>
      <param name="pViews">Specifies an array of  <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_stream_output_buffer_view">D3D12_STREAM_OUTPUT_BUFFER_VIEW</a> structures.</param>
    </summary>
  </comment>
  <comment id="D3D12_HEAP_PROPERTIES">
    <summary>
      <para>Describes heap properties.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_heap_properties" /></para>
    </summary>
  </comment>
  <comment id="D3D12_HEAP_PROPERTIES::Type">
    <summary>A <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_heap_type">D3D12_HEAP_TYPE</a>-typed value that specifies the type of heap.</summary>
  </comment>
  <comment id="D3D12_HEAP_PROPERTIES::CPUPageProperty">
    <summary>A <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_cpu_page_property">D3D12_CPU_PAGE_PROPERTY</a>-typed value that specifies the CPU-page properties for the heap.</summary>
  </comment>
  <comment id="D3D12_HEAP_PROPERTIES::MemoryPoolPreference">
    <summary>A <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_memory_pool">D3D12_MEMORY_POOL</a>-typed value that specifies the memory pool for the heap.</summary>
  </comment>
  <comment id="D3D12_HEAP_PROPERTIES::CreationNodeMask">
    <summary>For multi-adapter operation, this indicates the node where the resource should be created.

Exactly one bit of this UINT must be set. See <a href="https://docs.microsoft.com/windows/win32/direct3d12/multi-engine">Multi-adapter systems</a>.

Passing zero is equivalent to passing one, in order to simplify the usage of single-GPU adapters.</summary>
  </comment>
  <comment id="D3D12_HEAP_PROPERTIES::VisibleNodeMask">
    <summary>For multi-adapter operation, this indicates the set of nodes where the resource is visible.

<i>VisibleNodeMask</i> must have the same bit set that is set in <i>CreationNodeMask</i>. <i>VisibleNodeMask</i> can <i>also</i> have additional bits set for cross-node resources, but doing so can potentially reduce performance for resource accesses, so you should do so only when needed.

Passing zero is equivalent to passing one, in order to simplify the usage of single-GPU adapters.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE">
    <summary>
      <para>Describes the allocation size of a video decoder heap.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_feature_data_video_decoder_heap_size" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE::VideoDecoderHeapDesc">
    <summary>A <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_decoder_heap_desc.md">D3D12_VIDEO_DECODER_HEAP_DESC</a> describing a <a href="https://docs.microsoft.comnn-d3d12video-id3d12videodecoderheap.md">ID3D12VideoDecoderHeap</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE::MemoryPoolL0Size">
    <summary>The allocation size of the video decoder heap in the L0 memory pool. L0 is the physical system memory pool. When the adapter is discrete/NUMA, this pool has greater bandwidth for the CPU and less bandwidth for the GPU. When the adapter is UMA, this pool is the only one which is valid. For more information, see <a href="https://docs.microsoft.com/windows/win32/direct3d12/residency">Residency</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODER_HEAP_SIZE::MemoryPoolL1Size">
    <summary>The allocation size of the video decoder heap in the L1 memory pool. L1 is typically known as the physical video memory pool. L1 is only available when the adapter is discrete/NUMA, and has greater bandwidth for the GPU and cannot even be accessed by the CPU. When the adapter is UMA, this pool is not available. For more information, see <a href="https://docs.microsoft.com/windows/win32/direct3d12/residency">Residency</a>.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_GEOMETRY_FLAGS">
    <summary>
      <para>Specifies flags for raytracing geometry in a D3D12_RAYTRACING_GEOMETRY_DESC structure.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_raytracing_geometry_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RAYTRACING_GEOMETRY_FLAGS::D3D12_RAYTRACING_GEOMETRY_FLAG_NONE">
    <summary>No options specified.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_GEOMETRY_FLAGS::D3D12_RAYTRACING_GEOMETRY_FLAG_OPAQUE">
    <summary>When rays encounter this geometry, the geometry acts as if no any hit shader is present.  It is recommended that apps use this flag liberally, as it can enable important ray-processing optimizations.  Note that this behavior can be overridden on a per-instance basis with <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_raytracing_instance_flags">D3D12_RAYTRACING_INSTANCE_FLAGS</a> and on a per-ray basis using ray flags in <b>TraceRay</b>.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_GEOMETRY_FLAGS::D3D12_RAYTRACING_GEOMETRY_FLAG_NO_DUPLICATE_ANYHIT_INVOCATION">
    <summary>By default, the system is free to trigger an any hit shader more than once for a given ray-primitive intersection. This flexibility helps improve the traversal efficiency of acceleration structures in certain cases.  For instance, if the acceleration structure is implemented internally with bounding volumes, the implementation may find it beneficial to store relatively long triangles in multiple bounding boxes rather than a larger single box. However, some application use cases require that intersections be reported to the any hit shader at most once. This flag enables that guarantee for the given geometry, potentially with some performance impact.

This flag applies to all geometry types.</summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS">
    <summary>
      <para>Describes the subresources involved in resolving at the conclusion of a render pass.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_render_pass_ending_access_resolve_subresource_parameters" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS::SrcSubresource">
    <summary>A <b>UINT</b>. The source subresource.</summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS::DstSubresource">
    <summary>A <b>UINT</b>. The destination subresource.</summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS::DstX">
    <summary>A <b>UINT</b>. The x coordinate within the destination subresource.</summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS::DstY">
    <summary>A <b>UINT</b>. The y coordinate within the destination subresource.</summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS::SrcRect">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/direct3d12/d3d12-rect">D3D12_RECT</a>. The rectangle within the source subresource.</summary>
  </comment>
  <comment id="D3D12_PARAMETER_DESC">
    <summary>
      <para>Describes a function parameter.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/ns-d3d12shader-d3d12_parameter_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_PARAMETER_DESC::Name">
    <summary>The name of the function parameter.</summary>
  </comment>
  <comment id="D3D12_PARAMETER_DESC::SemanticName">
    <summary>The HLSL <a href="https://docs.microsoft.com/windows/desktop/direct3dhlsl/dx-graphics-hlsl-semantics">semantic</a> that is associated with this function parameter. This name includes the index, for example, SV_Target[n].</summary>
  </comment>
  <comment id="D3D12_PARAMETER_DESC::Type">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_shader_variable_type">D3D_SHADER_VARIABLE_TYPE</a>-typed value that identifies the variable type for the parameter.</summary>
  </comment>
  <comment id="D3D12_PARAMETER_DESC::Class">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_shader_variable_class">D3D_SHADER_VARIABLE_CLASS</a>-typed value that identifies the variable class for the parameter as one of scalar, vector, matrix, object, and so on.</summary>
  </comment>
  <comment id="D3D12_PARAMETER_DESC::Rows">
    <summary>The number of rows for a matrix parameter.</summary>
  </comment>
  <comment id="D3D12_PARAMETER_DESC::Columns">
    <summary>The number of columns for a matrix parameter.</summary>
  </comment>
  <comment id="D3D12_PARAMETER_DESC::InterpolationMode">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_interpolation_mode">D3D_INTERPOLATION_MODE</a>-typed value that identifies the interpolation mode for the parameter.</summary>
  </comment>
  <comment id="D3D12_PARAMETER_DESC::Flags">
    <summary>A combination of <a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_parameter_flags">D3D_PARAMETER_FLAGS</a>-typed values that are combined by using a bitwise OR operation. The resulting value specifies semantic flags for the parameter.</summary>
  </comment>
  <comment id="D3D12_PARAMETER_DESC::FirstInRegister">
    <summary>The first input register for this parameter.</summary>
  </comment>
  <comment id="D3D12_PARAMETER_DESC::FirstInComponent">
    <summary>The first input register component for this parameter.</summary>
  </comment>
  <comment id="D3D12_PARAMETER_DESC::FirstOutRegister">
    <summary>The first output register for this parameter.</summary>
  </comment>
  <comment id="D3D12_PARAMETER_DESC::FirstOutComponent">
    <summary>The first output register component for this parameter.</summary>
  </comment>
  <comment id="D3D12_INPUT_ELEMENT_DESC">
    <summary>
      <para>Describes a single element for the input-assembler stage of the graphics pipeline.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_input_element_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_INPUT_ELEMENT_DESC::SemanticName">
    <summary>The HLSL semantic associated with this element in a shader input-signature.</summary>
  </comment>
  <comment id="D3D12_INPUT_ELEMENT_DESC::SemanticIndex">
    <summary>The semantic index for the element. A semantic index modifies a semantic, with an integer index number. A semantic index is only needed in a 
        case where there is more than one element with the same semantic. For example, a 4x4 matrix would have four components each with the semantic 
        name <b>matrix</b>, however each of the four component would have different semantic indices (0, 1, 2, and 3).</summary>
  </comment>
  <comment id="D3D12_INPUT_ELEMENT_DESC::Format">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>-typed value that specifies the format of the element data.</summary>
  </comment>
  <comment id="D3D12_INPUT_ELEMENT_DESC::InputSlot">
    <summary>An integer value that identifies the input-assembler. For more info, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d10-graphics-programming-guide-input-assembler-stage-getting-started">Input Slots</a>. Valid values are between 0 and 15.</summary>
  </comment>
  <comment id="D3D12_INPUT_ELEMENT_DESC::AlignedByteOffset">
    <summary>Optional. Offset, in bytes, to this element from the start of the vertex. Use D3D12_APPEND_ALIGNED_ELEMENT (0xffffffff) for convenience to define the current element directly 
        after the previous one, including any packing if necessary.</summary>
  </comment>
  <comment id="D3D12_INPUT_ELEMENT_DESC::InputSlotClass">
    <summary>A value that identifies the input data class for a single input slot.</summary>
  </comment>
  <comment id="D3D12_INPUT_ELEMENT_DESC::InstanceDataStepRate">
    <summary>The number of instances to draw using the same per-instance data before advancing in the buffer by one element. This value must be 0 for an 
        element that contains per-vertex data (the slot class is set to the D3D12_INPUT_PER_VERTEX_DATA member of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_input_classification">D3D12_INPUT_CLASSIFICATION</a>).</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC">
    <summary>
      <para>Describes the space requirement for acceleration structure after compaction.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_raytracing_acceleration_structure_postbuild_info_compacted_size_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC::CompactedSizeInBytes">
    <summary>The space requirement for acceleration structure after compaction.

It is guaranteed that a compacted acceleration structure doesn’t consume more space than a non-compacted acceleration structure.

Pre-compaction, it is guaranteed that the size requirements reported by <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12device5-getraytracingaccelerationstructureprebuildinfo">GetRaytracingAccelerationStructurePrebuildInfo</a> for a given build configuration (triangle counts etc.) will be sufficient to store any acceleration structure whose build inputs are reduced (e.g. reducing triangle counts).  This non-increasing property for smaller builds does not apply post-compaction, however.  In other words, it is not guaranteed that having fewer items in an acceleration structure means it compresses to a smaller size than compressing an acceleration structure with more items.</summary>
  </comment>
  <comment id="ID3D12FunctionReflection::GetFunctionParameter">
    <summary>
      <para>Gets the function parameter reflector.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12functionreflection-getfunctionparameter" /></para>
      <param name="ParameterIndex">The zero-based index of the function parameter reflector to retrieve.</param>
    </summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_RANGE_TYPE">
    <summary>
      <para>Specifies a range so that, for example, if part of a descriptor table has 100 shader-resource views (SRVs) that range can be declared in one entry rather than 100.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_descriptor_range_type" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_RANGE_TYPE::D3D12_DESCRIPTOR_RANGE_TYPE_SRV">
    <summary>Specifies a range of SRVs.</summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_RANGE_TYPE::D3D12_DESCRIPTOR_RANGE_TYPE_UAV">
    <summary>Specifies a range of unordered-access views (UAVs).</summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_RANGE_TYPE::D3D12_DESCRIPTOR_RANGE_TYPE_CBV">
    <summary>Specifies a range of constant-buffer views (CBVs).</summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_RANGE_TYPE::D3D12_DESCRIPTOR_RANGE_TYPE_SAMPLER">
    <summary>Specifies a range of samplers.</summary>
  </comment>
  <comment id="ID3D12Fence">
    <summary>
      <para>Represents a fence, an object used for synchronization of the CPU and one or more GPUs.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12fence" /></para>
    </summary>
  </comment>
  <comment id="ID3D12Device1">
    <summary>
      <para>Represents a virtual adapter, and expands on the range of methods provided by ID3D12Device.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12device1" /></para>
    </summary>
  </comment>
  <comment id="D3D12_SHADER_BUFFER_DESC">
    <summary>
      <para>Describes a shader constant-buffer.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/ns-d3d12shader-d3d12_shader_buffer_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_SHADER_BUFFER_DESC::Name">
    <summary>The name of the buffer.</summary>
  </comment>
  <comment id="D3D12_SHADER_BUFFER_DESC::Type">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_cbuffer_type">D3D_CBUFFER_TYPE</a>-typed value that indicates the intended use of the constant data.</summary>
  </comment>
  <comment id="D3D12_SHADER_BUFFER_DESC::Variables">
    <summary>The number of unique variables.</summary>
  </comment>
  <comment id="D3D12_SHADER_BUFFER_DESC::Size">
    <summary>The size of the buffer, in bytes.</summary>
  </comment>
  <comment id="D3D12_SHADER_BUFFER_DESC::uFlags">
    <summary>A combination of <a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_shader_cbuffer_flags">D3D_SHADER_CBUFFER_FLAGS</a>-typed values that are combined by using a bitwise OR operation. The resulting value specifies properties for the shader constant-buffer.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_AABB">
    <summary>
      <para>Represents an axis-aligned bounding box (AABB) used as raytracing geometry.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_raytracing_aabb" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RAYTRACING_AABB::MinX">
    <summary>The minimum X coordinate of the box.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_AABB::MinY">
    <summary>The minimum Y coordinate of the box.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_AABB::MinZ">
    <summary>The minimum Z coordinate of the box.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_AABB::MaxX">
    <summary>The maximum X coordinate of the box.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_AABB::MaxY">
    <summary>The maximum Y coordinate of the box.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_AABB::MaxZ">
    <summary>The maximum Z coordinate of the box.</summary>
  </comment>
  <comment id="ID3D12InfoQueue::ClearRetrievalFilter">
    <summary>
      <para>Remove a retrieval filter from the top of the retrieval-filter stack.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-clearretrievalfilter" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_EXTENSION_COMMAND_INFO">
    <summary>
      <para>Describes a video extension command.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_video_extension_command_info" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_EXTENSION_COMMAND_INFO::CommandId">
    <summary>The unique identifier for the video extension command.</summary>
  </comment>
  <comment id="D3D12_VIDEO_EXTENSION_COMMAND_INFO::Name">
    <summary>A pointer to a wide string containing the name of the command.</summary>
  </comment>
  <comment id="D3D12_VIDEO_EXTENSION_COMMAND_INFO::CommandListSupportFlags">
    <summary>A member of the <a href="https://docs.microsoft.com../d3d12/ne-d3d12-d3d12_command_list_support_flags.md">D3D12_COMMAND_LIST_SUPPORT_FLAGS</a> enumeration.  Indicates the video command queue that the video extension targets. Only one value from the enumeration can be set.</summary>
  </comment>
  <comment id="ID3D12Device2::CreatePipelineState">
    <summary>
      <para>Creates a pipeline state object from a pipeline state stream description.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device2-createpipelinestate" /></para>
      <param name="pDesc">The address of a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_pipeline_state_stream_desc">D3D12_PIPELINE_STATE_STREAM_DESC</a> structure that describes the pipeline state.</param>
      <param name="riid">The globally unique identifier (<b>GUID</b>) for the pipeline state interface (<a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12pipelinestate">ID3D12PipelineState</a>).

The <b>REFIID</b>, or <b>GUID</b>, of the interface to the pipeline state can be obtained by using the __uuidof() macro. For example, __uuidof(ID3D12PipelineState) will get the <b>GUID</b> of the interface to a pipeline state.</param>
      <param name="ppPipelineState"><a href="https://docs.microsoft.com/visualstudio/code-quality/annotating-function-parameters-and-return-values?view=vs-2015">SAL</a>: <c>_COM_Outptr_</c>

A pointer to a memory block that receives a pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12pipelinestate">ID3D12PipelineState</a> interface for the pipeline state object.

The pipeline state object is an immutable state object. It contains no methods.</param>
    </summary>
  </comment>
  <comment id="D3D12_INFO_QUEUE_FILTER">
    <summary>
      <para>Debug message filter; contains a lists of message types to allow or deny.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/ns-d3d12sdklayers-d3d12_info_queue_filter" /></para>
    </summary>
  </comment>
  <comment id="D3D12_INFO_QUEUE_FILTER::AllowList">
    <summary>Specifies types of messages that you want to allow. See <a href="https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ns-d3d12sdklayers-d3d12_info_queue_filter_desc">D3D12_INFO_QUEUE_FILTER_DESC</a>.</summary>
  </comment>
  <comment id="D3D12_INFO_QUEUE_FILTER::DenyList">
    <summary>Specifies types of messages that you want to deny.</summary>
  </comment>
  <comment id="D3D12_TEX1D_ARRAY_SRV">
    <summary>
      <para>Describes the subresources from an array of 1D textures to use in a shader-resource view.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_tex1d_array_srv" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TEX1D_ARRAY_SRV::MostDetailedMip">
    <summary>Index of the most detailed mipmap level to use; this number is between 0 and <b>MipLevels</b> (from the original Texture1D for which <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12device-createshaderresourceview">ID3D12Device::CreateShaderResourceView</a> creates a view) -1.</summary>
  </comment>
  <comment id="D3D12_TEX1D_ARRAY_SRV::MipLevels">
    <summary>The maximum number of mipmap levels for the view of the texture. See the remarks in <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tex1d_srv">D3D12_TEX1D_SRV</a>.

Set to -1 to indicate all the mipmap levels from <b>MostDetailedMip</b> on down to least detailed.</summary>
  </comment>
  <comment id="D3D12_TEX1D_ARRAY_SRV::FirstArraySlice">
    <summary>The index of the first texture to use in an array of textures.</summary>
  </comment>
  <comment id="D3D12_TEX1D_ARRAY_SRV::ArraySize">
    <summary>Number of textures in the array.</summary>
  </comment>
  <comment id="D3D12_TEX1D_ARRAY_SRV::ResourceMinLODClamp">
    <summary>A value to clamp sample LOD values to. For example, if you specify 2.0f for the clamp value, you ensure that no individual sample accesses a mip level less than 2.0f.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::ClearRenderTargetView">
    <summary>
      <para>Sets all the elements in a render target to one value.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-clearrendertargetview" /></para>
      <param name="RenderTargetView">Specifies a D3D12_CPU_DESCRIPTOR_HANDLE structure that describes the CPU descriptor handle that represents the start of the heap for the render target to be cleared.</param>
      <param name="ColorRGBA">A 4-component array that represents the color to fill the render target with.</param>
      <param name="NumRects">The number of rectangles in the array that the <i>pRects</i> parameter specifies.</param>
      <param name="pRects">An array of <b>D3D12_RECT</b> structures for the rectangles in the resource view to clear. If <b>NULL</b>, <b>ClearRenderTargetView</b> clears the entire resource view.</param>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT">
    <summary>
      <para>Retrieves video extension command support using command-defined input and output structures.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_feature_data_video_extension_command_support" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT::NodeIndex">
    <summary>For single GPU operation, set this to zero. If there are multiple GPU nodes, set a bit to identify the node (the device's physical adapter) to which the command queue applies. Each bit in the mask corresponds to a single node. Only 1 bit may be set.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT::CommandId">
    <summary>The unique identifier for the video extension command for which support is queried.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT::pInputData">
    <summary>Input data for the capability query allocated by the caller with a size of <i>InputDataSizeInBytes</i>.  This struct is enumerable as the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_extension_command_parameter_stage.md">D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CAPS_INPUT</a> parameter stage.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT::InputDataSizeInBytes">
    <summary>The byte size of the input data allocation.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT::pOutputData">
    <summary>Output data for the capability query allocated by the caller with a size of <i>OutputDataSizeInBytes</i>.  This struct is enumerable as the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_extension_command_parameter_stage.md">D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CAPS_OUTPUT</a> parameter stage.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SUPPORT::OutputDataSizeInBytes">
    <summary>The byte size of the output data allocation.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT">
    <summary>
      <para>Retrieves support information for video decoding.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_feature_data_video_decode_support" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT::NodeIndex">
    <summary>For single GPU operation, set this to zero. If there are multiple GPU nodes, set a bit to identify the node (the device's physical adapter) to which the command queue applies. Each bit in the mask corresponds to a single node. Only 1 bit may be set.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT::Configuration">
    <summary>A <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_decode_configuration.md">D3D12\_VIDEO\_DECODE\_CONFIGURATION</a> structure specifying the decode profile, bitstream encryption, and interlace type of the source stream.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT::Width">
    <summary>The decode width of the source stream.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT::Height">
    <summary>The decode height of the source stream</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT::DecodeFormat">
    <summary>The <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI\_FORMAT</a> to use as the decode format.  This format is the output format if no decoder conversion is specified.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT::FrameRate">
    <summary>The frame rate of the video format. A value of 0 means the frame rate is unknown.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT::BitRate">
    <summary>The average bits per second data compression rate for the compressed video stream.  This information is used by the driver to determine whether the video can be decoded in real-time. A value of 0 means the bit rate is unknown.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT::SupportFlags">
    <summary>A combination of values from the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_decode_support_flags.md">D3D12\_VIDEO\_DECODE\_SUPPORT\_FLAGS</a> enumeration indicating the support for video decoding. This value is populated by the call to <b>ID3D12Device::CheckFeatureSupport</b>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT::ConfigurationFlags">
    <summary>A combination of values from the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_decode_configuration_flags.md">D3D12\_VIDEO\_DECODE\_CONFIGURATION\_FLAGS</a> eumeration describing the video decode configuration. This value is populated by the call to <b>ID3D12Device::CheckFeatureSupport</b>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT::DecodeTier">
    <summary>A member of the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_decode_tier.md">D3D12\_VIDEO\_DECODE\_TIER</a> enumeration specifying the decoding tier of a hardware video decoder.</summary>
  </comment>
  <comment id="ID3D12InfoQueue::GetRetrievalFilterStackSize">
    <summary>
      <para>Get the size of the retrieval-filter stack in bytes.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getretrievalfilterstacksize" /></para>
    </summary>
  </comment>
  <comment id="ID3D12ShaderReflection::GetPatchConstantParameterDesc">
    <summary>
      <para>Gets a patch-constant parameter description for a shader.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getpatchconstantparameterdesc" /></para>
      <param name="ParameterIndex">A zero-based parameter index.</param>
      <param name="pDesc">A pointer to a shader-input-signature description. See <a href="https://docs.microsoft.com/windows/win32/api/d3d12shader/ns-d3d12shader-d3d12_signature_parameter_desc">D3D12_SIGNATURE_PARAMETER_DESC</a>.</param>
    </summary>
  </comment>
  <comment id="ID3D12Debug1::SetEnableSynchronizedCommandQueueValidation">
    <summary>
      <para>Enables or disables dependent command queue synchronization when using a D3D12 device with the debug layer enabled.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12debug1-setenablesynchronizedcommandqueuevalidation" /></para>
      <param name="Enable">TRUE to enable Dependent Command Queue Synchronization, otherwise FALSE.</param>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_FORMAT_INFO">
    <summary>
      <para>Describes a DXGI data format and plane count.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_feature_data_format_info" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_FORMAT_INFO::Format">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>-typed value for the format to return info about.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_FORMAT_INFO::PlaneCount">
    <summary>The number of planes to provide information about.</summary>
  </comment>
  <comment id="ID3D12InfoQueue::AddMessage">
    <summary>
      <para>Adds a debug message to the message queue and sends that message to debug output.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-addmessage" /></para>
      <param name="Category">Category of a message.</param>
      <param name="Severity">Severity of a message.</param>
      <param name="ID">Unique identifier of a message.</param>
      <param name="pDescription">User-defined message.</param>
    </summary>
  </comment>
  <comment id="ID3D12CommandQueue::BeginEvent">
    <summary>
      <para>Not intended to be called directly.  Use the PIX event runtime to insert events into a command queue.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12commandqueue-beginevent" /></para>
      <param name="Metadata">Internal.</param>
      <param name="pData">Internal.</param>
      <param name="Size">Internal.</param>
    </summary>
  </comment>
  <comment id="D3D12_UNORDERED_ACCESS_VIEW_DESC">
    <summary>
      <para>Describes the subresources from a resource that are accessible by using an unordered-access view.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_unordered_access_view_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_UNORDERED_ACCESS_VIEW_DESC::Format">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>-typed value that specifies the viewing format.</summary>
  </comment>
  <comment id="D3D12_UNORDERED_ACCESS_VIEW_DESC::ViewDimension">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_uav_dimension">D3D12_UAV_DIMENSION</a>-typed value that specifies the resource type of the view. This type specifies how the resource will be accessed. This member also determines which _UAV to use in the union below.</summary>
  </comment>
  <comment id="D3D12_UNORDERED_ACCESS_VIEW_DESC::Buffer">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_buffer_uav">D3D12_BUFFER_UAV</a> structure that specifies which buffer elements can be accessed.</summary>
  </comment>
  <comment id="D3D12_UNORDERED_ACCESS_VIEW_DESC::Texture1D">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tex1d_uav">D3D12_TEX1D_UAV</a> structure that specifies the subresources in a 1D texture that can be accessed.</summary>
  </comment>
  <comment id="D3D12_UNORDERED_ACCESS_VIEW_DESC::Texture1DArray">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tex1d_array_uav">D3D12_TEX1D_ARRAY_UAV</a> structure that specifies the subresources in a 1D texture array that can be accessed.</summary>
  </comment>
  <comment id="D3D12_UNORDERED_ACCESS_VIEW_DESC::Texture2D">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tex2d_uav">D3D12_TEX2D_UAV</a> structure that specifies the subresources in a 2D texture that can be accessed.</summary>
  </comment>
  <comment id="D3D12_UNORDERED_ACCESS_VIEW_DESC::Texture2DArray">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tex2d_array_uav">D3D12_TEX2D_ARRAY_UAV</a> structure that specifies the subresources in a 2D texture array that can be accessed.</summary>
  </comment>
  <comment id="D3D12_UNORDERED_ACCESS_VIEW_DESC::Texture3D">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tex3d_uav">D3D12_TEX3D_UAV</a> structure that specifies subresources in a 3D texture that can be accessed.</summary>
  </comment>
  <comment id="ID3D12DeviceRemovedExtendedData">
    <summary>
      <para>Provides runtime access to Device Removed Extended Data (DRED) data.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12deviceremovedextendeddata" /></para>
    </summary>
  </comment>
  <comment id="ID3D12ShaderReflectionVariable">
    <summary>
      <para>This shader-reflection interface provides access to a variable.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nn-d3d12shader-id3d12shaderreflectionvariable" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODER_DESC">
    <summary>
      <para>Describes a ID3D12VideoDecoder.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_video_decoder_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODER_DESC::NodeMask">
    <summary>The node mask specifying the physical adapter on which the video processor will be used. For single GPU operation, set this to zero. If there are multiple GPU nodes, set a bit to identify the node, i.e. the device's physical adapter, to which the command queue applies. Each bit in the mask corresponds to a single node. Only 1 bit may be set.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODER_DESC::Configuration">
    <summary>A <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_decode_configuration.md">D3D12_VIDEO_DECODE_CONFIGURATION</a> structure specifying the configuration of the video decoder.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS">
    <summary>
      <para>Retrieves the maximum number of enabled input streams supported by the video processor.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_feature_data_video_process_max_input_streams" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS::NodeIndex">
    <summary>An integer indicating which physical adapter of the device the operation applies to, in a multi-adapter operation.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_PROCESS_MAX_INPUT_STREAMS::MaxInputStreams">
    <summary>The maximum number of streams that can be enabled for the video processor at the same time.</summary>
  </comment>
  <comment id="ID3D12Debug3::SetGPUBasedValidationFlags">
    <summary>
      <para>This method configures the level of GPU-based validation that the debug device is to perform at runtime.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12debug3-setgpubasedvalidationflags" /></para>
      <param name="Flags">Specifies the level of GPU-based validation to perform at runtime.</param>
    </summary>
  </comment>
  <comment id="D3D12_SHADING_RATE">
    <summary>
      <para>Defines constants that specify the shading rate (for variable-rate shading, or VRS).</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_shading_rate" /></para>
    </summary>
  </comment>
  <comment id="D3D12_SHADING_RATE::D3D12_SHADING_RATE_1X1">
    <summary>Specifies no change to the shading rate.</summary>
  </comment>
  <comment id="D3D12_SHADING_RATE::D3D12_SHADING_RATE_1X2">
    <summary>Specifies that the shading rate should reduce vertical resolution 2x.</summary>
  </comment>
  <comment id="D3D12_SHADING_RATE::D3D12_SHADING_RATE_2X1">
    <summary>Specifies that the shading rate should reduce horizontal resolution 2x.</summary>
  </comment>
  <comment id="D3D12_SHADING_RATE::D3D12_SHADING_RATE_2X2">
    <summary>Specifies that the shading rate should reduce the resolution of both axes 2x.</summary>
  </comment>
  <comment id="D3D12_SHADING_RATE::D3D12_SHADING_RATE_2X4">
    <summary>Specifies that the shading rate should reduce horizontal resolution 2x, and reduce vertical resolution 4x.</summary>
  </comment>
  <comment id="D3D12_SHADING_RATE::D3D12_SHADING_RATE_4X2">
    <summary>Specifies that the shading rate should reduce horizontal resolution 4x, and reduce vertical resolution 2x.</summary>
  </comment>
  <comment id="D3D12_SHADING_RATE::D3D12_SHADING_RATE_4X4">
    <summary>Specifies that the shading rate should reduce the resolution of both axes 4x.</summary>
  </comment>
  <comment id="D3D12_COMMAND_LIST_TYPE">
    <summary>
      <para>Specifies the type of a command list.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_command_list_type" /></para>
    </summary>
  </comment>
  <comment id="D3D12_COMMAND_LIST_TYPE::D3D12_COMMAND_LIST_TYPE_DIRECT">
    <summary>Specifies a command buffer that the GPU can execute. A direct command list doesn't inherit any GPU state.</summary>
  </comment>
  <comment id="D3D12_COMMAND_LIST_TYPE::D3D12_COMMAND_LIST_TYPE_BUNDLE">
    <summary>Specifies a command buffer that can be executed only directly via a direct command list. A bundle command list inherits all GPU state (except for the currently set pipeline state object and primitive topology).</summary>
  </comment>
  <comment id="D3D12_COMMAND_LIST_TYPE::D3D12_COMMAND_LIST_TYPE_COMPUTE">
    <summary>Specifies a command buffer for computing.</summary>
  </comment>
  <comment id="D3D12_COMMAND_LIST_TYPE::D3D12_COMMAND_LIST_TYPE_COPY">
    <summary>Specifies a command buffer for copying.</summary>
  </comment>
  <comment id="D3D12_COMMAND_LIST_TYPE::D3D12_COMMAND_LIST_TYPE_VIDEO_DECODE">
    <summary>Specifies a command buffer for video decoding.</summary>
  </comment>
  <comment id="D3D12_COMMAND_LIST_TYPE::D3D12_COMMAND_LIST_TYPE_VIDEO_PROCESS">
    <summary>Specifies a command buffer for video processing.</summary>
  </comment>
  <comment id="D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER">
    <summary>
      <para>Specifies the level of support for programmable sample positions that's offered by the adapter.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_programmable_sample_positions_tier" /></para>
    </summary>
  </comment>
  <comment id="D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER::D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_NOT_SUPPORTED">
    <summary>Indicates that there's no support for programmable sample positions.</summary>
  </comment>
  <comment id="D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER::D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_1">
    <summary>Indicates that there's tier 1 support for programmable sample positions. In tier 1, a single sample pattern can be specified to repeat for every pixel (<a href="https://docs.microsoft.com/windows/win32/api/d3d12/nf-d3d12-id3d12graphicscommandlist1-setsamplepositions">SetSamplePosition</a> parameter <i>NumPixels</i> = 1) and ResolveSubResource is supported.</summary>
  </comment>
  <comment id="D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER::D3D12_PROGRAMMABLE_SAMPLE_POSITIONS_TIER_2">
    <summary>Indicates that there's tier 2 support for programmable sample positions. In tier 2, four separate sample patterns can be specified for each pixel in a 2x2 grid (<a href="https://docs.microsoft.com/windows/win32/api/d3d12/nf-d3d12-id3d12graphicscommandlist1-setsamplepositions">SetSamplePosition</a> parameter <i>NumPixels</i> = 1) that repeats over the render-target or viewport, aligned on even coordinates .</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::SetGraphicsRootShaderResourceView">
    <summary>
      <para>Sets a CPU descriptor handle for the shader resource in the graphics root signature.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setgraphicsrootshaderresourceview" /></para>
      <param name="RootParameterIndex">The slot number for binding.</param>
      <param name="BufferLocation">The GPU virtual address of the Buffer.
            Textures are not supported. D3D12_GPU_VIRTUAL_ADDRESS is a typedef'd alias of UINT64.</param>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS">
    <summary>
      <para>Specifies the motion estimation vector precision that a video encoder supports.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ne-d3d12video-d3d12_video_motion_estimator_vector_precision_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS::D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAG_NONE">
    <summary>Vector precision is not supported by the encoder.</summary>
  </comment>
  <comment id="D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS::D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAG_QUARTER_PEL">
    <summary>The vector precision is quarter-pixel motion.</summary>
  </comment>
  <comment id="D3D12_CONSERVATIVE_RASTERIZATION_TIER">
    <summary>
      <para>Identifies the tier level of conservative rasterization.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_conservative_rasterization_tier" /></para>
    </summary>
  </comment>
  <comment id="D3D12_CONSERVATIVE_RASTERIZATION_TIER::D3D12_CONSERVATIVE_RASTERIZATION_TIER_NOT_SUPPORTED">
    <summary>Conservative rasterization is not supported.</summary>
  </comment>
  <comment id="D3D12_CONSERVATIVE_RASTERIZATION_TIER::D3D12_CONSERVATIVE_RASTERIZATION_TIER_1">
    <summary>Tier 1 enforces a maximum 1/2 pixel uncertainty region and does not support post-snap degenerates. This is good for tiled rendering, a texture atlas, light map generation and sub-pixel shadow maps.</summary>
  </comment>
  <comment id="D3D12_CONSERVATIVE_RASTERIZATION_TIER::D3D12_CONSERVATIVE_RASTERIZATION_TIER_2">
    <summary>Tier 2 reduces the maximum uncertainty region to 1/256 and requires post-snap degenerates not be culled. This tier is helpful for CPU-based algorithm acceleration (such as voxelization).</summary>
  </comment>
  <comment id="D3D12_CONSERVATIVE_RASTERIZATION_TIER::D3D12_CONSERVATIVE_RASTERIZATION_TIER_3">
    <summary>Tier 3 maintains a maximum 1/256 uncertainty region and adds support for inner input coverage. Inner input coverage adds the new value <c>SV_InnerCoverage</c> to High Level Shading Language (HLSL). This is a 32-bit scalar integer that can be specified on input to a pixel shader, and represents the underestimated conservative rasterization information (that is, whether a pixel is guaranteed-to-be-fully covered). This tier is helpful for occlusion culling.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_SUB_SAMPLE_MAPPING_BLOCK">
    <summary>
      <para>Defines the encryption byte mapping of sub samples for video decoding.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_video_decode_sub_sample_mapping_block" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_SUB_SAMPLE_MAPPING_BLOCK::ClearSize">
    <summary>This field is unused.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_SUB_SAMPLE_MAPPING_BLOCK::EncryptedSize">
    <summary>This field is unused.</summary>
  </comment>
  <comment id="ID3D12LifetimeOwner">
    <summary>
      <para>Represents an application-defined callback used for being notified of lifetime changes of an object.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12lifetimeowner" /></para>
    </summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::ClearUnorderedAccessViewUint">
    <summary>
      <para>Sets all the elements in a unordered-access view (UAV) to the specified integer values.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-clearunorderedaccessviewuint" /></para>
      <param name="ViewGPUHandleInCurrentHeap">A <a href="https://docs.microsoft.com./ns-d3d12-d3d12_gpu_descriptor_handle.md">D3D12_GPU_DESCRIPTOR_HANDLE</a> that references an initialized descriptor for the unordered-access view (UAV) that is to be cleared. This descriptor must be in a shader-visible descriptor heap, which must be set on the command list via <a href="https://docs.microsoft.comnf-d3d12-id3d12graphicscommandlist-setdescriptorheaps.md">SetDescriptorHeaps</a>.</param>
      <param name="ViewCPUHandle">A <a href="https://docs.microsoft.com./ns-d3d12-d3d12_cpu_descriptor_handle.md">D3D12_CPU_DESCRIPTOR_HANDLE</a> in a non-shader visible descriptor heap that references an initialized descriptor for the unordered-access view (UAV) that is to be cleared.
          
&gt; [!IMPORTANT]
&gt; This descriptor must not be in a shader-visible descriptor heap. This is to allow drivers thath implement the clear as fixed-function hardware (rather than via a dispatch) to efficiently read from the descriptor, as shader-visible heaps may be created in <b>WRITE_BACK</b> memory (similar to <b>D3D12_HEAP_TYPE_UPLOAD</b> heap types), and CPU reads from this type of memory are prohibitively slow.</param>
      <param name="pResource">A pointer to the <a href="https://docs.microsoft.com./nn-d3d12-id3d12resource.md">ID3D12Resource</a> interface that represents the unordered-access-view (UAV) resource to clear.</param>
      <param name="Values">A 4-component array that containing the values to fill the unordered-access-view resource with.</param>
      <param name="NumRects">The number of rectangles in the array that the <i>pRects</i> parameter specifies.</param>
      <param name="pRects">An array of <b>D3D12_RECT</b> structures for the rectangles in the resource view to clear. If <b>NULL</b>, <b>ClearUnorderedAccessViewUint</b> clears the entire resource view.</param>
    </summary>
  </comment>
  <comment id="D3D12_VERSIONED_ROOT_SIGNATURE_DESC">
    <summary>
      <para>Holds any version of a root signature description, and is designed to be used with serialization/deserialization functions.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_versioned_root_signature_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VERSIONED_ROOT_SIGNATURE_DESC::Version">
    <summary>Specifies one member of D3D_ROOT_SIGNATURE_VERSION that determines the contents of the union.</summary>
  </comment>
  <comment id="D3D12_VERSIONED_ROOT_SIGNATURE_DESC::Desc_1_0">
    <summary>Specifies a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_root_signature_desc">D3D12_ROOT_SIGNATURE_DESC</a> (version 1.0).</summary>
  </comment>
  <comment id="D3D12_VERSIONED_ROOT_SIGNATURE_DESC::Desc_1_1">
    <summary>Specifies a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_root_signature_desc1">D3D12_ROOT_SIGNATURE_DESC1</a> (version 1.1).</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_PIPELINE_STATE_DESC">
    <summary>
      <para>Describes a graphics pipeline state object.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_graphics_pipeline_state_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_GRAPHICS_PIPELINE_STATE_DESC::pRootSignature">
    <summary>A pointer to the <a href="https://docs.microsoft.com/windows/win32/api/d3d12/nn-d3d12-id3d12rootsignature">ID3D12RootSignature</a> object.</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_PIPELINE_STATE_DESC::VS">
    <summary>A <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_shader_bytecode">D3D12_SHADER_BYTECODE</a> structure that describes the vertex shader.</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_PIPELINE_STATE_DESC::PS">
    <summary>A <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_shader_bytecode">D3D12_SHADER_BYTECODE</a> structure that describes the pixel shader.</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_PIPELINE_STATE_DESC::DS">
    <summary>A <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_shader_bytecode">D3D12_SHADER_BYTECODE</a> structure that describes the domain shader.</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_PIPELINE_STATE_DESC::HS">
    <summary>A <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_shader_bytecode">D3D12_SHADER_BYTECODE</a> structure that describes the hull shader.</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_PIPELINE_STATE_DESC::GS">
    <summary>A <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_shader_bytecode">D3D12_SHADER_BYTECODE</a> structure that describes the geometry shader.</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_PIPELINE_STATE_DESC::StreamOutput">
    <summary>A <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_stream_output_desc">D3D12_STREAM_OUTPUT_DESC</a> structure that describes a streaming output buffer.</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_PIPELINE_STATE_DESC::BlendState">
    <summary>A <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_blend_desc">D3D12_BLEND_DESC</a> structure that describes the blend state.</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_PIPELINE_STATE_DESC::SampleMask">
    <summary>The sample mask for the blend state.</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_PIPELINE_STATE_DESC::RasterizerState">
    <summary>A <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_rasterizer_desc">D3D12_RASTERIZER_DESC</a> structure that describes the rasterizer state.</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_PIPELINE_STATE_DESC::DepthStencilState">
    <summary>A <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_depth_stencil_desc">D3D12_DEPTH_STENCIL_DESC</a> structure that describes the depth-stencil state.</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_PIPELINE_STATE_DESC::InputLayout">
    <summary>A <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_input_layout_desc">D3D12_INPUT_LAYOUT_DESC</a> structure that describes the input-buffer data for the input-assembler stage.</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_PIPELINE_STATE_DESC::IBStripCutValue">
    <summary>Specifies the properties of the index buffer in a  <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_index_buffer_strip_cut_value">D3D12_INDEX_BUFFER_STRIP_CUT_VALUE</a> structure.</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_PIPELINE_STATE_DESC::PrimitiveTopologyType">
    <summary>A <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_primitive_topology_type">D3D12_PRIMITIVE_TOPOLOGY_TYPE</a>-typed value for the type of primitive, and ordering of the primitive data.</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_PIPELINE_STATE_DESC::NumRenderTargets">
    <summary>The number of render target formats in the  <b>RTVFormats</b> member.</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_PIPELINE_STATE_DESC::RTVFormats">
    <summary>An array of <a href="https://docs.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>-typed values for the render target formats.</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_PIPELINE_STATE_DESC::DSVFormat">
    <summary>A <a href="https://docs.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>-typed value for the depth-stencil format.</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_PIPELINE_STATE_DESC::SampleDesc">
    <summary>A <a href="https://docs.microsoft.com/windows/win32/api/dxgicommon/ns-dxgicommon-dxgi_sample_desc">DXGI_SAMPLE_DESC</a> structure that specifies multisampling parameters.</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_PIPELINE_STATE_DESC::NodeMask">
    <summary>For single GPU operation, set this to zero. If there are multiple GPU nodes, set bits to identify the nodes (the  device's physical adapters) for which the graphics pipeline state is to apply.
            Each bit in the mask corresponds to a single node.
            Refer to <a href="https://docs.microsoft.com/windows/win32/direct3d12/multi-engine">Multi-adapter systems</a>.</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_PIPELINE_STATE_DESC::CachedPSO">
    <summary>A cached pipeline state object, as a <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_cached_pipeline_state">D3D12_CACHED_PIPELINE_STATE</a> structure. pCachedBlob and CachedBlobSizeInBytes may be set to NULL and 0 respectively.</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_PIPELINE_STATE_DESC::Flags">
    <summary>A <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_pipeline_state_flags">D3D12_PIPELINE_STATE_FLAGS</a> enumeration constant such as for "tool debug".</summary>
  </comment>
  <comment id="ID3D12DebugCommandList::GetFeatureMask">
    <summary>
      <para>Returns the debug feature flags that have been set on a command list.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12debugcommandlist-getfeaturemask" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RESOURCE_DIMENSION">
    <summary>
      <para>Identifies the type of resource being used.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_resource_dimension" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RESOURCE_DIMENSION::D3D12_RESOURCE_DIMENSION_UNKNOWN">
    <summary>Resource is of unknown type.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_DIMENSION::D3D12_RESOURCE_DIMENSION_BUFFER">
    <summary>Resource is a buffer.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_DIMENSION::D3D12_RESOURCE_DIMENSION_TEXTURE1D">
    <summary>Resource is a 1D texture.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_DIMENSION::D3D12_RESOURCE_DIMENSION_TEXTURE2D">
    <summary>Resource is a 2D texture.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_DIMENSION::D3D12_RESOURCE_DIMENSION_TEXTURE3D">
    <summary>Resource is a 3D texture.</summary>
  </comment>
  <comment id="D3D12_INDIRECT_ARGUMENT_TYPE">
    <summary>
      <para>Specifies the type of the indirect parameter.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_indirect_argument_type" /></para>
    </summary>
  </comment>
  <comment id="D3D12_INDIRECT_ARGUMENT_TYPE::D3D12_INDIRECT_ARGUMENT_TYPE_DRAW">
    <summary>Indicates the type is a Draw call.</summary>
  </comment>
  <comment id="D3D12_INDIRECT_ARGUMENT_TYPE::D3D12_INDIRECT_ARGUMENT_TYPE_DRAW_INDEXED">
    <summary>Indicates the type is a DrawIndexed call.</summary>
  </comment>
  <comment id="D3D12_INDIRECT_ARGUMENT_TYPE::D3D12_INDIRECT_ARGUMENT_TYPE_DISPATCH">
    <summary>Indicates the type is a Dispatch call.</summary>
  </comment>
  <comment id="D3D12_INDIRECT_ARGUMENT_TYPE::D3D12_INDIRECT_ARGUMENT_TYPE_VERTEX_BUFFER_VIEW">
    <summary>Indicates the type is a vertex buffer view.</summary>
  </comment>
  <comment id="D3D12_INDIRECT_ARGUMENT_TYPE::D3D12_INDIRECT_ARGUMENT_TYPE_INDEX_BUFFER_VIEW">
    <summary>Indicates the type is an index buffer view.</summary>
  </comment>
  <comment id="D3D12_INDIRECT_ARGUMENT_TYPE::D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT">
    <summary>Indicates the type is a constant.</summary>
  </comment>
  <comment id="D3D12_INDIRECT_ARGUMENT_TYPE::D3D12_INDIRECT_ARGUMENT_TYPE_CONSTANT_BUFFER_VIEW">
    <summary>Indicates the type is a constant buffer view (CBV).</summary>
  </comment>
  <comment id="D3D12_INDIRECT_ARGUMENT_TYPE::D3D12_INDIRECT_ARGUMENT_TYPE_SHADER_RESOURCE_VIEW">
    <summary>Indicates the type is a shader resource view (SRV).</summary>
  </comment>
  <comment id="D3D12_INDIRECT_ARGUMENT_TYPE::D3D12_INDIRECT_ARGUMENT_TYPE_UNORDERED_ACCESS_VIEW">
    <summary>Indicates the type is an unordered access view (UAV).</summary>
  </comment>
  <comment id="D3D12_TEX3D_UAV">
    <summary>
      <para>Describes a unordered-access 3D texture resource.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_tex3d_uav" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TEX3D_UAV::MipSlice">
    <summary>The mipmap slice index.</summary>
  </comment>
  <comment id="D3D12_TEX3D_UAV::FirstWSlice">
    <summary>The zero-based index of the first depth slice to be accessed.</summary>
  </comment>
  <comment id="D3D12_TEX3D_UAV::WSize">
    <summary>The number of depth slices.</summary>
  </comment>
  <comment id="D3D12_COMPUTE_PIPELINE_STATE_DESC">
    <summary>
      <para>Describes a compute pipeline state object.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_compute_pipeline_state_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_COMPUTE_PIPELINE_STATE_DESC::pRootSignature">
    <summary>A pointer to the <a href="https://docs.microsoft.com/windows/win32/api/d3d12/nn-d3d12-id3d12rootsignature">ID3D12RootSignature</a> object.</summary>
  </comment>
  <comment id="D3D12_COMPUTE_PIPELINE_STATE_DESC::CS">
    <summary>A <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_shader_bytecode">D3D12_SHADER_BYTECODE</a> structure that describes the compute shader.</summary>
  </comment>
  <comment id="D3D12_COMPUTE_PIPELINE_STATE_DESC::NodeMask">
    <summary>For single GPU operation, set this to zero. If there are multiple GPU nodes, set bits to identify the nodes (the  device's physical adapters) for which the compute pipeline state is to apply.
            Each bit in the mask corresponds to a single node.
            Refer to <a href="https://docs.microsoft.com/windows/win32/direct3d12/multi-engine">Multi-adapter systems</a>.</summary>
  </comment>
  <comment id="D3D12_COMPUTE_PIPELINE_STATE_DESC::CachedPSO">
    <summary>A cached pipeline state object, as a <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_cached_pipeline_state">D3D12_CACHED_PIPELINE_STATE</a> structure. pCachedBlob and CachedBlobSizeInBytes may be set to NULL and 0 respectively.</summary>
  </comment>
  <comment id="D3D12_COMPUTE_PIPELINE_STATE_DESC::Flags">
    <summary>A <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_pipeline_state_flags">D3D12_PIPELINE_STATE_FLAGS</a> enumeration constant such as for "tool debug".</summary>
  </comment>
  <comment id="D3D12_FEATURE">
    <summary>
      <para>Defines constants that specify a Direct3D 12 feature or feature set to query about.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_feature" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE::D3D12_FEATURE_D3D12_OPTIONS">
    <summary>Indicates a query for the level of support for basic Direct3D 12 feature options. The corresponding data structure for this value is <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_feature_data_d3d12_options">D3D12_FEATURE_DATA_D3D12_OPTIONS</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE::D3D12_FEATURE_ARCHITECTURE">
    <summary>Indicates a query for the adapter's architectural details, so that your application can better optimize for certain adapter properties. The corresponding data structure for this value is <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_feature_data_architecture">D3D12_FEATURE_DATA_ARCHITECTURE</a>.

<div class="alert"><b>Note</b>  This value has been superseded by the <b>D3D_FEATURE_DATA_ARCHITECTURE1</b> value. If your application targets Windows 10, version 1703 (Creators' Update) or higher, then use the <b>D3D_FEATURE_DATA_ARCHITECTURE1</b> value instead.</div>
<div> </div></summary>
  </comment>
  <comment id="D3D12_FEATURE::D3D12_FEATURE_FEATURE_LEVELS">
    <summary>Indicates a query for info about the <a href="https://docs.microsoft.com/windows/win32/direct3d11/overviews-direct3d-11-devices-downlevel-intro">feature levels</a> supported. The corresponding data structure for this value is <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_feature_data_feature_levels">D3D12_FEATURE_DATA_FEATURE_LEVELS</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE::D3D12_FEATURE_FORMAT_SUPPORT">
    <summary>Indicates a query for the resources supported by the current graphics driver for a given format. The corresponding data structure for this value is <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_feature_data_format_support">D3D12_FEATURE_DATA_FORMAT_SUPPORT</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE::D3D12_FEATURE_MULTISAMPLE_QUALITY_LEVELS">
    <summary>Indicates a query for the image quality levels for a given format and sample count. The corresponding data structure for this value is <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_feature_data_multisample_quality_levels">D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE::D3D12_FEATURE_FORMAT_INFO">
    <summary>Indicates a query for the DXGI data format. The corresponding data structure for this value is <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_feature_data_format_info">D3D12_FEATURE_DATA_FORMAT_INFO</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE::D3D12_FEATURE_GPU_VIRTUAL_ADDRESS_SUPPORT">
    <summary>Indicates a query for the GPU's virtual address space limitations. The corresponding data structure for this value is <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_feature_data_gpu_virtual_address_support">D3D12_FEATURE_DATA_GPU_VIRTUAL_ADDRESS_SUPPORT</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE::D3D12_FEATURE_SHADER_MODEL">
    <summary>Indicates a query for the supported shader model. The corresponding data structure for this value is <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_feature_data_shader_model">D3D12_FEATURE_DATA_SHADER_MODEL</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE::D3D12_FEATURE_D3D12_OPTIONS1">
    <summary>Indicates a query for the level of support for HLSL 6.0 wave operations. The corresponding data structure for this value is <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_feature_data_d3d12_options1">D3D12_FEATURE_DATA_D3D12_OPTIONS1</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE::D3D12_FEATURE_PROTECTED_RESOURCE_SESSION_SUPPORT">
    <summary>Indicates a query for the level of support for protected resource sessions. The corresponding data structure for this value is <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_feature_data_protected_resource_session_support">D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE::D3D12_FEATURE_ROOT_SIGNATURE">
    <summary>Indicates a query for root signature version support. The corresponding data structure for this value is <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_feature_data_root_signature">D3D12_FEATURE_DATA_ROOT_SIGNATURE</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE::D3D12_FEATURE_ARCHITECTURE1">
    <summary>Indicates a query for each adapter's architectural details, so that your application can better optimize for certain adapter properties. The corresponding data structure for this value is <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_feature_data_architecture1">D3D12_FEATURE_DATA_ARCHITECTURE1</a>.

<div class="alert"><b>Note</b>  This value supersedes the <b>D3D_FEATURE_DATA_ARCHITECTURE</b> value. If your application targets Windows 10, version 1703 (Creators' Update) or higher, then use <b>D3D_FEATURE_DATA_ARCHITECTURE1</b>.</div>
<div> </div></summary>
  </comment>
  <comment id="D3D12_FEATURE::D3D12_FEATURE_D3D12_OPTIONS2">
    <summary>Indicates a query for the level of support for depth-bounds tests and programmable sample positions. The corresponding data structure for this value is <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_feature_data_d3d12_options2">D3D12_FEATURE_DATA_D3D12_OPTIONS2</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE::D3D12_FEATURE_SHADER_CACHE">
    <summary>Indicates a query for the level of support for shader caching. The corresponding data structure for this value is <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_feature_data_shader_cache">D3D12_FEATURE_DATA_SHADER_CACHE</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE::D3D12_FEATURE_COMMAND_QUEUE_PRIORITY">
    <summary>Indicates a query for the adapter's support for prioritization of different command queue types. The corresponding data structure for this value is <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_feature_data_command_queue_priority">D3D12_FEATURE_DATA_COMMAND_QUEUE_PRIORITY</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE::D3D12_FEATURE_D3D12_OPTIONS3">
    <summary>Indicates a query for the level of support for timestamp queries, format-casting, immediate write, view instancing, and barycentrics. The corresponding data structure for this value is <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_feature_data_d3d12_options3">D3D12_FEATURE_DATA_D3D12_OPTIONS3</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE::D3D12_FEATURE_EXISTING_HEAPS">
    <summary>Indicates a query for whether or not the adapter supports creating heaps from existing system memory. The corresponding data structure for this value is <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_feature_data_existing_heaps">D3D12_FEATURE_DATA_EXISTING_HEAPS</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE::D3D12_FEATURE_D3D12_OPTIONS4">
    <summary>Indicates a query for the level of support for 64KB-aligned MSAA textures, cross-API sharing, and native 16-bit shader operations. The corresponding data structure for this value is <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_feature_data_d3d12_options4">D3D12_FEATURE_DATA_D3D12_OPTIONS4</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE::D3D12_FEATURE_SERIALIZATION">
    <summary>Indicates a query for the level of support for heap serialization. The corresponding data structure for this value is <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_feature_data_serialization">D3D12_FEATURE_DATA_SERIALIZATION</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE::D3D12_FEATURE_CROSS_NODE">
    <summary>Indicates a query for the level of support for the sharing of resources between different adapters—for example, multiple GPUs. The corresponding data structure for this value is <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_feature_data_cross_node">D3D12_FEATURE_DATA_CROSS_NODE</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE::D3D12_FEATURE_D3D12_OPTIONS5">
    <summary>Starting with Windows 10, version 1809 (10.0; Build 17763), indicates a query for the level of support for render passes, ray tracing, and shader-resource view tier 3 tiled resources. The corresponding data structure for this value is <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_feature_data_d3d12_options5">D3D12_FEATURE_DATA_D3D12_OPTIONS5</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE::D3D12_FEATURE_D3D12_OPTIONS6">
    <summary>Starting with Windows 10, version 1903 (10.0; Build 18362), indicates a query for the level of support for variable-rate shading (VRS), and indicates whether or not background processing is supported. For more info, see <a href="https://docs.microsoft.com/windows/win32/direct3d12/vrs">Variable-rate shading (VRS)</a>, and the <a href="https://microsoft.github.io/DirectX-Specs/d3d/BackgroundProcessing.html">Direct3D 12 background processing spec</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE::D3D12_FEATURE_QUERY_META_COMMAND">
    <summary>Indicates a query for the level of support for metacommands. The corresponding data structure for this value is <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_feature_data_query_meta_command">D3D12_FEATURE_DATA_QUERY_META_COMMAND</a>.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::SetGraphicsRootSignature">
    <summary>
      <para>Sets the layout of the graphics root signature.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setgraphicsrootsignature" /></para>
      <param name="pRootSignature">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12rootsignature">ID3D12RootSignature</a> object.</param>
    </summary>
  </comment>
  <comment id="D3D12_MESSAGE_SEVERITY">
    <summary>
      <para>Debug message severity levels for an information queue.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/ne-d3d12sdklayers-d3d12_message_severity" /></para>
    </summary>
  </comment>
  <comment id="D3D12_MESSAGE_SEVERITY::D3D12_MESSAGE_SEVERITY_CORRUPTION">
    <summary>Indicates a corruption error.</summary>
  </comment>
  <comment id="D3D12_MESSAGE_SEVERITY::D3D12_MESSAGE_SEVERITY_ERROR">
    <summary>Indicates an error.</summary>
  </comment>
  <comment id="D3D12_MESSAGE_SEVERITY::D3D12_MESSAGE_SEVERITY_WARNING">
    <summary>Indicates a warning.</summary>
  </comment>
  <comment id="D3D12_MESSAGE_SEVERITY::D3D12_MESSAGE_SEVERITY_INFO">
    <summary>Indicates an information message.</summary>
  </comment>
  <comment id="D3D12_MESSAGE_SEVERITY::D3D12_MESSAGE_SEVERITY_MESSAGE">
    <summary>Indicates a message other than corruption, error, warning or information.</summary>
  </comment>
  <comment id="D3D12_TEX1D_ARRAY_UAV">
    <summary>
      <para>Describes an array of unordered-access 1D texture resources.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_tex1d_array_uav" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TEX1D_ARRAY_UAV::MipSlice">
    <summary>The mipmap slice index.</summary>
  </comment>
  <comment id="D3D12_TEX1D_ARRAY_UAV::FirstArraySlice">
    <summary>The zero-based index of the first array slice to be accessed.</summary>
  </comment>
  <comment id="D3D12_TEX1D_ARRAY_UAV::ArraySize">
    <summary>The number of slices in the array.</summary>
  </comment>
  <comment id="ID3D12Fence::SetEventOnCompletion">
    <summary>
      <para>Specifies an event that should be fired when the fence reaches a certain value.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12fence-seteventoncompletion" /></para>
      <param name="Value">The fence value when the event is to be signaled.</param>
      <param name="hEvent">A handle to the event object.</param>
    </summary>
  </comment>
  <comment id="ID3D12Device3::EnqueueMakeResident">
    <summary>
      <para>Asynchronously makes objects resident for the device.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device3-enqueuemakeresident" /></para>
      <param name="Flags">Controls whether the objects should be made resident if the application is over its memory budget.</param>
      <param name="NumObjects">The number of objects  in the <i>ppObjects</i> array to make resident for the device.</param>
      <param name="ppObjects">A pointer to a memory block; contains an array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12pageable">ID3D12Pageable</a> interface pointers for the objects.
          

Even though most D3D12 objects inherit from <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12pageable">ID3D12Pageable</a>, residency changes are only supported on the following: 

<ul>
<li>descriptor heaps</li>
<li>heaps</li>
<li>committed resources</li>
<li>query heaps</li>
</ul></param>
      <param name="pFenceToSignal">A pointer to the fence used to signal when the work is done.</param>
      <param name="FenceValueToSignal">An unsigned 64-bit value signaled to the fence when the work is done.</param>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR">
    <summary>
      <para>Provides data for calls to ID3D12VideoDevice::CheckFeatureSupport when the feature specified is D3D12_FEATURE_VIDEO_MOTION_ESTIMATOR. Retrieves the motion estimation capabilities for a video encoder.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_feature_data_video_motion_estimator" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR::NodeIndex">
    <summary>In multi-adapter operation, identifies the physical adapter of the device this operation applies to.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR::InputFormat">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a> structure specifying the format of the input resources.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR::BlockSizeFlags">
    <summary>A bitwise OR combination of values from the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_motion_estimator_search_block_size_flags.md">D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS</a> enumeration specifying the encoder's supported search block sizes for motion estimation.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR::PrecisionFlags">
    <summary>A bitwise OR combination of values from the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_motion_estimator_vector_precision_flags.md">D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_FLAGS</a> enumeration specifying the encoder's supported vector precision for motion estimation.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_MOTION_ESTIMATOR::SizeRange">
    <summary>A <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_size_range.md">D3D12_VIDEO_SIZE_RANGE</a> structure representing the minimum and maximum input size supported by the driver. The driver sets the fields of this structure to zero if motion estimation is unsupported.</summary>
  </comment>
  <comment id="D3D12_VIDEO_SCALE_SUPPORT_FLAGS">
    <summary>
      <para>Specifies the scaling capabilities of the video scaler.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ne-d3d12video-d3d12_video_scale_support_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_SCALE_SUPPORT_FLAGS::D3D12_VIDEO_SCALE_SUPPORT_FLAG_NONE">
    <summary>All possible output size width/height combinations that exist between the maximum size and minimum size for the extent, inclusive, are supported.</summary>
  </comment>
  <comment id="D3D12_VIDEO_SCALE_SUPPORT_FLAGS::D3D12_VIDEO_SCALE_SUPPORT_FLAG_POW2_ONLY">
    <summary>The scaler only supports output sizes at a power of two scale factors within the range.  The x and y scale factors must be the same for both dimensions when this flag is set.</summary>
  </comment>
  <comment id="D3D12_VIDEO_SCALE_SUPPORT_FLAGS::D3D12_VIDEO_SCALE_SUPPORT_FLAG_EVEN_DIMENSIONS_ONLY">
    <summary>The scaler only supports output sizes with even output dimensions.</summary>
  </comment>
  <comment id="D3D12_BITSTREAM_ENCRYPTION_TYPE">
    <summary>
      <para>Specifies a bitstream encryption type.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ne-d3d12video-d3d12_bitstream_encryption_type" /></para>
    </summary>
  </comment>
  <comment id="D3D12_BITSTREAM_ENCRYPTION_TYPE::D3D12_BITSTREAM_ENCRYPTION_TYPE_NONE">
    <summary>The bistream is not encrypted.</summary>
  </comment>
  <comment id="D3D12_CLEAR_FLAGS">
    <summary>
      <para>Specifies what to clear from the depth stencil view.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_clear_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_CLEAR_FLAGS::D3D12_CLEAR_FLAG_DEPTH">
    <summary>Indicates the depth buffer should be cleared.</summary>
  </comment>
  <comment id="D3D12_CLEAR_FLAGS::D3D12_CLEAR_FLAG_STENCIL">
    <summary>Indicates the stencil buffer should be cleared.</summary>
  </comment>
  <comment id="D3D12_SHADER_TYPE_DESC">
    <summary>
      <para>Describes a shader-variable type.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/ns-d3d12shader-d3d12_shader_type_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_SHADER_TYPE_DESC::Class">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_shader_variable_class">D3D_SHADER_VARIABLE_CLASS</a>-typed value that identifies the variable class as one of scalar, vector, matrix, object, and so on.</summary>
  </comment>
  <comment id="D3D12_SHADER_TYPE_DESC::Type">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_shader_variable_type">D3D_SHADER_VARIABLE_TYPE</a>-typed value that identifies the variable type.</summary>
  </comment>
  <comment id="D3D12_SHADER_TYPE_DESC::Rows">
    <summary>Number of rows in a matrix. Otherwise a numeric type returns 1, any other type returns 0.</summary>
  </comment>
  <comment id="D3D12_SHADER_TYPE_DESC::Columns">
    <summary>Number of columns in a matrix. Otherwise a numeric type returns 1, any other type returns 0.</summary>
  </comment>
  <comment id="D3D12_SHADER_TYPE_DESC::Elements">
    <summary>Number of elements in an array; otherwise 0.</summary>
  </comment>
  <comment id="D3D12_SHADER_TYPE_DESC::Members">
    <summary>Number of members in the structure; otherwise 0.</summary>
  </comment>
  <comment id="D3D12_SHADER_TYPE_DESC::Offset">
    <summary>Offset, in bytes, between the start of the parent structure and this variable. Can be 0 if not a structure member.</summary>
  </comment>
  <comment id="D3D12_SHADER_TYPE_DESC::Name">
    <summary>Name of the shader-variable type. This member can be <b>NULL</b> if it isn't used. This member supports dynamic shader linkage interface types, which have names. For more info about dynamic shader linkage, see <a href="https://docs.microsoft.com/windows/desktop/direct3dhlsl/overviews-direct3d-11-hlsl-dynamic-linking">Dynamic Linking</a>.</summary>
  </comment>
  <comment id="ID3D12VideoDevice">
    <summary>
      <para>Provides video decoding and processing capabilities of a Microsoft Direct3D 12 device including the ability to query video capabilities and instantiating video decoders and processors.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/nn-d3d12video-id3d12videodevice" /></para>
    </summary>
  </comment>
  <comment id="ID3D12Fence::Signal">
    <summary>
      <para>Sets the fence to the specified value.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12fence-signal" /></para>
      <param name="Value">The value to set the fence to.</param>
    </summary>
  </comment>
  <comment id="ID3D12Device5::CreateStateObject">
    <summary>
      <para>Creates an <a href="https://docs.microsoft.com/windows/win32/api/d3d12/nn-d3d12-id3d12stateobject">ID3D12StateObject</a>.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device5-createstateobject" /></para>
      <param name="pDesc">The description of the state object to create.</param>
      <param name="riid">The GUID of the interface to create. Use <i>__uuidof(ID3D12StateObject)</i>.</param>
      <param name="ppStateObject">The returned state object.</param>
    </summary>
  </comment>
  <comment id="D3D12_SUBRESOURCE_INFO">
    <summary>
      <para>Describes subresource data.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_subresource_info" /></para>
    </summary>
  </comment>
  <comment id="D3D12_SUBRESOURCE_INFO::Offset">
    <summary>Offset, in bytes, between the start of the parent resource and this subresource.</summary>
  </comment>
  <comment id="D3D12_SUBRESOURCE_INFO::RowPitch">
    <summary>The row pitch, or width, or physical size, in bytes, of the subresource data.</summary>
  </comment>
  <comment id="D3D12_SUBRESOURCE_INFO::DepthPitch">
    <summary>The depth pitch, or width, or physical size, in bytes, of the subresource data.</summary>
  </comment>
  <comment id="ID3D12CommandList">
    <summary>
      <para>An interface from which ID3D12GraphicsCommandList inherits from. It represents an ordered set of commands that the GPU executes, while allowing for extension to support other command lists than just those for graphics (such as compute and copy).</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12commandlist" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RASTERIZER_DESC">
    <summary>
      <para>Describes rasterizer state.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_rasterizer_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RASTERIZER_DESC::FillMode">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_fill_mode">D3D12_FILL_MODE</a>-typed value that specifies the fill mode to use when rendering.</summary>
  </comment>
  <comment id="D3D12_RASTERIZER_DESC::CullMode">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_cull_mode">D3D12_CULL_MODE</a>-typed value that specifies that triangles facing the specified direction are not drawn.</summary>
  </comment>
  <comment id="D3D12_RASTERIZER_DESC::FrontCounterClockwise">
    <summary>Determines if a triangle is front- or back-facing. If this member is <b>TRUE</b>, a triangle will be considered front-facing if its vertices are counter-clockwise on the render target and considered back-facing if they are clockwise. If this parameter is <b>FALSE</b>, the opposite is true.</summary>
  </comment>
  <comment id="D3D12_RASTERIZER_DESC::DepthBias">
    <summary>Depth value added to a given pixel. For info about depth bias, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d10-graphics-programming-guide-output-merger-stage-depth-bias">Depth Bias</a>.</summary>
  </comment>
  <comment id="D3D12_RASTERIZER_DESC::DepthBiasClamp">
    <summary>Maximum depth bias of a pixel. For info about depth bias, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d10-graphics-programming-guide-output-merger-stage-depth-bias">Depth Bias</a>.</summary>
  </comment>
  <comment id="D3D12_RASTERIZER_DESC::SlopeScaledDepthBias">
    <summary>Scalar on a given pixel's slope. For info about depth bias, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d10-graphics-programming-guide-output-merger-stage-depth-bias">Depth Bias</a>.</summary>
  </comment>
  <comment id="D3D12_RASTERIZER_DESC::DepthClipEnable">
    <summary>Specifies whether to enable clipping based on distance.
            

The hardware always performs x and y clipping of rasterized coordinates. When <b>DepthClipEnable</b> is set to the default–<b>TRUE</b>, the hardware also clips the z value (that is, the hardware performs the last step of the following algorithm).
            

<pre class="syntax" xml:space="preserve"><code>
0 &lt; w
-w &lt;= x &lt;= w (or arbitrarily wider range if implementation uses a guard band to reduce clipping burden)
-w &lt;= y &lt;= w (or arbitrarily wider range if implementation uses a guard band to reduce clipping burden)
0 &lt;= z &lt;= w
</code></pre>
When you set <b>DepthClipEnable</b> to <b>FALSE</b>, the hardware skips the z clipping (that is, the last step in the preceding algorithm). However, the hardware still performs the "0 &lt; w" clipping. When z clipping is disabled, improper depth ordering at the pixel level might result. However, when z clipping is disabled, stencil shadow implementations are simplified. In other words, you can avoid complex special-case handling for geometry that goes beyond the back clipping plane.</summary>
  </comment>
  <comment id="D3D12_RASTERIZER_DESC::MultisampleEnable">
    <summary>Specifies whether to use the quadrilateral or alpha line anti-aliasing algorithm on multisample antialiasing (MSAA) render targets. Set to <b>TRUE</b> to use the quadrilateral line anti-aliasing algorithm and to <b>FALSE</b> to use the alpha line anti-aliasing algorithm. For more info about this member, see Remarks.</summary>
  </comment>
  <comment id="D3D12_RASTERIZER_DESC::AntialiasedLineEnable">
    <summary>Specifies whether to enable line antialiasing; only applies if doing line drawing and <b>MultisampleEnable</b> is <b>FALSE</b>. For more info about this member, see Remarks.</summary>
  </comment>
  <comment id="D3D12_RASTERIZER_DESC::ForcedSampleCount">
    <summary>The sample count that is forced while UAV rendering or rasterizing. Valid values are 0, 1, 2, 4, 8, and optionally 16. 0 indicates that the sample count is not forced.

<div class="alert"><b>Note</b>  If you want to render with <b>ForcedSampleCount</b> set to 1 or greater, you must follow these guidelines: 

<ul>
<li>Don't bind depth-stencil views.</li>
<li>Disable depth testing.</li>
<li>Ensure the shader doesn't output depth.</li>
<li>If you have any render-target views bound (<a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_descriptor_heap_type">D3D12_DESCRIPTOR_HEAP_TYPE_RTV</a>) and <b>ForcedSampleCount</b> is greater than 1, ensure that every render target has only a single sample.</li>
<li>Don't operate the shader at sample frequency. Therefore, <a href="https://docs.microsoft.com/windows/win32/api/d3d12shader/nf-d3d12shader-id3d12shaderreflection-issamplefrequencyshader">ID3D12ShaderReflection::IsSampleFrequencyShader</a> returns <b>FALSE</b>.</li>
</ul>Otherwise, rendering behavior is undefined.</div>
<div></div></summary>
  </comment>
  <comment id="D3D12_RASTERIZER_DESC::ConservativeRaster">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_conservative_rasterization_mode">D3D12_CONSERVATIVE_RASTERIZATION_MODE</a>-typed value that identifies whether conservative rasterization is on or off.</summary>
  </comment>
  <comment id="D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS">
    <summary>
      <para>Represents data for a video decode statistics query invoked by calling ID3D12VideoDecodeCommandList::EndQuery.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_query_data_video_decode_statistics" /></para>
    </summary>
  </comment>
  <comment id="D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS::Status">
    <summary>A member of the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_decode_status.md">D3D12_VIDEO_DECODE_STATUS</a> enumeration indicating the video decoding status.</summary>
  </comment>
  <comment id="D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS::NumMacroblocksAffected">
    <summary>If <b>Status</b> is not 0, this member contains the accelerator's estimate of the number of super-blocks in the decoded frame that were adversely affected by the reported problem. If the accelerator does not provide an estimate, the value is <b>D3D12\_VIDEO\_DECODE\_MACROBLOCKS\_AFFECTED\_UNKNOWN</b> (0xFFFFFFFFFFFFFFFF).</summary>
  </comment>
  <comment id="D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS::FrameRate">
    <summary>The decode frame rate.</summary>
  </comment>
  <comment id="D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS::BitRate">
    <summary>When the <b>Status</b> returned is <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_decode_status.md">D3D12_VIDEO_DECODE_STATUS_RATE_EXCEEDED</a>, this field reports the bitrate that would succeed.  This value may be used to recreate the decoder and try again.  A value of zero here is valid to indicate that the worst case bit rate should be assumed.  

For all other <b>Status</b> values, <b>BitRate</b> is set to zero.</summary>
  </comment>
  <comment id="D3D12_BUFFER_UAV">
    <summary>
      <para>Describes the elements in a buffer to use in a unordered-access view.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_buffer_uav" /></para>
    </summary>
  </comment>
  <comment id="D3D12_BUFFER_UAV::FirstElement">
    <summary>The zero-based index of the first element to be accessed.</summary>
  </comment>
  <comment id="D3D12_BUFFER_UAV::NumElements">
    <summary>The number of elements in the resource. For structured buffers, this is the number of structures in the buffer.</summary>
  </comment>
  <comment id="D3D12_BUFFER_UAV::StructureByteStride">
    <summary>The size of each element in the buffer structure (in bytes) when the buffer represents a structured buffer.</summary>
  </comment>
  <comment id="D3D12_BUFFER_UAV::CounterOffsetInBytes">
    <summary>The counter offset, in bytes.</summary>
  </comment>
  <comment id="D3D12_BUFFER_UAV::Flags">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_buffer_uav_flags">D3D12_BUFFER_UAV_FLAGS</a>-typed value that specifies the view options for the resource.</summary>
  </comment>
  <comment id="D3D12_CONSTANT_BUFFER_VIEW_DESC">
    <summary>
      <para>Describes a constant buffer to view.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_constant_buffer_view_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_CONSTANT_BUFFER_VIEW_DESC::BufferLocation">
    <summary>The D3D12_GPU_VIRTUAL_ADDRESS of the constant buffer.
            D3D12_GPU_VIRTUAL_ADDRESS is a typedef'd alias of UINT64.</summary>
  </comment>
  <comment id="D3D12_CONSTANT_BUFFER_VIEW_DESC::SizeInBytes">
    <summary>The size in bytes of the constant buffer.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC">
    <summary>
      <para>Description of the post-build information to generate from an acceleration structure. Use this structure in calls to EmitRaytracingAccelerationStructurePostbuildInfo and BuildRaytracingAccelerationStructure.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_raytracing_acceleration_structure_postbuild_info_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC::DestBuffer">
    <summary>Storage for the post-build info result.  Size required and the layout of the contents written by the system depend on the value of the <i>InfoType</i> field.

The memory pointed to must be in state <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_states">D3D12_RESOURCE_STATE_UNORDERED_ACCESS</a>.  The memory must be aligned to the natural alignment for the members of the particular output structure being generated (e.g. 8 bytes for a struct with the largest members being UINT64).</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_DESC::InfoType">
    <summary>The type of post-build information to retrieve.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::SetGraphicsRoot32BitConstant">
    <summary>
      <para>Sets a constant in the graphics root signature.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setgraphicsroot32bitconstant" /></para>
      <param name="RootParameterIndex">The slot number for binding.</param>
      <param name="SrcData">The source data for the constant to set.</param>
      <param name="DestOffsetIn32BitValues">The offset, in 32-bit values, to set the constant in the root signature.</param>
    </summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::SetGraphicsRootUnorderedAccessView">
    <summary>
      <para>Sets a CPU descriptor handle for the unordered-access-view resource in the graphics root signature.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setgraphicsrootunorderedaccessview" /></para>
      <param name="RootParameterIndex">The slot number for binding.</param>
      <param name="BufferLocation">The GPU virtual address of the buffer.
            D3D12_GPU_VIRTUAL_ADDRESS is a typedef'd alias of UINT64.</param>
    </summary>
  </comment>
  <comment id="D3D12_AXIS_SHADING_RATE">
    <summary>
      <para>Defines constants that specify the shading rate (for variable-rate shading, or VRS) along a horizontal or vertical axis.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_axis_shading_rate" /></para>
    </summary>
  </comment>
  <comment id="D3D12_AXIS_SHADING_RATE::D3D12_AXIS_SHADING_RATE_1X">
    <summary>Specifies a 1x shading rate for the axis.</summary>
  </comment>
  <comment id="D3D12_AXIS_SHADING_RATE::D3D12_AXIS_SHADING_RATE_2X">
    <summary>Specifies a 2x shading rate for the axis.</summary>
  </comment>
  <comment id="D3D12_AXIS_SHADING_RATE::D3D12_AXIS_SHADING_RATE_4X">
    <summary>Specifies a 4x shading rate for the axis.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList2">
    <summary>
      <para>Encapsulates a list of graphics commands for rendering, extending the interface to support writing immediate values directly to a buffer.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12graphicscommandlist2" /></para>
    </summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList3">
    <summary>
      <para>Encapsulates a list of graphics commands for rendering.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12graphicscommandlist3" /></para>
    </summary>
  </comment>
  <comment id="ID3D12Device::OpenSharedHandleByName">
    <summary>
      <para>Opens a handle for shared resources, shared heaps, and shared fences, by using Name and Access.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-opensharedhandlebyname" /></para>
      <param name="Name">The name that was optionally passed as the <i>Name</i> parameter in the call to 
            <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12device-createsharedhandle">ID3D12Device::CreateSharedHandle</a>.</param>
      <param name="Access">The access level that was specified in the <i>Access</i> parameter in the call to 
            <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12device-createsharedhandle">ID3D12Device::CreateSharedHandle</a>.</param>
      <param name="pNTHandle">Pointer to the shared handle.</param>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT">
    <summary>
      <para>Provides data for calls to ID3D12VideoDevice::CheckFeatureSupport when the feature specified is D3D12_FEATURE_VIDEO_PROCESS_SUPPORT.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_feature_data_video_process_support" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT::NodeIndex">
    <summary>An integer indicating which physical adapter of the device the operation applies to, in a multi-adapter operation.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT::InputSample">
    <summary>A <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_sample.md">D3D12\_VIDEO\_SAMPLE</a> structure defining the width, height, and format of the input sample.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT::InputFieldType">
    <summary>A member of the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_field_type.md">D3D12\_VIDEO\_FIELD\_TYPE</a> enumeration specifying the interlaced field type of the input sample.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT::InputStereoFormat">
    <summary>A member of the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_frame_stereo_format.md">D3D12\_VIDEO\_FRAME\_STEREO\_FORMAT</a> enumeration specifying the stereo format of the input sample.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT::InputFrameRate">
    <summary>The input frame rate.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT::OutputFormat">
    <summary>A <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_format.md">D3D12\_VIDEO\_FORMAT</a> structure specifying the output DXGI format and color space.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT::OutputStereoFormat">
    <summary>A member of the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_frame_stereo_format.md">D3D12\_VIDEO\_FRAME\_STEREO\_FORMAT</a> enumeration specifying the stereo format of the output.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT::OutputFrameRate">
    <summary>The output frame rate.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT::SupportFlags">
    <summary>A member of the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_process_support_flags.md">D3D12\_VIDEO\_PROCESS\_SUPPORT\_FLAGS</a> indicating whether the requested format and colorspace conversion is supported. This value is populated by the call to <b>ID3D12Device::CheckFeatureSupport</b>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT::ScaleSupport">
    <summary>A <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_scale_support.md">D3D12\_VIDEO\_SCALE\_SUPPORT</a> structure specifying the supported scaling capabilities. This value is populated by the call to <b>ID3D12Device::CheckFeatureSupport</b>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT::FeatureSupport">
    <summary>A bitwise OR combination of values from the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_process_feature_flags.md">D3D12\_VIDEO\_PROCESS\_FEATURE\_FLAGS</a> enumeration specifying the supported video processing features. This value is populated by the call to <b>ID3D12Device::CheckFeatureSupport</b>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT::DeinterlaceSupport">
    <summary>A member of the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_process_deinterlace_flags.md">D3D12\_VIDEO\_PROCESS\_DEINTERLACE\_FLAGS</a> enumeration specifying the supported deinterlacing capabilities. This value is populated by the call to <b>ID3D12Device::CheckFeatureSupport</b>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT::AutoProcessingSupport">
    <summary>A member of the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_process_auto_processing_flags.md">D3D12\_VIDEO\_PROCESS\_AUTO\_PROCESSING\_FLAGS</a> specifying the supported automatic processing capabilities. This value is populated by the call to <b>ID3D12Device::CheckFeatureSupport</b>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT::FilterSupport">
    <summary>A bitwise OR combination of values from the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_process_filter_flags.md">D3D12\_VIDEO\_PROCESS\_FILTER\_FLAGS</a> enumeration specifying the supported video filtering features. This value is populated by the call to <b>ID3D12Device::CheckFeatureSupport</b>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_PROCESS_SUPPORT::FilterRangeSupport">
    <summary>An array of <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_process_filter_range.md">D3D12\_VIDEO\_PROCESS\_FILTER\_RANGE</a> structures representing the filter range values.  This value is populated by the call to <b>ID3D12Device::CheckFeatureSupport</b>. The calling application must allocate the memory for the filter range list before calling <b>CheckFeatureSupport</b>.</summary>
  </comment>
  <comment id="D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE">
    <summary>
      <para>Specifies the parameter stages for video extension commands.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ne-d3d12video-d3d12_video_extension_command_parameter_stage" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE::D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CREATION">
    <summary>The parameter stage is in video extension command creation.</summary>
  </comment>
  <comment id="D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE::D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_INITIALIZATION">
    <summary>The parameter stage is in video extension command initialization.</summary>
  </comment>
  <comment id="D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE::D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_EXECUTION">
    <summary>The parameter stage is in video extension command execution.</summary>
  </comment>
  <comment id="D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE::D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CAPS_INPUT">
    <summary>The parameter stage is input parameters passed to capabilities queries.</summary>
  </comment>
  <comment id="D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE::D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CAPS_OUTPUT">
    <summary>The parameter stage is output parameters passed to capabilities queries.</summary>
  </comment>
  <comment id="D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE::D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_DEVICE_EXECUTE_INPUT">
    <summary>The parameter stage is device execution input.</summary>
  </comment>
  <comment id="D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE::D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_DEVICE_EXECUTE_OUTPUT">
    <summary>The parameter stage is device execution output.</summary>
  </comment>
  <comment id="ID3D12ShaderReflectionType::GetMemberTypeByName">
    <summary>
      <para>Gets a shader-reflection-variable type by name.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflectiontype-getmembertypebyname" /></para>
      <param name="Name">Member name.</param>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS">
    <summary>
      <para>Retrieves the list of video extension commands from the driver.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_feature_data_video_extension_commands" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS::NodeIndex">
    <summary>For single GPU operation, set this to zero. If there are multiple GPU nodes, set a bit to identify the node (the device's physical adapter) to which the command queue applies. Each bit in the mask corresponds to a single node. Only 1 bit may be set.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS::CommandCount">
    <summary>The supported number of video extension commands. This value must be the count returned by a call to[ID3D12VideoDevice::CheckFeatureSupport](nf-d3d12video-id3d12videodevice-checkfeaturesupport.md) with  <a href="https://docs.microsoft.comne-d3d12video-d3d12_feature_video.md">D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_COUNT</a> specified as the feature.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMANDS::pCommandInfos">
    <summary>Receives a list of <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_extension_command_info.md">D3D12_VIDEO_EXTENSION_COMMAND_INFO</a> structures describing video extension commands.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::ExecuteIndirect">
    <summary>
      <para>Apps perform indirect draws/dispatches using the ExecuteIndirect method.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-executeindirect" /></para>
      <param name="pCommandSignature">Specifies a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12commandsignature">ID3D12CommandSignature</a>. The data referenced by <i>pArgumentBuffer</i> will be interpreted depending on the contents of the command signature. Refer to <a href="https://docs.microsoft.com/windows/desktop/direct3d12/indirect-drawing">Indirect Drawing</a> for the APIs that are used to create a command signature.</param>
      <param name="MaxCommandCount">There are two ways that command counts can be specified:

<ul>
<li>If <i>pCountBuffer</i> is not NULL, then <i>MaxCommandCount</i> specifies the maximum number of operations which will be performed.  The actual number of operations to be performed are defined by the minimum of this value, and a 32-bit unsigned integer contained in <i>pCountBuffer</i> (at the byte offset specified by <i>CountBufferOffset</i>).
              </li>
<li>If <i>pCountBuffer</i> is NULL, the <i>MaxCommandCount</i> specifies the exact number of operations which will be performed.
              </li>
</ul></param>
      <param name="pArgumentBuffer">Specifies one or more <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a> objects, containing the command arguments.</param>
      <param name="ArgumentBufferOffset">Specifies an offset into <i>pArgumentBuffer</i> to identify the first command argument.</param>
      <param name="pCountBuffer">Specifies a pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a>.</param>
      <param name="CountBufferOffset">Specifies a UINT64 that is the offset into <i>pCountBuffer</i>, identifying the argument count.</param>
    </summary>
  </comment>
  <comment id="ID3D12InfoQueue::PushRetrievalFilter">
    <summary>
      <para>Push a retrieval filter onto the retrieval-filter stack.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-pushretrievalfilter" /></para>
      <param name="pFilter">Pointer to a retrieval filter.</param>
    </summary>
  </comment>
  <comment id="D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS">
    <summary>
      <para>Defines constants that specify protected resource session support.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_protected_resource_session_support_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS::D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_NONE">
    <summary>Indicates that protected resource sessions are not supported.</summary>
  </comment>
  <comment id="D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAGS::D3D12_PROTECTED_RESOURCE_SESSION_SUPPORT_FLAG_SUPPORTED">
    <summary>Indicates that protected resource sessions are supported.</summary>
  </comment>
  <comment id="ID3D12MetaCommand">
    <summary>
      <para>Represents a meta command. A meta command is a Direct3D 12 object representing an algorithm that is accelerated by independent hardware vendors (IHVs). It's an opaque reference to a command generator that is implemented by the driver.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12metacommand" /></para>
    </summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::SetGraphicsRootDescriptorTable">
    <summary>
      <para>Sets a descriptor table into the graphics root signature.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setgraphicsrootdescriptortable" /></para>
      <param name="RootParameterIndex">The slot number for binding.</param>
      <param name="BaseDescriptor">A GPU_descriptor_handle object for the base descriptor to set.</param>
    </summary>
  </comment>
  <comment id="D3D12_VIEWPORT">
    <summary>
      <para>Describes the dimensions of a viewport.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_viewport" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIEWPORT::TopLeftX">
    <summary>X position of the left hand side of the viewport.</summary>
  </comment>
  <comment id="D3D12_VIEWPORT::TopLeftY">
    <summary>Y position of the top of the viewport.</summary>
  </comment>
  <comment id="D3D12_VIEWPORT::Width">
    <summary>Width of the viewport.</summary>
  </comment>
  <comment id="D3D12_VIEWPORT::Height">
    <summary>Height of the viewport.</summary>
  </comment>
  <comment id="D3D12_VIEWPORT::MinDepth">
    <summary>Minimum depth of the viewport. Ranges between 0 and 1.</summary>
  </comment>
  <comment id="D3D12_VIEWPORT::MaxDepth">
    <summary>Maximum depth of the viewport. Ranges between 0 and 1.</summary>
  </comment>
  <comment id="ID3D12Device::CreateDepthStencilView">
    <summary>
      <para>Creates a depth-stencil view for accessing resource data.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createdepthstencilview" /></para>
      <param name="pResource">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a> object that represents the depth stencil.
          

At least one of <i>pResource</i> or <i>pDesc</i>  must be provided.
A null <i>pResource</i> is used to initialize a null descriptor, which guarantees D3D11-like null binding behavior (reading 0s, writes are discarded), but must have a valid <i>pDesc</i> in order to determine the descriptor type.</param>
      <param name="pDesc">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_depth_stencil_view_desc">D3D12_DEPTH_STENCIL_VIEW_DESC</a> structure that describes the depth-stencil view.
          

A null <i>pDesc</i> is used to initialize a default descriptor, if possible. This behavior is identical to the D3D11 null descriptor behavior, where defaults are filled in. This behavior inherits the resource format and dimension (if not typeless) and DSVs target the  first mip and all array slices. Not all resources support null descriptor initialization.</param>
      <param name="DestDescriptor">Describes the CPU descriptor handle that represents the start of the heap that holds the depth-stencil view.</param>
    </summary>
  </comment>
  <comment id="D3D12_COMMAND_QUEUE_FLAGS">
    <summary>
      <para>Specifies flags to be used when creating a command queue.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_command_queue_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_COMMAND_QUEUE_FLAGS::D3D12_COMMAND_QUEUE_FLAG_NONE">
    <summary>Indicates a default command queue.</summary>
  </comment>
  <comment id="D3D12_COMMAND_QUEUE_FLAGS::D3D12_COMMAND_QUEUE_FLAG_DISABLE_GPU_TIMEOUT">
    <summary>Indicates that the GPU timeout should be disabled for this command queue.</summary>
  </comment>
  <comment id="ID3D12ShaderReflectionConstantBuffer::GetVariableByIndex">
    <summary>
      <para>Gets a shader-reflection variable by index.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflectionconstantbuffer-getvariablebyindex" /></para>
      <param name="Index">Zero-based index.</param>
    </summary>
  </comment>
  <comment id="D3D12_DEPTH_WRITE_MASK">
    <summary>
      <para>Identifies the portion of a depth-stencil buffer for writing depth data.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_depth_write_mask" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DEPTH_WRITE_MASK::D3D12_DEPTH_WRITE_MASK_ZERO">
    <summary>Turn off writes to the depth-stencil buffer.</summary>
  </comment>
  <comment id="D3D12_DEPTH_WRITE_MASK::D3D12_DEPTH_WRITE_MASK_ALL">
    <summary>Turn on writes to the depth-stencil buffer.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::SetComputeRootSignature">
    <summary>
      <para>Sets the layout of the compute root signature.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setcomputerootsignature" /></para>
      <param name="pRootSignature">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12rootsignature">ID3D12RootSignature</a> object.</param>
    </summary>
  </comment>
  <comment id="ID3D12ShaderReflectionConstantBuffer::GetVariableByName">
    <summary>
      <para>Gets a shader-reflection variable by name.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflectionconstantbuffer-getvariablebyname" /></para>
      <param name="Name">Variable name.</param>
    </summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::ExecuteBundle">
    <summary>
      <para>Executes a bundle.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-executebundle" /></para>
      <param name="pCommandList">Specifies the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12graphicscommandlist">ID3D12GraphicsCommandList</a> that determines the bundle to be executed.</param>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODER_HEAP_DESC">
    <summary>
      <para>Describes a ID3D12VideoDecoderHeap.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_video_decoder_heap_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODER_HEAP_DESC::NodeMask">
    <summary>The node mask specifying the physical adapter on which the video processor will be used. For single GPU operation, set this to zero. If there are multiple GPU nodes, set a bit to identify the node, i.e. the device's physical adapter, to which the command queue applies. Each bit in the mask corresponds to a single node. Only 1 bit may be set.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODER_HEAP_DESC::Configuration">
    <summary>A <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_decode_configuration.md">D3D12_VIDEO_DECODE_CONFIGURATION</a> structure specifying the configuration of the video decoder.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODER_HEAP_DESC::DecodeWidth">
    <summary>The decode width of the bitstream to be decoded.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODER_HEAP_DESC::DecodeHeight">
    <summary>The decode height of the bitstream to be decoded.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODER_HEAP_DESC::Format">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a> structure specifying the format of the bitstream to be decoded.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODER_HEAP_DESC::FrameRate">
    <summary>The frame rate of the input video stream.  For more information, see the Remarks section.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODER_HEAP_DESC::BitRate">
    <summary>The average bits per second data compression rate for the compressed video stream.  For more information, see the Remarks section.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODER_HEAP_DESC::MaxDecodePictureBufferCount">
    <summary>The maximum number of decode picture buffers this stream can have.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV">
    <summary>
      <para>A shader resource view (SRV) structure for storing a raytracing acceleration structure.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_raytracing_acceleration_structure_srv" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_SRV::Location">
    <summary>The GPU virtual address of the SRV.</summary>
  </comment>
  <comment id="ID3D12Heap::GetDesc">
    <summary>
      <para>Gets the heap description.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12heap-getdesc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_PROTECTED_RESOURCE_SESSION_FLAGS">
    <summary>
      <para>Defines constants that specify protected resource session flags.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_protected_resource_session_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_PROTECTED_RESOURCE_SESSION_FLAGS::D3D12_PROTECTED_RESOURCE_SESSION_FLAG_NONE">
    <summary>Specifies no flag.</summary>
  </comment>
  <comment id="D3D12_DEPTH_STENCIL_DESC1">
    <summary>
      <para>Describes depth-stencil state.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_depth_stencil_desc1" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DEPTH_STENCIL_DESC1::DepthEnable">
    <summary>Specifies whether to enable depth testing. Set this member to <b>TRUE</b> to enable depth testing.</summary>
  </comment>
  <comment id="D3D12_DEPTH_STENCIL_DESC1::DepthWriteMask">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_depth_write_mask">D3D12_DEPTH_WRITE_MASK</a>-typed value that identifies a portion of the depth-stencil buffer that can be modified by depth data.</summary>
  </comment>
  <comment id="D3D12_DEPTH_STENCIL_DESC1::DepthFunc">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_comparison_func">D3D12_COMPARISON_FUNC</a>-typed value that identifies a function that compares depth data against existing depth data.</summary>
  </comment>
  <comment id="D3D12_DEPTH_STENCIL_DESC1::StencilEnable">
    <summary>Specifies whether to enable stencil testing. Set this member to <b>TRUE</b> to enable stencil testing.</summary>
  </comment>
  <comment id="D3D12_DEPTH_STENCIL_DESC1::StencilReadMask">
    <summary>Identify a portion of the depth-stencil buffer for reading stencil data.</summary>
  </comment>
  <comment id="D3D12_DEPTH_STENCIL_DESC1::StencilWriteMask">
    <summary>Identify a portion of the depth-stencil buffer for writing stencil data.</summary>
  </comment>
  <comment id="D3D12_DEPTH_STENCIL_DESC1::FrontFace">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_depth_stencilop_desc">D3D12_DEPTH_STENCILOP_DESC</a> structure that describes how to use the results of the depth test and the stencil test for pixels whose surface normal is facing towards the camera.</summary>
  </comment>
  <comment id="D3D12_DEPTH_STENCIL_DESC1::BackFace">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_depth_stencilop_desc">D3D12_DEPTH_STENCILOP_DESC</a> structure that describes how to use the results of the depth test and the stencil test for pixels whose surface normal is facing away from the camera.</summary>
  </comment>
  <comment id="D3D12_DEPTH_STENCIL_DESC1::DepthBoundsTestEnable">
    <summary>TRUE to enable depth-bounds testing; otherwise, FALSE. The default value is FALSE.</summary>
  </comment>
  <comment id="D3D12_DEVICE_REMOVED_EXTENDED_DATA1">
    <summary>
      <para>Represents Device Removed Extended Data (DRED) version 1.1 data.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_device_removed_extended_data1" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DEVICE_REMOVED_EXTENDED_DATA1::DeviceRemovedReason">
    <summary>An <a href="https://docs.microsoft.com/windows/desktop/com/structure-of-com-error-codes">HRESULT</a> containing the reason the device was removed (matches the return value of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12device-getdeviceremovedreason">GetDeviceRemovedReason</a>). Also see [COM Error Codes (UI, Audio, DirectX, Codec)](/windows/desktop/com/com-error-codes-10).</summary>
  </comment>
  <comment id="D3D12_DEVICE_REMOVED_EXTENDED_DATA1::AutoBreadcrumbsOutput">
    <summary>A <a href="https://docs.microsoft.comns-d3d12-d3d12_auto_breadcrumb_node.md">D3D12_DRED_AUTO_BREADCRUMBS_OUTPUT</a> value that contains the auto-breadcrumb state prior to device removal.</summary>
  </comment>
  <comment id="D3D12_DEVICE_REMOVED_EXTENDED_DATA1::pHeadAutoBreadcrumbNode">
    <summary>An output parameter of type pointer to <a href="https://docs.microsoft.comns-d3d12-d3d12_auto_breadcrumb_node.md">D3D12_AUTO_BREADCRUMB_NODE</a> representing the returned auto-breadcrumb object(s). This is a pointer to the head of a linked list of auto-breadcrumb node objects. All of the nodes in the linked list represent potentially incomplete command list execution on the GPU at the time of the device-removal event.</summary>
  </comment>
  <comment id="D3D12_DEVICE_REMOVED_EXTENDED_DATA1::PageFaultOutput">
    <summary>A <a href="https://docs.microsoft.comns-d3d12-d3d12_auto_breadcrumb_node.md">D3D12_DRED_PAGE_FAULT_OUTPUT</a> value that contains page fault data if device removal was the result of a GPU page fault.</summary>
  </comment>
  <comment id="ID3D12CommandQueue::Signal">
    <summary>
      <para>Updates a fence to a specified value.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12commandqueue-signal" /></para>
      <param name="pFence">A pointer to the <a href="https://docs.microsoft.com/windows/win32/api/d3d12/nn-d3d12-id3d12fence">ID3D12Fence</a> object.</param>
      <param name="Value">The value to set the fence to.</param>
    </summary>
  </comment>
  <comment id="ID3D12Device1::SetEventOnMultipleFenceCompletion">
    <summary>
      <para>Specifies an event that should be fired when one or more of a collection of fences reach specific values.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device1-seteventonmultiplefencecompletion" /></para>
      <param name="ppFences">An array of length <i>NumFences</i> that specifies the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12fence">ID3D12Fence</a> objects.</param>
      <param name="pFenceValues">An array of length <i>NumFences</i> that specifies the fence values required for the event is to be signaled.</param>
      <param name="NumFences">Specifies the number of fences to be included.</param>
      <param name="Flags">Specifies one  of the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_multiple_fence_wait_flags">D3D12_MULTIPLE_FENCE_WAIT_FLAGS</a> that determines how to proceed.</param>
      <param name="hEvent">A handle to the event object.</param>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_SUPPORT_FLAGS">
    <summary>
      <para>Specifies whether a video format and colorspace conversion operation is supported.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ne-d3d12video-d3d12_video_process_support_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_SUPPORT_FLAGS::D3D12_VIDEO_PROCESS_SUPPORT_FLAG_NONE">
    <summary>The conversion from the source format and colorspace to destination format and colorspace are not supported.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_SUPPORT_FLAGS::D3D12_VIDEO_PROCESS_SUPPORT_FLAG_SUPPORTED">
    <summary>The conversion from the source format and colorspace to destination format and colorspace are are supported.</summary>
  </comment>
  <comment id="D3D12_SRV_DIMENSION">
    <summary>
      <para>Identifies the type of resource that will be viewed as a shader resource.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_srv_dimension" /></para>
    </summary>
  </comment>
  <comment id="D3D12_SRV_DIMENSION::D3D12_SRV_DIMENSION_UNKNOWN">
    <summary>The type is unknown.</summary>
  </comment>
  <comment id="D3D12_SRV_DIMENSION::D3D12_SRV_DIMENSION_BUFFER">
    <summary>The resource is a buffer.</summary>
  </comment>
  <comment id="D3D12_SRV_DIMENSION::D3D12_SRV_DIMENSION_TEXTURE1D">
    <summary>The resource is a 1D texture.</summary>
  </comment>
  <comment id="D3D12_SRV_DIMENSION::D3D12_SRV_DIMENSION_TEXTURE1DARRAY">
    <summary>The resource is an array of 1D textures.</summary>
  </comment>
  <comment id="D3D12_SRV_DIMENSION::D3D12_SRV_DIMENSION_TEXTURE2D">
    <summary>The resource is a 2D texture.</summary>
  </comment>
  <comment id="D3D12_SRV_DIMENSION::D3D12_SRV_DIMENSION_TEXTURE2DARRAY">
    <summary>The resource is an array of 2D textures.</summary>
  </comment>
  <comment id="D3D12_SRV_DIMENSION::D3D12_SRV_DIMENSION_TEXTURE2DMS">
    <summary>The resource is a multisampling 2D texture.</summary>
  </comment>
  <comment id="D3D12_SRV_DIMENSION::D3D12_SRV_DIMENSION_TEXTURE2DMSARRAY">
    <summary>The resource is an array of multisampling 2D textures.</summary>
  </comment>
  <comment id="D3D12_SRV_DIMENSION::D3D12_SRV_DIMENSION_TEXTURE3D">
    <summary>The resource is a 3D texture.</summary>
  </comment>
  <comment id="D3D12_SRV_DIMENSION::D3D12_SRV_DIMENSION_TEXTURECUBE">
    <summary>The resource is a cube texture.</summary>
  </comment>
  <comment id="D3D12_SRV_DIMENSION::D3D12_SRV_DIMENSION_TEXTURECUBEARRAY">
    <summary>The resource is an array of cube textures.</summary>
  </comment>
  <comment id="D3D12_SRV_DIMENSION::D3D12_SRV_DIMENSION_RAYTRACING_ACCELERATION_STRUCTURE">
    <summary>The resource is a raytracing acceleration structure.</summary>
  </comment>
  <comment id="ID3D12Debug::EnableDebugLayer">
    <summary>
      <para>Enables the debug layer.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12debug-enabledebuglayer" /></para>
    </summary>
  </comment>
  <comment id="ID3D12ShaderReflectionVariable::GetDesc">
    <summary>
      <para>Gets a shader-variable description.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflectionvariable-getdesc" /></para>
      <param name="pDesc">A pointer to a shader-variable description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d12shader/ns-d3d12shader-d3d12_shader_variable_desc">D3D12_SHADER_VARIABLE_DESC</a>).</param>
    </summary>
  </comment>
  <comment id="D3D12_DEPTH_STENCIL_DESC">
    <summary>
      <para>Describes depth-stencil state.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_depth_stencil_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DEPTH_STENCIL_DESC::DepthEnable">
    <summary>Specifies whether to enable depth testing. Set this member to <b>TRUE</b> to enable depth testing.</summary>
  </comment>
  <comment id="D3D12_DEPTH_STENCIL_DESC::DepthWriteMask">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_depth_write_mask">D3D12_DEPTH_WRITE_MASK</a>-typed value that identifies a portion of the depth-stencil buffer that can be modified by depth data.</summary>
  </comment>
  <comment id="D3D12_DEPTH_STENCIL_DESC::DepthFunc">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_comparison_func">D3D12_COMPARISON_FUNC</a>-typed value that identifies a function that compares depth data against existing depth data.</summary>
  </comment>
  <comment id="D3D12_DEPTH_STENCIL_DESC::StencilEnable">
    <summary>Specifies whether to enable stencil testing. Set this member to <b>TRUE</b> to enable stencil testing.</summary>
  </comment>
  <comment id="D3D12_DEPTH_STENCIL_DESC::StencilReadMask">
    <summary>Identify a portion of the depth-stencil buffer for reading stencil data.</summary>
  </comment>
  <comment id="D3D12_DEPTH_STENCIL_DESC::StencilWriteMask">
    <summary>Identify a portion of the depth-stencil buffer for writing stencil data.</summary>
  </comment>
  <comment id="D3D12_DEPTH_STENCIL_DESC::FrontFace">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_depth_stencilop_desc">D3D12_DEPTH_STENCILOP_DESC</a> structure that describes how to use the results of the depth test and the stencil test for pixels whose surface normal is facing towards the camera.</summary>
  </comment>
  <comment id="D3D12_DEPTH_STENCIL_DESC::BackFace">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_depth_stencilop_desc">D3D12_DEPTH_STENCILOP_DESC</a> structure that describes how to use the results of the depth test and the stencil test for pixels whose surface normal is facing away from the camera.</summary>
  </comment>
  <comment id="ID3D12ProtectedResourceSession">
    <summary>
      <para>Monitors the validity of a protected resource session.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12protectedresourcesession" /></para>
    </summary>
  </comment>
  <comment id="ID3D12Device::CopyDescriptors">
    <summary>
      <para>Copies descriptors from a source to a destination.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-copydescriptors" /></para>
      <param name="NumDestDescriptorRanges">The number of destination descriptor ranges to copy to.</param>
      <param name="pDestDescriptorRangeStarts">An array of <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_cpu_descriptor_handle">D3D12_CPU_DESCRIPTOR_HANDLE</a></b> objects to copy to.

All the destination and source descriptors must be in heaps of the same <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_descriptor_heap_type">D3D12_DESCRIPTOR_HEAP_TYPE</a>.</param>
      <param name="pDestDescriptorRangeSizes">An array of destination descriptor range sizes to copy to.</param>
      <param name="NumSrcDescriptorRanges">The number of source descriptor ranges to copy from.</param>
      <param name="pSrcDescriptorRangeStarts">An array of <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_cpu_descriptor_handle">D3D12_CPU_DESCRIPTOR_HANDLE</a></b> objects to copy from.

&gt; [!IMPORTANT]
&gt; All elements in the <i>pSrcDescriptorRangeStarts</i> parameter must be in a non shader-visible descriptor heap. This is because shader-visible descriptor heaps may be created in <b>WRITE_COMBINE</b> memory or GPU local memory, which is prohibitively slow to read from. If your application manages descriptor heaps via copying the descriptors required for a given pass or frame from local "storage" descriptor heaps to the GPU-bound descriptor heap, use shader-opaque heaps for the storage heaps and copy into the GPU-visible heap as required.</param>
      <param name="pSrcDescriptorRangeSizes">An array of source descriptor range sizes to copy from.</param>
      <param name="DescriptorHeapsType">The <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_descriptor_heap_type">D3D12_DESCRIPTOR_HEAP_TYPE</a>-typed value that specifies the type of descriptor heap to copy with. This is required as different descriptor types may have different sizes.

Both the source and destination descriptor heaps must have the same type, else the debug layer will emit an error.</param>
    </summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::RSSetScissorRects">
    <summary>
      <para>Binds an array of scissor rectangles to the rasterizer stage.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-rssetscissorrects" /></para>
      <param name="NumRects">The number of scissor rectangles to bind.</param>
      <param name="pRects">An array of scissor rectangles.</param>
    </summary>
  </comment>
  <comment id="ID3D12VideoMotionEstimator">
    <summary>
      <para>This interface maintains context for video motion estimation operations.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/nn-d3d12video-id3d12videomotionestimator" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TEX2D_SRV">
    <summary>
      <para>Describes the subresource from a 2D texture to use in a shader-resource view.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_tex2d_srv" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TEX2D_SRV::MostDetailedMip">
    <summary>Index of the most detailed mipmap level to use; this number is between 0 and <b>MipLevels</b> (from the original Texture2D for which <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12device-createshaderresourceview">ID3D12Device::CreateShaderResourceView</a> creates a view) -1.</summary>
  </comment>
  <comment id="D3D12_TEX2D_SRV::MipLevels">
    <summary>The maximum number of mipmap levels for the view of the texture. See the remarks in <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tex1d_srv">D3D12_TEX1D_SRV</a>.
            

Set to -1 to indicate all the mipmap levels from <b>MostDetailedMip</b> on down to least detailed.</summary>
  </comment>
  <comment id="D3D12_TEX2D_SRV::PlaneSlice">
    <summary>The index (plane slice number) of the plane to use in the texture.</summary>
  </comment>
  <comment id="D3D12_TEX2D_SRV::ResourceMinLODClamp">
    <summary>A value to clamp sample LOD values to. For example, if you specify 2.0f for the clamp value, you ensure that no individual sample accesses a mip level less than 2.0f.</summary>
  </comment>
  <comment id="D3D12_VIDEO_FIELD_TYPE">
    <summary>
      <para>Specifies how a video frame is interlaced.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ne-d3d12video-d3d12_video_field_type" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_FIELD_TYPE::D3D12_VIDEO_FIELD_TYPE_NONE">
    <summary>The frame is progressive.</summary>
  </comment>
  <comment id="D3D12_VIDEO_FIELD_TYPE::D3D12_VIDEO_FIELD_TYPE_INTERLACED_TOP_FIELD_FIRST">
    <summary>The frame is interlaced. The top field of each frame is displayed first.</summary>
  </comment>
  <comment id="D3D12_VIDEO_FIELD_TYPE::D3D12_VIDEO_FIELD_TYPE_INTERLACED_BOTTOM_FIELD_FIRST">
    <summary>The frame is interlaced. The bottom field of each frame is displayed first.</summary>
  </comment>
  <comment id="ID3D12PipelineState::GetCachedBlob">
    <summary>
      <para>Gets the cached blob representing the pipeline state.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12pipelinestate-getcachedblob" /></para>
      <param name="ppBlob">After this method returns, points to the cached blob representing the pipeline state.</param>
    </summary>
  </comment>
  <comment id="ID3D12CommandList::GetType">
    <summary>
      <para>Gets the type of the command list, such as direct, bundle, compute, or copy.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12commandlist-gettype" /></para>
    </summary>
  </comment>
  <comment id="D3D12_HEAP_DESC">
    <summary>
      <para>Describes a heap.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_heap_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_HEAP_DESC::SizeInBytes">
    <summary>The size, in bytes, of the heap.
            To avoid wasting memory, applications should pass <i>SizeInBytes</i> values which are multiples of the effective <i>Alignment</i>;
            but non-aligned <i>SizeInBytes</i> is also supported, for convenience.
            To find out how large a heap must be to support textures with undefined layouts and adapter-specific sizes, call <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12device-getresourceallocationinfo">ID3D12Device::GetResourceAllocationInfo</a>.</summary>
  </comment>
  <comment id="D3D12_HEAP_DESC::Properties">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_heap_properties">D3D12_HEAP_PROPERTIES</a> structure that describes the heap properties.</summary>
  </comment>
  <comment id="D3D12_HEAP_DESC::Alignment">
    <summary>The alignment value for the heap.  Valid values:
            

<table>
<tr>
<th>Value</th>
<th>Description</th>
</tr>
<tr>
<td>0
                </td>
<td>An alias for 64KB.
                </td>
</tr>
<tr>
<td>D3D12_DEFAULT_RESOURCE_PLACEMENT_ALIGNMENT
                </td>
<td>#defined as 64KB.
                </td>
</tr>
<tr>
<td>D3D12_DEFAULT_MSAA_RESOURCE_PLACEMENT_ALIGNMENT
                </td>
<td>#defined as 4MB.
                  An application must decide whether the heap will contain multi-sample anti-aliasing (MSAA), in which case, the application must choose D3D12_DEFAULT_MSAA_RESOURCE_PLACEMENT_ALIGNMENT.
                </td>
</tr>
</table></summary>
  </comment>
  <comment id="D3D12_HEAP_DESC::Flags">
    <summary>A combination of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_heap_flags">D3D12_HEAP_FLAGS</a>-typed values that are combined by using a bitwise-OR operation.
            The resulting value identifies heap options.
            When creating heaps to support adapters with resource heap tier 1, an application must choose some flags.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList1::ResolveSubresourceRegion">
    <summary>
      <para>Copy a region of a multisampled or compressed resource into a non-multisampled or non-compressed resource.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist1-resolvesubresourceregion" /></para>
      <param name="pDstResource"><a href="https://docs.microsoft.com/visualstudio/code-quality/annotating-function-parameters-and-return-values?view=vs-2015">SAL</a>: <c>_In_</c>

Destination resource. Must be created with the <b>D3D11_USAGE_DEFAULT</b> flag and must be single-sampled unless its to be resolved from a compressed resource (<b>D3D12_RESOLVE_MODE_DECOMPRESS</b>); in this case it must have the same sample count as the compressed source.</param>
      <param name="DstSubresource"><a href="https://docs.microsoft.com/visualstudio/code-quality/annotating-function-parameters-and-return-values?view=vs-2015">SAL</a>: <c>_In_</c>

A zero-based index that identifies the destination subresource. Use <a href="https://docs.microsoft.com/windows/desktop/direct3d12/d3d12calcsubresource">D3D12CalcSubresource</a> to calculate the subresource index if the parent resource is complex.</param>
      <param name="DstX"><a href="https://docs.microsoft.com/visualstudio/code-quality/annotating-function-parameters-and-return-values?view=vs-2015">SAL</a>: <c>_In_</c>

The X coordinate of the left-most edge of the destination region. The width of the destination region is the same as the width of the source rect.</param>
      <param name="DstY"><a href="https://docs.microsoft.com/visualstudio/code-quality/annotating-function-parameters-and-return-values?view=vs-2015">SAL</a>: <c>_In_</c>

The Y coordinate of the top-most edge of the destination region. The height of the destination region is the same as the height of the source rect.</param>
      <param name="pSrcResource"><a href="https://docs.microsoft.com/visualstudio/code-quality/annotating-function-parameters-and-return-values?view=vs-2015">SAL</a>: <c>_In_</c>

Source resource. Must be multisampled or compressed.</param>
      <param name="SrcSubresource"><a href="https://docs.microsoft.com/visualstudio/code-quality/annotating-function-parameters-and-return-values?view=vs-2015">SAL</a>: <c>_In_</c>

A zero-based index that identifies the source subresource.</param>
      <param name="pSrcRect"><a href="https://docs.microsoft.com/visualstudio/code-quality/annotating-function-parameters-and-return-values?view=vs-2015">SAL</a>: <c>_In_opt_</c>

Specifies the rectangular region of the source resource to be resolved. Passing NULL for <i>pSrcRect</i> specifies that the entire subresource is to be resolved.</param>
      <param name="Format"><a href="https://docs.microsoft.com/visualstudio/code-quality/annotating-function-parameters-and-return-values?view=vs-2015">SAL</a>: <c>_In_</c>

A DXGI_FORMAT that specifies how the source and destination resource formats are consolidated.</param>
      <param name="ResolveMode"><a href="https://docs.microsoft.com/visualstudio/code-quality/annotating-function-parameters-and-return-values?view=vs-2015">SAL</a>: <c>_In_</c>

Specifies the operation used to resolve the source samples.

When using the <b>D3D12_RESOLVE_MODE_DECOMPRESS</b> operation, the sample count can be larger than 1 as long as the source and destination have the same sample count, and source and destination may specify the same resource as long as the source rect aligns with the destination X and Y coordinates, in which case decompression occurs in place.

When using the <b>D3D12_RESOLVE_MODE_MIN</b>, <b>D3D12_RESOLVE_MODE_MAX</b>, or <b>D3D12_RESOLVE_MODE_AVERAGE</b> operation, the destination must have a sample count of 1.</param>
    </summary>
  </comment>
  <comment id="D3D12_HEAP_TYPE">
    <summary>
      <para>Specifies the type of heap. When resident, heaps reside in a particular physical memory pool with certain CPU cache properties.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_heap_type" /></para>
    </summary>
  </comment>
  <comment id="D3D12_HEAP_TYPE::D3D12_HEAP_TYPE_DEFAULT">
    <summary>Specifies the default heap.
            This heap type experiences the most bandwidth for the GPU, but cannot provide CPU access.
            The GPU can read and write to the memory from this pool, and resource transition barriers may be changed.
            The majority of heaps and resources are expected to be located here, and are typically populated through resources in upload heaps.</summary>
  </comment>
  <comment id="D3D12_HEAP_TYPE::D3D12_HEAP_TYPE_UPLOAD">
    <summary>Specifies a heap used for uploading.
              This heap type has CPU access optimized for uploading to the GPU, but does not experience the maximum amount of bandwidth for the GPU.
              This heap type is best for CPU-write-once, GPU-read-once data; but GPU-read-once is stricter than necessary.
              GPU-read-once-or-from-cache is an acceptable use-case for the data; but such usages are hard to judge due to differing GPU cache designs and sizes.
              If in doubt, stick to the GPU-read-once definition or profile the difference on many GPUs between copying the data to a _DEFAULT heap vs. reading the data from an _UPLOAD heap.
            

Resources in this heap must be created with <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_states">D3D12_RESOURCE_STATE</a>_GENERIC_READ and cannot be changed away from this.
              The CPU address for such heaps is commonly not efficient for CPU reads.
            

The following are typical usages for _UPLOAD heaps:
            

<ul>
<li>Initializing resources in a _DEFAULT heap with data from the CPU.
              </li>
<li>Uploading dynamic data in a constant buffer that is read, repeatedly, by each vertex or pixel.
              </li>
</ul>
The following are likely not good usages for _UPLOAD heaps:
            

<ul>
<li>Re-initializing the contents of a resource every frame.
              </li>
<li>Uploading constant data which is only used every other Draw call, where each Draw uses a non-trivial amount of other data.
              </li>
</ul></summary>
  </comment>
  <comment id="D3D12_HEAP_TYPE::D3D12_HEAP_TYPE_READBACK">
    <summary>Specifies a heap used for reading back.
              This heap type has CPU access optimized for reading data back from the GPU, but does not experience the maximum amount of bandwidth for the GPU.
              This heap type is best for GPU-write-once, CPU-readable data.
              The CPU cache behavior is write-back, which is conducive for multiple sub-cache-line CPU reads.
            

Resources in this heap must be created with <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_states">D3D12_RESOURCE_STATE</a>_COPY_DEST, and cannot be changed away from this.</summary>
  </comment>
  <comment id="D3D12_HEAP_TYPE::D3D12_HEAP_TYPE_CUSTOM">
    <summary>Specifies a custom heap.
            The application may specify the memory pool and CPU cache properties directly, which can be useful for UMA optimizations, multi-engine, multi-adapter, or other special cases.
            To do so, the application is expected to understand the adapter architecture to make the right choice.
            For more details, see 
            <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_feature">D3D12_FEATURE</a>_ARCHITECTURE, 
            <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_feature_data_architecture">D3D12_FEATURE_DATA_ARCHITECTURE</a>, and 
            <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12device-getcustomheapproperties">GetCustomHeapProperties</a>.</summary>
  </comment>
  <comment id="D3D12_DEPTH_STENCILOP_DESC">
    <summary>
      <para>Describes stencil operations that can be performed based on the results of stencil test.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_depth_stencilop_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DEPTH_STENCILOP_DESC::StencilFailOp">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_stencil_op">D3D12_STENCIL_OP</a>-typed value that identifies the stencil operation to perform when stencil testing fails.</summary>
  </comment>
  <comment id="D3D12_DEPTH_STENCILOP_DESC::StencilDepthFailOp">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_stencil_op">D3D12_STENCIL_OP</a>-typed value that identifies the stencil operation to perform when stencil testing passes and depth testing fails.</summary>
  </comment>
  <comment id="D3D12_DEPTH_STENCILOP_DESC::StencilPassOp">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_stencil_op">D3D12_STENCIL_OP</a>-typed value that identifies the stencil operation to perform when stencil testing and depth testing both pass.</summary>
  </comment>
  <comment id="D3D12_DEPTH_STENCILOP_DESC::StencilFunc">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_comparison_func">D3D12_COMPARISON_FUNC</a>-typed value that identifies the function that compares stencil data against existing stencil data.</summary>
  </comment>
  <comment id="ID3D12DebugDevice1">
    <summary>
      <para>Specifies device-wide debug layer settings.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nn-d3d12sdklayers-id3d12debugdevice1" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_SAMPLE">
    <summary>
      <para>Describes the width, height, format, and color space of a picture buffer.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_video_sample" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_SAMPLE::Width">
    <summary>The width of the sample.</summary>
  </comment>
  <comment id="D3D12_VIDEO_SAMPLE::Height">
    <summary>The height of the sample.</summary>
  </comment>
  <comment id="D3D12_VIDEO_SAMPLE::Format">
    <summary>A <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_format.md">D3D12_VIDEO_FORMAT</a> structure describing the format and colorspace of the sample.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM">
    <summary>
      <para>Provides data for calls to ID3D12VideoDevice::CheckFeatureSupport when the feature specified is D3D12_FEATURE_VIDEO_DECODE_HISTOGRAM.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_feature_data_video_decode_histogram" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM::NodeIndex">
    <summary>For single GPU operation, set this to zero. If there are multiple GPU nodes, set a bit to identify the node (the device's physical adapter) to which the command queue applies. Each bit in the mask corresponds to a single node. Only 1 bit may be set.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM::DecodeProfile">
    <summary>A GUID representing the decode profile for which histogram capabilities will be queried. Get a list of available profile GUIDs by calling [ID3D12VideoDevice::CheckFeatureSupport](nf-d3d12video-id3d12videodevice-checkfeaturesupport.md) when the feature specified is <a href="https://docs.microsoft.comne-d3d12video-d3d12_feature_video.md">D3D12\_FEATURE\_VIDEO\_DECODE\_PROFILES</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM::Width">
    <summary>The decode width of the source stream.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM::Height">
    <summary>The decode height of the source stream.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM::DecodeFormat">
    <summary>The <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI\_FORMAT</a> representing the decode format.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM::Components">
    <summary>A bitwise OR combination of values from the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_decode_histogram_component_flags.md">D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS</a> enumeration specifying the components of a DXGI_FORMAT for which histogram support will be queried.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM::BinCount">
    <summary>The number of per component bins supported. This value must be greater than or equal to 64 and must be a power of 2 (e.g. 64, 128, 256, 512...).</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODE_HISTOGRAM::CounterBitDepth">
    <summary>The bit depth of the bin counter.  The counter is always stored in a 32-bit value and therefore this value must specify 32 bits or less. The counter is stored in the lower bits of the 32-bit storage.  The upper bits are set to zero.  If the bin count exceeds this bit depth, the value is set to the maximum counter value. Valid values for <i>CounterBitDepth</i> are 16, 24, and 32.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1">
    <summary>
      <para>Specifies the parameters for decode output conversion.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_video_decode_conversion_arguments1" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1::Enable">
    <summary>A boolean value indicating whether decode conversion should be used.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1::pReferenceTexture2D">
    <summary>A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a> containing the native decoding output. When downsampling is enabled, the output at native decode resolution, color space, and format may be required for future decode submissions (as reference frames, for instance).</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1::ReferenceSubresource">
    <summary>The subresource index of the resource provided in <i>pDecodeTexture2D</i> to use.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1::OutputColorSpace">
    <summary>A value from the <a href="https://docs.microsoft.com/windows/desktop/api/dxgicommon/ne-dxgicommon-dxgi_color_space_type">DXGI_COLOR_SPACE_TYPE</a> enumeration specifying the target color space of the output.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1::DecodeColorSpace">
    <summary>A value from the <a href="https://docs.microsoft.com/windows/desktop/api/dxgicommon/ne-dxgicommon-dxgi_color_space_type">DXGI_COLOR_SPACE_TYPE</a> enumeration specifying the source-decoded color space before conversion.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1::OutputWidth">
    <summary>The output width, in pixels.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS1::OutputHeight">
    <summary>The output width, in pixels.</summary>
  </comment>
  <comment id="ID3D12Debug">
    <summary>
      <para>An interface used to turn on the debug layer.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nn-d3d12sdklayers-id3d12debug" /></para>
    </summary>
  </comment>
  <comment id="ID3D12CommandQueue::SetMarker">
    <summary>
      <para>Not intended to be called directly.  Use the PIX event runtime to insert events into a command queue.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12commandqueue-setmarker" /></para>
      <param name="Metadata">Internal.</param>
      <param name="pData">Internal.</param>
      <param name="Size">Internal.</param>
    </summary>
  </comment>
  <comment id="D3D12_CPU_PAGE_PROPERTY">
    <summary>
      <para>Specifies the CPU-page properties for the heap.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_cpu_page_property" /></para>
    </summary>
  </comment>
  <comment id="D3D12_CPU_PAGE_PROPERTY::D3D12_CPU_PAGE_PROPERTY_UNKNOWN">
    <summary>The CPU-page property is unknown.</summary>
  </comment>
  <comment id="D3D12_CPU_PAGE_PROPERTY::D3D12_CPU_PAGE_PROPERTY_NOT_AVAILABLE">
    <summary>The CPU cannot access the heap, therefore no page properties are available.</summary>
  </comment>
  <comment id="D3D12_CPU_PAGE_PROPERTY::D3D12_CPU_PAGE_PROPERTY_WRITE_COMBINE">
    <summary>The CPU-page property is write-combined.</summary>
  </comment>
  <comment id="D3D12_CPU_PAGE_PROPERTY::D3D12_CPU_PAGE_PROPERTY_WRITE_BACK">
    <summary>The CPU-page property is write-back.</summary>
  </comment>
  <comment id="ID3D12ProtectedSession::GetSessionStatus">
    <summary>
      <para>Gets the status of the protected session.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12protectedsession-getsessionstatus" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_CONFIGURATION">
    <summary>
      <para>Describes the configuration for a video decoder.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_video_decode_configuration" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_CONFIGURATION::DecodeProfile">
    <summary>A GUID identifying the profile for the decoder, such as D3D12\_VIDEO\_DECODE\_PROFILE\_H264 or D3D12\_VIDEO\_DECODE\_PROFILE\_HEVC\_MAIN. For a list of supported GUIDs, see [Direct3D 12 Video GUIDs](/windows/desktop/medfound/direct3d-12-video-guids).</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_CONFIGURATION::BitstreamEncryption">
    <summary>A member of the <a href="https://docs.microsoft.comne-d3d12video-d3d12_bitstream_encryption_type.md">D3D12\_BITSTREAM\_ENCRYPTION\_TYPE</a> enumeration specifying the type of bitstream encryption.  For no encryption, use D3D12\_BITSTREAM\_ENCRYPTION\_TYPE\_NONE.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_CONFIGURATION::InterlaceType">
    <summary>A member of the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_frame_coded_interlace_type.md">D3D12\_VIDEO\_FRAME\_CODED\_INTERLACE\_TYPE</a> enumeration the desired interlace type used by the coded frames.</summary>
  </comment>
  <comment id="ID3D12VersionedRootSignatureDeserializer::GetRootSignatureDescAtVersion">
    <summary>
      <para>Converts root signature description structures to a requested version.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12versionedrootsignaturedeserializer-getrootsignaturedescatversion" /></para>
      <param name="convertToVersion">Specifies the required <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d_root_signature_version">D3D_ROOT_SIGNATURE_VERSION</a>.</param>
      <param name="ppDesc">Contains the deserialized root signature in a  <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_versioned_root_signature_desc">D3D12_VERSIONED_ROOT_SIGNATURE_DESC</a> structure.</param>
    </summary>
  </comment>
  <comment id="ID3D12CommandQueue::ExecuteCommandLists">
    <summary>
      <para>Submits an array of command lists for execution.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12commandqueue-executecommandlists" /></para>
      <param name="NumCommandLists">The number of command lists to be executed.</param>
      <param name="ppCommandLists">The array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12commandlist">ID3D12CommandList</a> command lists to be executed.</param>
    </summary>
  </comment>
  <comment id="ID3D12StateObjectProperties::GetShaderStackSize">
    <summary>
      <para>Gets the amount of stack memory required to invoke a raytracing shader in HLSL.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12stateobjectproperties-getshaderstacksize" /></para>
      <param name="pExportName">The shader entrypoint in the state object for which to retrieve stack size.  For hit groups, an individual shader within the hit group must be specified using the syntax:

hitGroupName::shaderType

Where <i>hitGroupName</i> is the entrypoint name for the hit group and <i>shaderType</i> is one of: 

<ul>
<li>intersection</li>
<li>anyhit</li>
<li>closesthit</li>
</ul>
These values are all case-sensitive.

An example value is: "myTreeLeafHitGroup::anyhit".</param>
    </summary>
  </comment>
  <comment id="D3D12_TEX2D_ARRAY_UAV">
    <summary>
      <para>Describes an array of unordered-access 2D texture resources.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_tex2d_array_uav" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TEX2D_ARRAY_UAV::MipSlice">
    <summary>The mipmap slice index.</summary>
  </comment>
  <comment id="D3D12_TEX2D_ARRAY_UAV::FirstArraySlice">
    <summary>The zero-based index of the first array slice to be accessed.</summary>
  </comment>
  <comment id="D3D12_TEX2D_ARRAY_UAV::ArraySize">
    <summary>The number of slices in the array.</summary>
  </comment>
  <comment id="D3D12_TEX2D_ARRAY_UAV::PlaneSlice">
    <summary>The index (plane slice number) of the plane to use in an array of textures.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS4">
    <summary>
      <para>Indicates the level of support for 64KB-aligned MSAA textures, cross-API sharing, and native 16-bit shader operations.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_feature_data_d3d12_options4" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS4::MSAA64KBAlignedTextureSupported">
    <summary>Indicates whether 64KB-aligned MSAA textures are supported.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS4::SharedResourceCompatibilityTier">
    <summary>Indicates the tier of cross-API sharing support.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS4::Native16BitShaderOpsSupported">
    <summary>Indicates native 16-bit shader operations are supported. These operations require shader model 6_2. For more information, see the [16-Bit Scalar Types](https://github.com/microsoft/DirectXShaderCompiler/wiki/16-Bit-Scalar-Types) HLSL reference.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS">
    <summary>
      <para>Specifies output stream arguments for the output passed to ID3D12VideoCommandList::ProcessFrames.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_video_process_output_stream_arguments" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS::OutputStream">
    <summary>An array of <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_process_output_stream.md">D3D12_VIDEO_PROCESS_OUTPUT_STREAM</a> structures representing the output surfaces for the video process command.  If stereo output is enabled, index zero contains the left output while index 1 contains the right input.  If stereo output is not enabled, only index 0 is used to specify the output while index 1 should be set to nullptr.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS::TargetRectangle">
    <summary>The target rectangle is the area within the destination surface where the output will be drawn. The target rectangle is given in pixel coordinates, relative to the destination surface.</summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_DEPTH_STENCIL_DESC">
    <summary>
      <para>Describes a binding (fixed for the duration of the render pass) to a depth stencil view (DSV), as well as its beginning and ending access characteristics.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_render_pass_depth_stencil_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_DEPTH_STENCIL_DESC::cpuDescriptor">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_cpu_descriptor_handle">D3D12_CPU_DESCRIPTOR_HANDLE</a>. The CPU descriptor handle corresponding to the depth stencil view (DSV).</summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_DEPTH_STENCIL_DESC::DepthBeginningAccess">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_render_pass_beginning_access">D3D12_RENDER_PASS_BEGINNING_ACCESS</a>. The access to the depth buffer requested at the transition into a render pass.</summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_DEPTH_STENCIL_DESC::StencilBeginningAccess">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_render_pass_beginning_access">D3D12_RENDER_PASS_BEGINNING_ACCESS</a>. The access to the stencil buffer requested at the transition into a render pass.</summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_DEPTH_STENCIL_DESC::DepthEndingAccess">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_render_pass_ending_access">D3D12_RENDER_PASS_ENDING_ACCESS</a>. The access to the depth buffer requested at the transition out of a render pass.</summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_DEPTH_STENCIL_DESC::StencilEndingAccess">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_render_pass_ending_access">D3D12_RENDER_PASS_ENDING_ACCESS</a>. The access to the stencil buffer requested at the transition out of a render pass.</summary>
  </comment>
  <comment id="D3D12_STATIC_SAMPLER_DESC">
    <summary>
      <para>Describes a static sampler.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_static_sampler_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_STATIC_SAMPLER_DESC::Filter">
    <summary>The filtering method to use when sampling a texture, as a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_filter">D3D12_FILTER</a> enumeration constant.</summary>
  </comment>
  <comment id="D3D12_STATIC_SAMPLER_DESC::AddressU">
    <summary>Specifies the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_texture_address_mode">D3D12_TEXTURE_ADDRESS_MODE</a> mode to use for resolving a <i>u</i> texture coordinate that is outside the 0 to 1 range.</summary>
  </comment>
  <comment id="D3D12_STATIC_SAMPLER_DESC::AddressV">
    <summary>Specifies the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_texture_address_mode">D3D12_TEXTURE_ADDRESS_MODE</a> mode to use for resolving a <i>v</i> texture coordinate that is outside the 0 to 1 range.</summary>
  </comment>
  <comment id="D3D12_STATIC_SAMPLER_DESC::AddressW">
    <summary>Specifies the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_texture_address_mode">D3D12_TEXTURE_ADDRESS_MODE</a> mode to use for resolving a <i>w</i> texture coordinate that is outside the 0 to 1 range.</summary>
  </comment>
  <comment id="D3D12_STATIC_SAMPLER_DESC::MipLODBias">
    <summary>Offset from the calculated mipmap level. For example, if Direct3D calculates that a texture should be sampled at mipmap level 3 and MipLODBias is 2, then the texture will be sampled at mipmap level 5.</summary>
  </comment>
  <comment id="D3D12_STATIC_SAMPLER_DESC::MaxAnisotropy">
    <summary>Clamping value used if D3D12_FILTER_ANISOTROPIC or D3D12_FILTER_COMPARISON_ANISOTROPIC is specified as the filter. Valid values are between 1 and 16.</summary>
  </comment>
  <comment id="D3D12_STATIC_SAMPLER_DESC::ComparisonFunc">
    <summary>A function that compares sampled data against existing sampled data. 
            The function options are listed in <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_comparison_func">D3D12_COMPARISON_FUNC</a>.</summary>
  </comment>
  <comment id="D3D12_STATIC_SAMPLER_DESC::BorderColor">
    <summary>One member of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_static_border_color">D3D12_STATIC_BORDER_COLOR</a>, the border color to use if D3D12_TEXTURE_ADDRESS_MODE_BORDER is specified for AddressU, AddressV, or AddressW. 
            Range must be between 0.0 and 1.0 inclusive.</summary>
  </comment>
  <comment id="D3D12_STATIC_SAMPLER_DESC::MinLOD">
    <summary>Lower end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level higher than that is less detailed.</summary>
  </comment>
  <comment id="D3D12_STATIC_SAMPLER_DESC::MaxLOD">
    <summary>Upper end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level higher than that is less detailed. This value must be greater than or equal to MinLOD. To have no upper limit on LOD set this to a large value such as D3D12_FLOAT32_MAX.</summary>
  </comment>
  <comment id="D3D12_STATIC_SAMPLER_DESC::ShaderRegister">
    <summary>The <i>ShaderRegister</i> and <i>RegisterSpace</i> parameters correspond to the binding syntax of HLSL.  For example, in HLSL:
            

<pre class="syntax" xml:space="preserve"><c>Texture2D&lt;float4&gt; a : register(t2, space3);</c></pre>
This corresponds to a  <i>ShaderRegister</i> of 2 (indicating the type is SRV), and <i>RegisterSpace</i> is 3.
            

The  <i>ShaderRegister</i> and <i>RegisterSpace</i> pair is needed to establish correspondence between shader resources and runtime heap descriptors, using the root signature data structure.</summary>
  </comment>
  <comment id="D3D12_STATIC_SAMPLER_DESC::RegisterSpace">
    <summary>See the description for <i>ShaderRegister</i>.
            Register space is optional; the default register space is 0.</summary>
  </comment>
  <comment id="D3D12_STATIC_SAMPLER_DESC::ShaderVisibility">
    <summary>Specifies the visibility of the sampler to the pipeline shaders, one member of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_shader_visibility">D3D12_SHADER_VISIBILITY</a>.</summary>
  </comment>
  <comment id="ID3D12Debug1::EnableDebugLayer">
    <summary>
      <para>Enables the debug layer.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12debug1-enabledebuglayer" /></para>
    </summary>
  </comment>
  <comment id="ID3D12LibraryReflection::GetFunctionByIndex">
    <summary>
      <para>Gets the function reflector.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12libraryreflection-getfunctionbyindex" /></para>
      <param name="FunctionIndex">The zero-based index of the function reflector to retrieve.</param>
    </summary>
  </comment>
  <comment id="ID3D12Device1::CreatePipelineLibrary">
    <summary>
      <para>Creates a cached pipeline library.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device1-createpipelinelibrary" /></para>
      <param name="pLibraryBlob">If the input library blob is empty, then the initial content of the library is empty. If the input library blob is not empty, then it is validated for integrity, parsed, and the pointer is stored. The pointer provided as input to this method must remain valid for the lifetime of the object returned. For efficiency reasons, the data is not copied.</param>
      <param name="BlobLength">Specifies the length of <i>pLibraryBlob</i> in bytes.</param>
      <param name="riid">Specifies a unique REFIID for the <a href="https://docs.microsoft.com./nn-d3d12-id3d12pipelinelibrary.md">ID3D12PipelineLibrary</a> object. Typically set this and the following parameter with the macro <c>IID_PPV_ARGS(&amp;library)</c>, where <b>Library</b> is the name of the object.</param>
      <param name="ppPipelineLibrary">Returns a pointer to the created library.</param>
    </summary>
  </comment>
  <comment id="ID3D12InfoQueue::GetMuteDebugOutput">
    <summary>
      <para>Get a boolean that determines if debug output is on or off.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getmutedebugoutput" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_TIER">
    <summary>
      <para>Specifies the level of support for render passes on a graphics device.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_render_pass_tier" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_TIER::D3D12_RENDER_PASS_TIER_0">
    <summary>The user-mode display driver hasn't implemented render passes, and so the feature is provided only via software emulation. Render passes might not provide a performance advantage at this level of support.</summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_TIER::D3D12_RENDER_PASS_TIER_1">
    <summary>The render passes feature is implemented by the user-mode display driver, and render target/depth buffer writes may be accelerated. Unordered access view (UAV) writes are not efficiently supported within the render pass.</summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_TIER::D3D12_RENDER_PASS_TIER_2">
    <summary>The render passes feature is implemented by the user-mode display driver, render target/depth buffer writes may be accelerated, and unordered access view (UAV) writes (provided that writes in a render pass are not read until a subsequent render pass) are likely to be more efficient than issuing the same work without using a render pass.</summary>
  </comment>
  <comment id="D3D12_RANGE">
    <summary>
      <para>Describes a memory range.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_range" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RANGE::Begin">
    <summary>The offset, in bytes, denoting the beginning of a memory range.</summary>
  </comment>
  <comment id="D3D12_RANGE::End">
    <summary>The offset, in bytes, denoting the end of a memory range.
            <b>End</b> is one-past-the-end.</summary>
  </comment>
  <comment id="D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC">
    <summary>
      <para>Describes a raytracing acceleration structure. Pass this structure into ID3D12GraphicsCommandList4::BuildRaytracingAccelerationStructure to describe the acceleration structure to be built.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_build_raytracing_acceleration_structure_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC::DestAccelerationStructureData">
    <summary>Location to store resulting acceleration structure.  <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12device5-getraytracingaccelerationstructureprebuildinfo">ID3D12Device5::GetRaytracingAccelerationStructurePrebuildInfo</a> reports the amount of memory required for the result here given a set of acceleration structure build parameters.  

The address must be aligned to 256 bytes, defined as <a href="https://docs.microsoft.com/windows/desktop/direct3d12/constants">D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BYTE_ALIGNMENT</a>.

&gt; [!IMPORTANT]
&gt; The memory must be in state [<b>D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE</b>](/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_states).</summary>
  </comment>
  <comment id="D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC::Inputs">
    <summary>Description of the input data for the acceleration structure build.  This is data is stored in a separate structure because it is also used with <b>GetRaytracingAccelerationStructurePrebuildInfo</b>.</summary>
  </comment>
  <comment id="D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_DESC::SourceAccelerationStructureData">
    <summary>Address of an existing acceleration structure if an acceleration structure update (an incremental build) is being requested, by setting  <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_raytracing_acceleration_structure_build_flags">D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_PERFORM_UPDATE</a> in the Flags parameter.  Otherwise this address must be NULL.

If this address is the same as <i>DestAccelerationStructureData</i>, the update is to be performed in-place.  Any other form of overlap of the source and destination memory is invalid and produces undefined behavior.

The address must be aligned to 256 bytes, defined as <a href="https://docs.microsoft.com/windows/desktop/direct3d12/constants">D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BYTE_ALIGNMENT</a>, which should automatically be the case because any existing acceleration structure passed in here would have already been required to be placed with such alignment.

&gt; [!IMPORTANT]
&gt; The memory must be in state [<b>D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE</b>](/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_states).</summary>
  </comment>
  <comment id="D3D12_ROOT_DESCRIPTOR_TABLE">
    <summary>
      <para>Describes the root signature 1.0 layout of a descriptor table as a collection of descriptor ranges that are all relative to a single base descriptor handle.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_root_descriptor_table" /></para>
    </summary>
  </comment>
  <comment id="D3D12_ROOT_DESCRIPTOR_TABLE::NumDescriptorRanges">
    <summary>The number of descriptor ranges in the table layout.</summary>
  </comment>
  <comment id="D3D12_ROOT_DESCRIPTOR_TABLE::pDescriptorRanges">
    <summary>An array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_descriptor_range">D3D12_DESCRIPTOR_RANGE</a> structures that describe the descriptor ranges.</summary>
  </comment>
  <comment id="D3D12_PROTECTED_SESSION_STATUS">
    <summary>
      <para>Defines constants that specify protected session status.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_protected_session_status" /></para>
    </summary>
  </comment>
  <comment id="D3D12_PROTECTED_SESSION_STATUS::D3D12_PROTECTED_SESSION_STATUS_OK">
    <summary>Indicates that the protected session is in a valid state.</summary>
  </comment>
  <comment id="D3D12_PROTECTED_SESSION_STATUS::D3D12_PROTECTED_SESSION_STATUS_INVALID">
    <summary>Indicates that the protected session is not in a valid state.</summary>
  </comment>
  <comment id="D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER">
    <summary>
      <para>Defines the header for a serialized raytracing acceleration structure.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_serialized_raytracing_acceleration_structure_header" /></para>
    </summary>
  </comment>
  <comment id="D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER::DriverMatchingIdentifier">
    <summary>The driver-matching identifier.</summary>
  </comment>
  <comment id="D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER::SerializedSizeInBytesIncludingHeader">
    <summary>The size of serialized data.</summary>
  </comment>
  <comment id="D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER::DeserializedSizeInBytes">
    <summary>Size of the memory that will be consumed when the acceleration structure is deserialized.  This value is less than or equal to the size of the original acceleration structure before it was serialized.</summary>
  </comment>
  <comment id="D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER::NumBottomLevelAccelerationStructurePointersAfterHeader">
    <summary>Size of the array of <a href="https://docs.microsoft.com/windows/desktop/direct3d12/d3d12_gpu_virtual_address">D3D12_GPU_VIRTUAL_ADDRESS</a> values that follow the header.  For more information, see <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_raytracing_acceleration_structure_postbuild_info_serialization_desc">D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC</a>.</summary>
  </comment>
  <comment id="ID3D12Device::CreateCommandList">
    <summary>
      <para>Creates a command list.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createcommandlist" /></para>
      <param name="nodeMask">For single-GPU operation, set this to zero. If there are multiple GPU nodes, then set a bit to identify the node (the device's physical adapter) for which to create the command list. Each bit in the mask corresponds to a single node. Only one bit must be set. Also see [Multi-adapter systems](/windows/win32/direct3d12/multi-engine).</param>
      <param name="type">Specifies the type of command list to create.</param>
      <param name="pCommandAllocator">A pointer to the command allocator object from which the device creates command lists.</param>
      <param name="pInitialState">An optional pointer to the pipeline state object that contains the initial pipeline state for the command list. If it is <c>nulltpr</c>, then the runtime sets a dummy initial pipeline state, so that drivers don't have to deal with undefined state. The overhead for this is low, particularly for a command list, for which the overall cost of recording the command list likely dwarfs the cost of a single initial state setting. So there's little cost in not setting the initial pipeline state parameter, if doing so is inconvenient.

For bundles, on the other hand, it might make more sense to try to set the initial state parameter (since bundles are likely smaller overall, and can be reused frequently).</param>
      <param name="riid">A reference to the globally unique identifier (<b>GUID</b>) of the command list interface to return in <i>ppCommandList</i>.</param>
      <param name="ppCommandList">A pointer to a memory block that receives a pointer to the <a href="https://docs.microsoft.com./nn-d3d12-id3d12commandlist.md">ID3D12CommandList</a> or <a href="https://docs.microsoft.com./nn-d3d12-id3d12graphicscommandlist.md">ID3D12GraphicsCommandList</a> interface for the command list.</param>
    </summary>
  </comment>
  <comment id="ID3D12Device::CreateSampler">
    <summary>
      <para>Create a sampler object that encapsulates sampling information for a texture.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createsampler" /></para>
      <param name="pDesc">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_sampler_desc">D3D12_SAMPLER_DESC</a> structure that describes the sampler.</param>
      <param name="DestDescriptor">Describes the CPU descriptor handle that represents the start of the heap that holds the sampler.</param>
    </summary>
  </comment>
  <comment id="ID3D12InfoQueue::PushEmptyRetrievalFilter">
    <summary>
      <para>Push an empty retrieval filter onto the retrieval-filter stack.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-pushemptyretrievalfilter" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RTV_DIMENSION">
    <summary>
      <para>Identifies the type of resource to view as a render target.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_rtv_dimension" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RTV_DIMENSION::D3D12_RTV_DIMENSION_UNKNOWN">
    <summary>Do not use this value, as it will cause <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12device-createrendertargetview">ID3D12Device::CreateRenderTargetView</a> to fail.</summary>
  </comment>
  <comment id="D3D12_RTV_DIMENSION::D3D12_RTV_DIMENSION_BUFFER">
    <summary>The resource will be accessed as a buffer.</summary>
  </comment>
  <comment id="D3D12_RTV_DIMENSION::D3D12_RTV_DIMENSION_TEXTURE1D">
    <summary>The resource will be accessed as a 1D texture.</summary>
  </comment>
  <comment id="D3D12_RTV_DIMENSION::D3D12_RTV_DIMENSION_TEXTURE1DARRAY">
    <summary>The resource will be accessed as an array of 1D textures.</summary>
  </comment>
  <comment id="D3D12_RTV_DIMENSION::D3D12_RTV_DIMENSION_TEXTURE2D">
    <summary>The resource will be accessed as a 2D texture.</summary>
  </comment>
  <comment id="D3D12_RTV_DIMENSION::D3D12_RTV_DIMENSION_TEXTURE2DARRAY">
    <summary>The resource will be accessed as an array of 2D textures.</summary>
  </comment>
  <comment id="D3D12_RTV_DIMENSION::D3D12_RTV_DIMENSION_TEXTURE2DMS">
    <summary>The resource will be accessed as a 2D texture with multisampling.</summary>
  </comment>
  <comment id="D3D12_RTV_DIMENSION::D3D12_RTV_DIMENSION_TEXTURE2DMSARRAY">
    <summary>The resource will be accessed as an array of 2D textures with multisampling.</summary>
  </comment>
  <comment id="D3D12_RTV_DIMENSION::D3D12_RTV_DIMENSION_TEXTURE3D">
    <summary>The resource will be accessed as a 3D texture.</summary>
  </comment>
  <comment id="D3D12_TEXTURE_ADDRESS_MODE">
    <summary>
      <para>Identifies a technique for resolving texture coordinates that are outside of the boundaries of a texture.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_texture_address_mode" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TEXTURE_ADDRESS_MODE::D3D12_TEXTURE_ADDRESS_MODE_WRAP">
    <summary>Tile the texture at every (u,v) integer junction.
            For example, for u values between 0 and 3, the texture is repeated three times.</summary>
  </comment>
  <comment id="D3D12_TEXTURE_ADDRESS_MODE::D3D12_TEXTURE_ADDRESS_MODE_MIRROR">
    <summary>Flip the texture at every (u,v) integer junction.
            For u values between 0 and 1, for example, the texture is addressed normally; between 1 and 2, the texture is flipped (mirrored); between 2 and 3, the texture is normal again; and so on.</summary>
  </comment>
  <comment id="D3D12_TEXTURE_ADDRESS_MODE::D3D12_TEXTURE_ADDRESS_MODE_CLAMP">
    <summary>Texture coordinates outside the range [0.0, 1.0] are set to the texture color at 0.0 or 1.0, respectively.</summary>
  </comment>
  <comment id="D3D12_TEXTURE_ADDRESS_MODE::D3D12_TEXTURE_ADDRESS_MODE_BORDER">
    <summary>Texture coordinates outside the range [0.0, 1.0] are set to the border color specified in <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_sampler_desc">D3D12_SAMPLER_DESC</a> or HLSL code.</summary>
  </comment>
  <comment id="D3D12_TEXTURE_ADDRESS_MODE::D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE">
    <summary>Similar to 
            <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_texture_address_mode">D3D12_TEXTURE_ADDRESS_MODE_MIRROR</a> 
            and 
            <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_texture_address_mode">D3D12_TEXTURE_ADDRESS_MODE_CLAMP</a>.
            Takes the absolute value of the texture coordinate (thus, mirroring around 0), and then clamps to the maximum value.</summary>
  </comment>
  <comment id="D3D12_AUTO_BREADCRUMB_NODE">
    <summary>
      <para>Represents Device Removed Extended Data (DRED) auto-breadcrumb data as a node in a linked list.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_auto_breadcrumb_node" /></para>
    </summary>
  </comment>
  <comment id="D3D12_AUTO_BREADCRUMB_NODE::pCommandListDebugNameA">
    <summary>A pointer to the ANSI debug name of the outstanding command list (if any).</summary>
  </comment>
  <comment id="D3D12_AUTO_BREADCRUMB_NODE::pCommandListDebugNameW">
    <summary>A pointer to the wide debug name of the outstanding command list (if any).</summary>
  </comment>
  <comment id="D3D12_AUTO_BREADCRUMB_NODE::pCommandQueueDebugNameA">
    <summary>A pointer to the ANSI debug name of the outstanding command queue (if any).</summary>
  </comment>
  <comment id="D3D12_AUTO_BREADCRUMB_NODE::pCommandQueueDebugNameW">
    <summary>A pointer to the wide debug name of the outstanding command queue (if any).</summary>
  </comment>
  <comment id="D3D12_AUTO_BREADCRUMB_NODE::pCommandList">
    <summary>A pointer to the [ID3D12GraphicsCommandList interface](nn-d3d12-id3d12graphicscommandlist.md) representing the outstanding command list at the time of execution.</summary>
  </comment>
  <comment id="D3D12_AUTO_BREADCRUMB_NODE::pCommandQueue">
    <summary>A pointer to the [ID3D12CommandQueue interface](nn-d3d12-id3d12commandqueue.md) representing the outstanding command queue.</summary>
  </comment>
  <comment id="D3D12_AUTO_BREADCRUMB_NODE::BreadcrumbCount">
    <summary>A <b>UINT32</b> containing the count of <a href="https://docs.microsoft.comne-d3d12-d3d12_auto_breadcrumb_op.md">D3D12_AUTO_BREADCRUMB_OP</a> values in the array pointed to by <c>pCommandHistory</c>.</summary>
  </comment>
  <comment id="D3D12_AUTO_BREADCRUMB_NODE::pLastBreadcrumbValue">
    <summary>A pointer to a constant <b>UINT32</b> containing the index (within the array pointed to by <c>pCommandHistory</c>) of the last render/compute operation that was completed by the GPU while executing the associated command list.</summary>
  </comment>
  <comment id="D3D12_AUTO_BREADCRUMB_NODE::pCommandHistory">
    <summary>A pointer to a constant array of <a href="https://docs.microsoft.comne-d3d12-d3d12_auto_breadcrumb_op.md">D3D12_AUTO_BREADCRUMB_OP</a> values representing all of the render/compute operations recorded into the associated command list.</summary>
  </comment>
  <comment id="D3D12_AUTO_BREADCRUMB_NODE::pNext">
    <summary>A pointer to a constant <b>D3D12_AUTO_BREADCRUMB_NODE</b> representing the next auto-breadcrumb node in the list, or <c>nullptr</c> if this is the last node.</summary>
  </comment>
  <comment id="ID3D12ShaderReflectionType::GetDesc">
    <summary>
      <para>Gets the description of a shader-reflection-variable type.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflectiontype-getdesc" /></para>
      <param name="pDesc">A pointer to a shader-type description (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d12shader/ns-d3d12shader-d3d12_shader_type_desc">D3D12_SHADER_TYPE_DESC</a>).</param>
    </summary>
  </comment>
  <comment id="D3D12_UAV_DIMENSION">
    <summary>
      <para>Identifies unordered-access view options.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_uav_dimension" /></para>
    </summary>
  </comment>
  <comment id="D3D12_UAV_DIMENSION::D3D12_UAV_DIMENSION_UNKNOWN">
    <summary>The view type is unknown.</summary>
  </comment>
  <comment id="D3D12_UAV_DIMENSION::D3D12_UAV_DIMENSION_BUFFER">
    <summary>View the resource as a buffer.</summary>
  </comment>
  <comment id="D3D12_UAV_DIMENSION::D3D12_UAV_DIMENSION_TEXTURE1D">
    <summary>View the resource as a 1D texture.</summary>
  </comment>
  <comment id="D3D12_UAV_DIMENSION::D3D12_UAV_DIMENSION_TEXTURE1DARRAY">
    <summary>View the resource as a 1D texture array.</summary>
  </comment>
  <comment id="D3D12_UAV_DIMENSION::D3D12_UAV_DIMENSION_TEXTURE2D">
    <summary>View the resource as a 2D texture.</summary>
  </comment>
  <comment id="D3D12_UAV_DIMENSION::D3D12_UAV_DIMENSION_TEXTURE2DARRAY">
    <summary>View the resource as a 2D texture array.</summary>
  </comment>
  <comment id="D3D12_UAV_DIMENSION::D3D12_UAV_DIMENSION_TEXTURE3D">
    <summary>View the resource as a 3D texture array.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::SetComputeRoot32BitConstant">
    <summary>
      <para>Sets a constant in the compute root signature.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setcomputeroot32bitconstant" /></para>
      <param name="RootParameterIndex">The slot number for binding.</param>
      <param name="SrcData">The source data for the constant to set.</param>
      <param name="DestOffsetIn32BitValues">The offset, in 32-bit values, to set the constant in the root signature.</param>
    </summary>
  </comment>
  <comment id="ID3D12VideoEncodeCommandList">
    <summary>
      <para>Encapsulates a list of graphics commands for video encoding, including motion estimation.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/nn-d3d12video-id3d12videoencodecommandlist" /></para>
    </summary>
  </comment>
  <comment id="ID3D12ShaderReflection::GetRequiresFlags">
    <summary>
      <para>Gets a group of flags that indicates the requirements of a shader.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getrequiresflags" /></para>
    </summary>
  </comment>
  <comment id="ID3D12Device::CreateReservedResource">
    <summary>
      <para>Creates a resource that is reserved, and not yet mapped to any pages in a heap.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createreservedresource" /></para>
      <param name="pDesc">A pointer to a <b>D3D12_RESOURCE_DESC</b> structure that describes the resource.</param>
      <param name="InitialState">The initial state of the resource, as a bitwise-OR'd combination of <b>D3D12_RESOURCE_STATES</b> enumeration constants.</param>
      <param name="pOptimizedClearValue">Specifies a <b>D3D12_CLEAR_VALUE</b> structure that describes the default value for a clear color.

<i>pOptimizedClearValue</i> specifies a value for which clear operations are most optimal. When the created resource is a texture with either the <a href="https://docs.microsoft.com./ne-d3d12-d3d12_resource_flags.md">D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET</a> or <b>D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL</b> flags, you should choose the value with which the clear operation will most commonly be called. You can call the clear operation with other values, but those operations won't be as efficient as when the value matches the one passed in to resource creation.

When you use <a href="https://docs.microsoft.com./ne-d3d12-d3d12_resource_dimension.md">D3D12_RESOURCE_DIMENSION_BUFFER</a>, you must set <i>pOptimizedClearValue</i> to <c>nullptr</c>.</param>
      <param name="riid">A reference to the globally unique identifier (<b>GUID</b>) of the resource interface to return in <i>ppvResource</i>. See <b>Remarks</b>.

While <i>riidResource</i> is most commonly the <b>GUID</b> of <a href="https://docs.microsoft.com./nn-d3d12-id3d12resource.md">ID3D12Resource</a>, it may be the <b>GUID</b> of any interface. If the resource object doesn't support the interface for this <b>GUID</b>, then creation fails with <b>E_NOINTERFACE</b>.</param>
      <param name="ppvResource">An optional pointer to a memory block that receives the requested interface pointer to the created resource object.

<i>ppvResource</i> can be <c>nullptr</c>, to enable capability testing. When <i>ppvResource</i> is <c>nullptr</c>, no object is created, and <b>S_FALSE</b> is returned when <i>pDesc</i> is valid.</param>
    </summary>
  </comment>
  <comment id="D3D12_ROOT_PARAMETER_TYPE">
    <summary>
      <para>Specifies the type of root signature slot.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_root_parameter_type" /></para>
    </summary>
  </comment>
  <comment id="D3D12_ROOT_PARAMETER_TYPE::D3D12_ROOT_PARAMETER_TYPE_DESCRIPTOR_TABLE">
    <summary>The slot is for a descriptor table.</summary>
  </comment>
  <comment id="D3D12_ROOT_PARAMETER_TYPE::D3D12_ROOT_PARAMETER_TYPE_32BIT_CONSTANTS">
    <summary>The slot is for root constants.</summary>
  </comment>
  <comment id="D3D12_ROOT_PARAMETER_TYPE::D3D12_ROOT_PARAMETER_TYPE_CBV">
    <summary>The slot is for a constant-buffer view (CBV).</summary>
  </comment>
  <comment id="D3D12_ROOT_PARAMETER_TYPE::D3D12_ROOT_PARAMETER_TYPE_SRV">
    <summary>The slot is for a shader-resource view (SRV).</summary>
  </comment>
  <comment id="D3D12_ROOT_PARAMETER_TYPE::D3D12_ROOT_PARAMETER_TYPE_UAV">
    <summary>The slot is for a unordered-access view (UAV).</summary>
  </comment>
  <comment id="ID3D12InfoQueue::ClearStoredMessages">
    <summary>
      <para>Clear all messages from the message queue.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-clearstoredmessages" /></para>
    </summary>
  </comment>
  <comment id="ID3D12StateObjectProperties::GetPipelineStackSize">
    <summary>
      <para>Gets the current pipeline stack size.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12stateobjectproperties-getpipelinestacksize" /></para>
    </summary>
  </comment>
  <comment id="D3D12_STREAM_OUTPUT_DESC">
    <summary>
      <para>Describes a streaming output buffer.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_stream_output_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_STREAM_OUTPUT_DESC::pSODeclaration">
    <summary>An array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_so_declaration_entry">D3D12_SO_DECLARATION_ENTRY</a> structures. Can't be <b>NULL</b> if <b>NumEntries</b> &gt; 0.</summary>
  </comment>
  <comment id="D3D12_STREAM_OUTPUT_DESC::NumEntries">
    <summary>The number of entries in the stream output declaration array that the <b>pSODeclaration</b> member points to.</summary>
  </comment>
  <comment id="D3D12_STREAM_OUTPUT_DESC::pBufferStrides">
    <summary>An array of buffer strides; each stride is the size of an element for that buffer.</summary>
  </comment>
  <comment id="D3D12_STREAM_OUTPUT_DESC::NumStrides">
    <summary>The number of strides (or buffers) that the <b>pBufferStrides</b> member points to.</summary>
  </comment>
  <comment id="D3D12_STREAM_OUTPUT_DESC::RasterizedStream">
    <summary>The index number of the stream to be sent to the rasterizer stage.</summary>
  </comment>
  <comment id="ID3D12MetaCommand::GetRequiredParameterResourceSize">
    <summary>
      <para>Retrieves the amount of memory required for the specified runtime parameter resource for a meta command, for the specified stage.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12metacommand-getrequiredparameterresourcesize" /></para>
      <param name="Stage">A <b>D3D12_META_COMMAND_PARAMETER_STAGE</b> specifying the stage to which the parameter belongs.</param>
      <param name="ParameterIndex">The zero-based index of the parameter within the stage.</param>
    </summary>
  </comment>
  <comment id="ID3D12Resource::GetDesc">
    <summary>
      <para>Gets the resource description.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12resource-getdesc" /></para>
    </summary>
  </comment>
  <comment id="ID3D12ShaderReflection::GetMovcInstructionCount">
    <summary>
      <para>Gets the number of Movc instructions.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getmovcinstructioncount" /></para>
    </summary>
  </comment>
  <comment id="ID3D12Device::Evict">
    <summary>
      <para>Enables the page-out of data, which precludes GPU access of that data.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-evict" /></para>
      <param name="NumObjects">The number of objects in the <i>ppObjects</i> array to evict from the device.</param>
      <param name="ppObjects">A pointer to a memory block that contains an array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12pageable">ID3D12Pageable</a> interface pointers for the objects.
          

Even though most D3D12 objects inherit from <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12pageable">ID3D12Pageable</a>, residency changes are only supported on the following objects:
Descriptor Heaps, Heaps, Committed Resources, and Query Heaps</param>
    </summary>
  </comment>
  <comment id="ID3D12Heap">
    <summary>
      <para>A heap is an abstraction of contiguous memory allocation, used to manage physical memory. This heap can be used with ID3D12Resource objects to support placed resources or reserved resources.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12heap" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS3">
    <summary>
      <para>Indicates the level of support that the adapter provides for timestamp queries, format-casting, immediate write, view instancing, and barycentrics.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_feature_data_d3d12_options3" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS3::CopyQueueTimestampQueriesSupported">
    <summary>Indicates whether timestamp queries are supported on copy queues.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS3::CastingFullyTypedFormatSupported">
    <summary>Indicates whether casting from one fully typed format to another, compatible, format is supported.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS3::WriteBufferImmediateSupportFlags">
    <summary>Indicates the kinds of command lists that support the ability to write an immediate value directly from the command stream into a specified buffer.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS3::ViewInstancingTier">
    <summary>Indicates the level of support the adapter has for view instancing.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS3::BarycentricsSupported">
    <summary>Indicates whether barycentrics are supported.</summary>
  </comment>
  <comment id="ID3D12InfoQueue::GetNumMessagesAllowedByStorageFilter">
    <summary>
      <para>Get the number of messages that were allowed to pass through a storage filter.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getnummessagesallowedbystoragefilter" /></para>
    </summary>
  </comment>
  <comment id="D3D12_QUERY_DATA_PIPELINE_STATISTICS">
    <summary>
      <para>Query information about graphics-pipeline activity in between calls to BeginQuery and EndQuery.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_query_data_pipeline_statistics" /></para>
    </summary>
  </comment>
  <comment id="D3D12_QUERY_DATA_PIPELINE_STATISTICS::IAVertices">
    <summary>Number of vertices read by input assembler.</summary>
  </comment>
  <comment id="D3D12_QUERY_DATA_PIPELINE_STATISTICS::IAPrimitives">
    <summary>Number of primitives read by the input assembler. This number can be different depending on the primitive topology used. For example, a triangle strip with 6 vertices will produce 4 triangles, however a triangle list with 6 vertices will produce 2 triangles.</summary>
  </comment>
  <comment id="D3D12_QUERY_DATA_PIPELINE_STATISTICS::VSInvocations">
    <summary>Specifies the number of vertex shader invocations. Direct3D invokes the vertex shader once per vertex.</summary>
  </comment>
  <comment id="D3D12_QUERY_DATA_PIPELINE_STATISTICS::GSInvocations">
    <summary>Specifies the number of geometry shader invocations. When the geometry shader is set to NULL, this statistic may or may not increment depending on the graphics adapter.</summary>
  </comment>
  <comment id="D3D12_QUERY_DATA_PIPELINE_STATISTICS::GSPrimitives">
    <summary>Specifies the number of geometry shader output primitives.</summary>
  </comment>
  <comment id="D3D12_QUERY_DATA_PIPELINE_STATISTICS::CInvocations">
    <summary>Number of primitives that were sent to the rasterizer. When the rasterizer is disabled, this will not increment.</summary>
  </comment>
  <comment id="D3D12_QUERY_DATA_PIPELINE_STATISTICS::CPrimitives">
    <summary>Number of primitives that were rendered. This may be larger or smaller than CInvocations because after a primitive is clipped sometimes it is either broken up into more than one primitive or completely culled.</summary>
  </comment>
  <comment id="D3D12_QUERY_DATA_PIPELINE_STATISTICS::PSInvocations">
    <summary>Specifies the number of pixel shader invocations.</summary>
  </comment>
  <comment id="D3D12_QUERY_DATA_PIPELINE_STATISTICS::HSInvocations">
    <summary>Specifies the number of hull shader invocations.</summary>
  </comment>
  <comment id="D3D12_QUERY_DATA_PIPELINE_STATISTICS::DSInvocations">
    <summary>Specifies the number of domain shader invocations.</summary>
  </comment>
  <comment id="D3D12_QUERY_DATA_PIPELINE_STATISTICS::CSInvocations">
    <summary>Specifies the number of compute shader invocations.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_INSTANCE_DESC">
    <summary>
      <para>Describes an instance of a raytracing acceleration structure used in GPU memory during the acceleration structure build process.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_raytracing_instance_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RAYTRACING_INSTANCE_DESC::Transform">
    <summary>A 3x4 transform matrix in row-major layout representing the instance-to-world transformation. Implementations transform rays, as opposed to transforming all of the geometry or AABBs.

&gt; [!NOTE]
&gt; The layout of <c>Transform</c> is a transpose of how affine matrices are typically stored in memory. Instead of four 3-vectors, <c>Transform</c> is laid out as three 4-vectors.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_INSTANCE_DESC::InstanceID">
    <summary>An arbitrary 24-bit value that can be accessed using the <c>InstanceID</c> intrinsic function in supported shader types.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_INSTANCE_DESC::InstanceMask">
    <summary>An 8-bit mask assigned to the instance, which can be used to include/reject groups of instances on a per-ray basis. If the value is zero, then the instance will never be included, so typically this should be set to some non-zero value. For more information see, the <c>InstanceInclusionMask</c> parameter to the <a href="https://docs.microsoft.com/windows/win32/direct3d12/traceray-function">TraceRay</a> function.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_INSTANCE_DESC::InstanceContributionToHitGroupIndex">
    <summary>An arbitrary 24-bit value representing per-instance contribution to add into shader table indexing to select the hit group to use.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_INSTANCE_DESC::Flags">
    <summary>An 8-bit mask representing flags from <a href="https://docs.microsoft.com./ne-d3d12-d3d12_raytracing_instance_flags.md">D3D12_RAYTRACING_INSTANCE_FLAGS</a> to apply to the instance.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_INSTANCE_DESC::AccelerationStructure">
    <summary>Address of the bottom-level acceleration structure that is being instanced. The address must be aligned to 256 bytes, defined as <a href="https://docs.microsoft.com/windows/win32/direct3d12/constants">D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BYTE_ALIGNMENT</a>. Any existing acceleration structure passed in here would already have been required to be placed with such alignment.

The memory pointed to must be in state <a href="https://docs.microsoft.com./ne-d3d12-d3d12_resource_states.md">D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE</a>.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE">
    <summary>
      <para>Specifies the type of a raytracing acceleration structure.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_raytracing_acceleration_structure_type" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL">
    <summary>Top-level acceleration structure.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL">
    <summary>Bottom-level acceleration structure.</summary>
  </comment>
  <comment id="ID3D12Device">
    <summary>
      <para>Represents a virtual adapter; it is used to create command allocators, command lists, command queues, fences, resources, pipeline state objects, heaps, root signatures, samplers, and many resource views.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12device" /></para>
    </summary>
  </comment>
  <comment id="ID3D12LibraryReflection">
    <summary>
      <para>A library-reflection interface accesses library info.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nn-d3d12shader-id3d12libraryreflection" /></para>
    </summary>
  </comment>
  <comment id="ID3D12Device::CreateRootSignature">
    <summary>
      <para>Creates a root signature layout.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createrootsignature" /></para>
      <param name="nodeMask">For single GPU operation, set this to zero. If there are multiple GPU nodes, set bits to identify the nodes (the  device's physical adapters) to which the root signature is to apply.
            Each bit in the mask corresponds to a single node.
            Refer to <a href="https://docs.microsoft.com/windows/win32/direct3d12/multi-engine">Multi-adapter systems</a>.</param>
      <param name="pBlobWithRootSignature">A pointer to the source data for the serialized signature.</param>
      <param name="blobLengthInBytes">The size, in bytes, of the block of memory that <i>pBlobWithRootSignature</i> points to.</param>
      <param name="riid">The globally unique identifier (<b>GUID</b>) for the root signature interface. See Remarks.
            An input parameter.</param>
      <param name="ppvRootSignature">A pointer to a memory block that receives a pointer to the root signature.</param>
    </summary>
  </comment>
  <comment id="D3D12_TEX1D_RTV">
    <summary>
      <para>Describes the subresource from a 1D texture to use in a render-target view.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_tex1d_rtv" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TEX1D_RTV::MipSlice">
    <summary>The index of the mipmap level to use mip slice.</summary>
  </comment>
  <comment id="ID3D12StateObjectProperties::GetShaderIdentifier">
    <summary>
      <para>Retrieves the unique identifier for a shader that can be used in a shader record.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12stateobjectproperties-getshaderidentifier" /></para>
      <param name="pExportName">Entrypoint in the state object for which to retrieve an identifier.</param>
    </summary>
  </comment>
  <comment id="D3D12_CULL_MODE">
    <summary>
      <para>Specifies triangles facing a particular direction are not drawn.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_cull_mode" /></para>
    </summary>
  </comment>
  <comment id="D3D12_CULL_MODE::D3D12_CULL_MODE_NONE">
    <summary>Always draw all triangles.</summary>
  </comment>
  <comment id="D3D12_CULL_MODE::D3D12_CULL_MODE_FRONT">
    <summary>Do not draw triangles that are front-facing.</summary>
  </comment>
  <comment id="D3D12_CULL_MODE::D3D12_CULL_MODE_BACK">
    <summary>Do not draw triangles that are back-facing.</summary>
  </comment>
  <comment id="D3D12_SERIALIZED_DATA_TYPE">
    <summary>
      <para>Specifies the type of serialized data. Use a value from this enumeration when calling ID3D12Device5::CheckDriverMatchingIdentifier.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_serialized_data_type" /></para>
    </summary>
  </comment>
  <comment id="D3D12_SERIALIZED_DATA_TYPE::D3D12_SERIALIZED_DATA_RAYTRACING_ACCELERATION_STRUCTURE">
    <summary>The serialized data is a raytracing acceleration structure.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_FORMAT_SUPPORT">
    <summary>
      <para>Describes which resources are supported by the current graphics driver for a given format.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_feature_data_format_support" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_FORMAT_SUPPORT::Format">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>-typed value for the format to return info about.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_FORMAT_SUPPORT::Support1">
    <summary>A combination of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_format_support1">D3D12_FORMAT_SUPPORT1</a>-typed values that are combined by using a bitwise OR operation. The resulting value specifies which resources are supported.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_FORMAT_SUPPORT::Support2">
    <summary>A combination of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_format_support2">D3D12_FORMAT_SUPPORT2</a>-typed values that are combined by using a bitwise OR operation. The resulting value specifies which unordered resource options are supported.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_ARGUMENT_TYPE">
    <summary>
      <para>Specifies the argument type of a D3D12_VIDEO_DECODE_FRAME_ARGUMENT</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ne-d3d12video-d3d12_video_decode_argument_type" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_ARGUMENT_TYPE::D3D12_VIDEO_DECODE_ARGUMENT_TYPE_PICTURE_PARAMETERS">
    <summary>The argument is a picture decoding parameter buffer.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_ARGUMENT_TYPE::D3D12_VIDEO_DECODE_ARGUMENT_TYPE_INVERSE_QUANTIZATION_MATRIX">
    <summary>The argument is an inverse quantization matrix buffer.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_ARGUMENT_TYPE::D3D12_VIDEO_DECODE_ARGUMENT_TYPE_SLICE_CONTROL">
    <summary>The argument is a slice control buffer.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_ARGUMENT_TYPE::D3D12_VIDEO_DECODE_ARGUMENT_TYPE_MAX_VALID">
    <summary>TBD</summary>
  </comment>
  <comment id="ID3D12Debug1">
    <summary>
      <para>Adds GPU-Based Validation and Dependent Command Queue Synchronization to the debug layer.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nn-d3d12sdklayers-id3d12debug1" /></para>
    </summary>
  </comment>
  <comment id="D3D12_SHADER_INPUT_BIND_DESC">
    <summary>
      <para>Describes how a shader resource is bound to a shader input.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/ns-d3d12shader-d3d12_shader_input_bind_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_SHADER_INPUT_BIND_DESC::Name">
    <summary>Name of the shader resource.</summary>
  </comment>
  <comment id="D3D12_SHADER_INPUT_BIND_DESC::Type">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_shader_input_type">D3D_SHADER_INPUT_TYPE</a>-typed value that identifies the type of data in the resource.</summary>
  </comment>
  <comment id="D3D12_SHADER_INPUT_BIND_DESC::BindPoint">
    <summary>Starting bind point.</summary>
  </comment>
  <comment id="D3D12_SHADER_INPUT_BIND_DESC::BindCount">
    <summary>Number of contiguous bind points for arrays.</summary>
  </comment>
  <comment id="D3D12_SHADER_INPUT_BIND_DESC::uFlags">
    <summary>A combination of <a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_shader_input_flags">D3D_SHADER_INPUT_FLAGS</a>-typed values for shader input-parameter options.</summary>
  </comment>
  <comment id="D3D12_SHADER_INPUT_BIND_DESC::ReturnType">
    <summary>If the input is a texture, the <a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_resource_return_type">D3D_RESOURCE_RETURN_TYPE</a>-typed value that identifies the return type.</summary>
  </comment>
  <comment id="D3D12_SHADER_INPUT_BIND_DESC::Dimension">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_srv_dimension">D3D_SRV_DIMENSION</a>-typed value that identifies the dimensions of the bound resource.</summary>
  </comment>
  <comment id="D3D12_SHADER_INPUT_BIND_DESC::NumSamples">
    <summary>The number of samples for a multisampled texture; when a texture isn't multisampled, the value is set to -1 (0xFFFFFFFF).
            This is zero if the shader resource is not a recognized texture.</summary>
  </comment>
  <comment id="D3D12_SHADER_INPUT_BIND_DESC::Space">
    <summary>The register space.</summary>
  </comment>
  <comment id="D3D12_SHADER_INPUT_BIND_DESC::uID">
    <summary>The range ID in the bytecode.</summary>
  </comment>
  <comment id="D3D12_BUFFER_RTV">
    <summary>
      <para>Describes the elements in a buffer resource to use in a render-target view.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_buffer_rtv" /></para>
    </summary>
  </comment>
  <comment id="D3D12_BUFFER_RTV::FirstElement">
    <summary>Number of bytes between the beginning of the buffer and the first element to access.</summary>
  </comment>
  <comment id="D3D12_BUFFER_RTV::NumElements">
    <summary>The total number of elements in the view.</summary>
  </comment>
  <comment id="ID3D12ProtectedSession">
    <summary>
      <para>Offers base functionality that allows for a consistent way to monitor the validity of a session across the different types of sessions.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12protectedsession" /></para>
    </summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::OMSetBlendFactor">
    <summary>
      <para>Sets the blend factor that modulate values for a pixel shader, render target, or both.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-omsetblendfactor" /></para>
      <param name="BlendFactor">Array of blend factors, one for each RGBA component.</param>
    </summary>
  </comment>
  <comment id="ID3D12SharingContract::Present">
    <summary>
      <para>Shares a resource (or subresource) between the D3D layers and diagnostics tools.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12sharingcontract-present" /></para>
      <param name="pResource">A pointer to the resource that contains the final frame contents. This resource is treated as the <i>back buffer</i> of the <b>Present</b>.</param>
      <param name="Subresource">An unsigned 32bit subresource id.</param>
      <param name="window">If provided, indicates which window the tools should use for displaying additional diagnostic information.</param>
    </summary>
  </comment>
  <comment id="D3D12_FENCE_FLAGS">
    <summary>
      <para>Specifies fence options.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_fence_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FENCE_FLAGS::D3D12_FENCE_FLAG_NONE">
    <summary>No options are specified.</summary>
  </comment>
  <comment id="D3D12_FENCE_FLAGS::D3D12_FENCE_FLAG_SHARED">
    <summary>The fence is shared.</summary>
  </comment>
  <comment id="D3D12_FENCE_FLAGS::D3D12_FENCE_FLAG_SHARED_CROSS_ADAPTER">
    <summary>The fence is shared with another GPU adapter.</summary>
  </comment>
  <comment id="D3D12_FENCE_FLAGS::D3D12_FENCE_FLAG_NON_MONITORED">
    <summary>The fence is of the non-monitored type. Non-monitored fences should only be used when the adapter doesn't support monitored fences, or when a fence is shared with an adapter that doesn't support monitored fences.</summary>
  </comment>
  <comment id="D3D12_FUNCTION_DESC">
    <summary>
      <para>Describes a function.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/ns-d3d12shader-d3d12_function_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FUNCTION_DESC::Version">
    <summary>The shader version.
            See also <a href="https://docs.microsoft.com/windows/desktop/api/d3d12shader/ne-d3d12shader-d3d12_shader_version_type">D3D12_SHADER_VERSION_TYPE</a>.</summary>
  </comment>
  <comment id="D3D12_FUNCTION_DESC::Creator">
    <summary>The name of the originator of the function.</summary>
  </comment>
  <comment id="D3D12_FUNCTION_DESC::Flags">
    <summary>A combination of <a href="https://docs.microsoft.com/windows/desktop/direct3dhlsl/d3dcompile-constants">D3DCOMPILE Constants</a> that are combined by using a bitwise OR operation. The resulting value specifies shader compilation and parsing.</summary>
  </comment>
  <comment id="D3D12_FUNCTION_DESC::ConstantBuffers">
    <summary>The number of constant buffers for the function.</summary>
  </comment>
  <comment id="D3D12_FUNCTION_DESC::BoundResources">
    <summary>The number of bound resources for the function.</summary>
  </comment>
  <comment id="D3D12_FUNCTION_DESC::InstructionCount">
    <summary>The number of emitted instructions for the function.</summary>
  </comment>
  <comment id="D3D12_FUNCTION_DESC::TempRegisterCount">
    <summary>The number of temporary registers used by the function.</summary>
  </comment>
  <comment id="D3D12_FUNCTION_DESC::TempArrayCount">
    <summary>The number of temporary arrays used by the function.</summary>
  </comment>
  <comment id="D3D12_FUNCTION_DESC::DefCount">
    <summary>The number of constant defines for the function.</summary>
  </comment>
  <comment id="D3D12_FUNCTION_DESC::DclCount">
    <summary>The number of declarations (input + output) for the function.</summary>
  </comment>
  <comment id="D3D12_FUNCTION_DESC::TextureNormalInstructions">
    <summary>The number of non-categorized texture instructions for the function.</summary>
  </comment>
  <comment id="D3D12_FUNCTION_DESC::TextureLoadInstructions">
    <summary>The number of texture load instructions for the function.</summary>
  </comment>
  <comment id="D3D12_FUNCTION_DESC::TextureCompInstructions">
    <summary>The number of texture comparison instructions for the function.</summary>
  </comment>
  <comment id="D3D12_FUNCTION_DESC::TextureBiasInstructions">
    <summary>The number of texture bias instructions for the function.</summary>
  </comment>
  <comment id="D3D12_FUNCTION_DESC::TextureGradientInstructions">
    <summary>The number of texture gradient instructions for the function.</summary>
  </comment>
  <comment id="D3D12_FUNCTION_DESC::FloatInstructionCount">
    <summary>The number of floating point arithmetic instructions used by the function.</summary>
  </comment>
  <comment id="D3D12_FUNCTION_DESC::IntInstructionCount">
    <summary>The number of signed integer arithmetic instructions used by the function.</summary>
  </comment>
  <comment id="D3D12_FUNCTION_DESC::UintInstructionCount">
    <summary>The number of unsigned integer arithmetic instructions used by the function.</summary>
  </comment>
  <comment id="D3D12_FUNCTION_DESC::StaticFlowControlCount">
    <summary>The number of static flow control instructions used by the function.</summary>
  </comment>
  <comment id="D3D12_FUNCTION_DESC::DynamicFlowControlCount">
    <summary>The number of dynamic flow control instructions used by the function.</summary>
  </comment>
  <comment id="D3D12_FUNCTION_DESC::MacroInstructionCount">
    <summary>The number of macro instructions used by the function.</summary>
  </comment>
  <comment id="D3D12_FUNCTION_DESC::ArrayInstructionCount">
    <summary>The number of array instructions used by the function.</summary>
  </comment>
  <comment id="D3D12_FUNCTION_DESC::MovInstructionCount">
    <summary>The number of mov instructions used by the function.</summary>
  </comment>
  <comment id="D3D12_FUNCTION_DESC::MovcInstructionCount">
    <summary>The number of movc instructions used by the function.</summary>
  </comment>
  <comment id="D3D12_FUNCTION_DESC::ConversionInstructionCount">
    <summary>The number of type conversion instructions used by the function.</summary>
  </comment>
  <comment id="D3D12_FUNCTION_DESC::BitwiseInstructionCount">
    <summary>The number of bitwise arithmetic instructions used by the function.</summary>
  </comment>
  <comment id="D3D12_FUNCTION_DESC::MinFeatureLevel">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_feature_level">D3D_FEATURE_LEVEL</a>-typed value that specifies the minimum Direct3D feature level target of the function byte code.</summary>
  </comment>
  <comment id="D3D12_FUNCTION_DESC::RequiredFeatureFlags">
    <summary>A value that contains a combination of one or more shader requirements flags; each flag specifies a requirement of the shader. A default value of 0 means there are no requirements. For a list of values, see <a href="https://docs.microsoft.com/windows/desktop/api/d3d12shader/nf-d3d12shader-id3d12shaderreflection-getrequiresflags">ID3D12ShaderReflection::GetRequiresFlags</a>.</summary>
  </comment>
  <comment id="D3D12_FUNCTION_DESC::Name">
    <summary>The name of the function.</summary>
  </comment>
  <comment id="D3D12_FUNCTION_DESC::FunctionParameterCount">
    <summary>The number of logical parameters in the function signature, not including the return value.</summary>
  </comment>
  <comment id="D3D12_FUNCTION_DESC::HasReturn">
    <summary>Indicates whether the function returns a value. <b>TRUE</b> indicates it returns a value; otherwise, <b>FALSE</b> (it is a subroutine).</summary>
  </comment>
  <comment id="D3D12_FUNCTION_DESC::Has10Level9VertexShader">
    <summary>Indicates whether there is a Direct3D 10Level9 vertex shader blob. <b>TRUE</b> indicates there is a 10Level9 vertex shader blob; otherwise, <b>FALSE</b>.</summary>
  </comment>
  <comment id="D3D12_FUNCTION_DESC::Has10Level9PixelShader">
    <summary>Indicates whether there is a Direct3D 10Level9 pixel shader blob. <b>TRUE</b> indicates there is a 10Level9 pixel shader blob; otherwise, <b>FALSE</b>.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_TIER">
    <summary>
      <para>Specifies the level of ray tracing support on the graphics device.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_raytracing_tier" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RAYTRACING_TIER::D3D12_RAYTRACING_TIER_NOT_SUPPORTED">
    <summary>No support for ray tracing on the device.  Attempts to create any ray tracing-related object will fail, and using ray tracing-related APIs on command lists results in undefined behavior.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_TIER::D3D12_RAYTRACING_TIER_1_0">
    <summary>The device supports tier 1 ray tracing functionality. In the current release, this tier represents all available ray tracing features.</summary>
  </comment>
  <comment id="D3D12_AUTO_BREADCRUMB_OP">
    <summary>
      <para>Defines constants that specify render/compute GPU operations.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_auto_breadcrumb_op" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RESOURCE_DESC">
    <summary>
      <para>Describes a resource, such as a texture. This structure is used extensively.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_resource_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RESOURCE_DESC::Dimension">
    <summary>One member of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_dimension">D3D12_RESOURCE_DIMENSION</a>, specifying the dimensions of the resource (for example, D3D12_RESOURCE_DIMENSION_TEXTURE1D), or whether it is a buffer ((D3D12_RESOURCE_DIMENSION_BUFFER).</summary>
  </comment>
  <comment id="D3D12_RESOURCE_DESC::Alignment">
    <summary>Specifies the alignment.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_DESC::Width">
    <summary>Specifies the width of the resource.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_DESC::Height">
    <summary>Specifies the height of the resource.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_DESC::DepthOrArraySize">
    <summary>Specifies the depth of the resource, if it is 3D, or the array size if it is an array of 1D or 2D resources.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_DESC::MipLevels">
    <summary>Specifies the number of MIP levels.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_DESC::Format">
    <summary>Specifies one member of  <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_DESC::SampleDesc">
    <summary>Specifies a <a href="https://docs.microsoft.com/windows/desktop/api/dxgicommon/ns-dxgicommon-dxgi_sample_desc">DXGI_SAMPLE_DESC</a> structure.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_DESC::Layout">
    <summary>Specifies one member of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_texture_layout">D3D12_TEXTURE_LAYOUT</a>.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_DESC::Flags">
    <summary>Bitwise-OR'd flags, as <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_flags">D3D12_RESOURCE_FLAGS</a> enumeration constants.</summary>
  </comment>
  <comment id="ID3D12SharingContract">
    <summary>
      <para>Part of a contract between D3D11On12 diagnostic layers and graphics diagnostics tools.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nn-d3d12sdklayers-id3d12sharingcontract" /></para>
    </summary>
  </comment>
  <comment id="D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE">
    <summary>
      <para>Represents a GPU virtual address and indexing stride.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_gpu_virtual_address_and_stride" /></para>
    </summary>
  </comment>
  <comment id="D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE::StartAddress">
    <summary>The beginning of the virtual address range.</summary>
  </comment>
  <comment id="D3D12_GPU_VIRTUAL_ADDRESS_AND_STRIDE::StrideInBytes">
    <summary>Defines indexing stride, such as for vertices.  Only the bottom 32 bits are used.  The field is 64 bits to make alignment of containing structures consistent everywhere.</summary>
  </comment>
  <comment id="D3D12_HIT_GROUP_TYPE">
    <summary>
      <para>Specifies the type of a raytracing hit group state subobject. Use a value from this enumeration with the D3D12_HIT_GROUP_DESC structure.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_hit_group_type" /></para>
    </summary>
  </comment>
  <comment id="D3D12_HIT_GROUP_TYPE::D3D12_HIT_GROUP_TYPE_TRIANGLES">
    <summary>The hit group uses a list of triangles to calculate ray hits. Hit groups that use triangles can’t contain an intersection shader.</summary>
  </comment>
  <comment id="D3D12_HIT_GROUP_TYPE::D3D12_HIT_GROUP_TYPE_PROCEDURAL_PRIMITIVE">
    <summary>The hit group uses a procedural primitive within a bounding box to calculate ray hits. Hit groups that use procedural primitives must contain an intersection shader.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::CopyTiles">
    <summary>
      <para>Copies tiles from buffer to tiled resource or vice versa.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-copytiles" /></para>
      <param name="pTiledResource">A pointer to a tiled resource.</param>
      <param name="pTileRegionStartCoordinate">A pointer to a
            <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tiled_resource_coordinate">D3D12_TILED_RESOURCE_COORDINATE</a> structure that describes the starting coordinates of the tiled resource.</param>
      <param name="pTileRegionSize">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tile_region_size">D3D12_TILE_REGION_SIZE</a> structure that describes the size of the tiled region.</param>
      <param name="pBuffer">A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a> that represents a default, dynamic, or staging buffer.</param>
      <param name="BufferStartOffsetInBytes">The offset in bytes into the buffer at <i>pBuffer</i> to start the operation.</param>
      <param name="Flags">A combination of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_tile_copy_flags">D3D12_TILE_COPY_FLAGS</a>-typed values that are combined by using a bitwise OR operation and that identifies how to copy tiles.</param>
    </summary>
  </comment>
  <comment id="ID3D12Resource::WriteToSubresource">
    <summary>
      <para>Uses the CPU to copy data into a subresource, enabling the CPU to modify the contents of most textures with undefined layouts.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12resource-writetosubresource" /></para>
      <param name="DstSubresource">Specifies the index of the subresource.</param>
      <param name="pDstBox">A pointer to a box that defines the portion of the destination subresource to copy the resource data into.
              If NULL, the data is written to the destination subresource with no offset.
              The dimensions of the source must fit the destination (see
              <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_box">D3D12_BOX</a>).
            

An empty box results in a no-op.
              A box is empty if the top value is greater than or equal to the bottom value, or the left value is greater than or equal to the right value, 
				  or the front value is greater than or equal to the back value.
              When the box is empty, this method doesn't perform any operation.</param>
      <param name="pSrcData">A pointer to the source data in memory.</param>
      <param name="SrcRowPitch">The distance from one row of source data to the next row.</param>
      <param name="SrcDepthPitch">The distance from one depth slice of source data to the next.</param>
    </summary>
  </comment>
  <comment id="ID3D12CommandQueue">
    <summary>
      <para>Provides methods for submitting command lists, synchronizing command list execution, instrumenting the command queue, and updating resource tile mappings.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12commandqueue" /></para>
    </summary>
  </comment>
  <comment id="ID3D12VideoProcessCommandList">
    <summary>
      <para>Encapsulates a list of graphics commands for video processing.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/nn-d3d12video-id3d12videoprocesscommandlist" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DRAW_INDEXED_ARGUMENTS">
    <summary>
      <para>Describes parameters for drawing indexed instances.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_draw_indexed_arguments" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DRAW_INDEXED_ARGUMENTS::IndexCountPerInstance">
    <summary>The number of indices read from the index buffer for each instance.</summary>
  </comment>
  <comment id="D3D12_DRAW_INDEXED_ARGUMENTS::InstanceCount">
    <summary>The number of instances to draw.</summary>
  </comment>
  <comment id="D3D12_DRAW_INDEXED_ARGUMENTS::StartIndexLocation">
    <summary>The location of the first index read by the GPU from the index buffer.</summary>
  </comment>
  <comment id="D3D12_DRAW_INDEXED_ARGUMENTS::BaseVertexLocation">
    <summary>A value added to each index before reading a vertex from the vertex buffer.</summary>
  </comment>
  <comment id="D3D12_DRAW_INDEXED_ARGUMENTS::StartInstanceLocation">
    <summary>A value added to each index before reading per-instance data from a vertex buffer.</summary>
  </comment>
  <comment id="ID3D12DeviceChild">
    <summary>
      <para>An interface from which other core interfaces inherit from, including (but not limited to) ID3D12PipelineLibrary, ID3D12CommandList, ID3D12Pageable, and ID3D12RootSignature. It provides a method to get back to the device object it was created against.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12devicechild" /></para>
    </summary>
  </comment>
  <comment id="ID3D12Device::GetResourceTiling">
    <summary>
      <para>Gets info about how a tiled resource is broken into tiles.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-getresourcetiling" /></para>
      <param name="pTiledResource">Specifies a tiled <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a>  to get info about.</param>
      <param name="pNumTilesForEntireResource">A pointer to a variable that receives the number of tiles needed to store the entire tiled resource.</param>
      <param name="pPackedMipDesc">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_packed_mip_info">D3D12_PACKED_MIP_INFO</a> structure that <b>GetResourceTiling</b> fills with info about how the tiled resource's mipmaps are packed.</param>
      <param name="pStandardTileShapeForNonPackedMips">Specifies a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tile_shape">D3D12_TILE_SHAPE</a> structure that <b>GetResourceTiling</b> fills with info about the tile shape. This is info about how pixels fit in the tiles, independent of tiled resource's dimensions, not including packed mipmaps. If the entire tiled resource is packed, this parameter is meaningless because the tiled resource has no defined layout for packed mipmaps. In this situation, <b>GetResourceTiling</b> sets the members of D3D12_TILE_SHAPE to zeros.</param>
      <param name="pNumSubresourceTilings">A pointer to a variable that contains the number of tiles in the subresource. On input, this is the number of subresources to query tilings for; on output, this is the number that was actually retrieved at <i>pSubresourceTilingsForNonPackedMips</i> (clamped to what's available).</param>
      <param name="FirstSubresourceTilingToGet">The number of the first subresource tile to get. <b>GetResourceTiling</b> ignores this parameter if the number that <i>pNumSubresourceTilings</i> points to is 0.</param>
      <param name="pSubresourceTilingsForNonPackedMips">Specifies a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_subresource_tiling">D3D12_SUBRESOURCE_TILING</a> structure that <b>GetResourceTiling</b> fills with info about subresource tiles. If subresource tiles are part of packed mipmaps, <b>GetResourceTiling</b> sets the members of D3D12_SUBRESOURCE_TILING to zeros, except the <i>StartTileIndexInOverallResource</i> member, which <b>GetResourceTiling</b> sets to D3D12_PACKED_TILE (0xffffffff). The D3D12_PACKED_TILE constant indicates that the whole <b>D3D12_SUBRESOURCE_TILING</b> structure is meaningless for this situation, and the info that the <i>pPackedMipDesc</i> parameter points to applies.</param>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT">
    <summary>
      <para>Indicates the level of support for protected resource sessions.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_feature_data_protected_resource_session_support" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT::NodeIndex">
    <summary>An input field, indicating the adapter index to query.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_PROTECTED_RESOURCE_SESSION_SUPPORT::SharingTier">
    <summary>An output field indicating the type of protected resource session support.</summary>
  </comment>
  <comment id="D3D12_CPU_DESCRIPTOR_HANDLE">
    <summary>
      <para>Describes a CPU descriptor handle.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_cpu_descriptor_handle" /></para>
    </summary>
  </comment>
  <comment id="D3D12_CPU_DESCRIPTOR_HANDLE::ptr">
    <summary>The address of  the descriptor.</summary>
  </comment>
  <comment id="ID3D12DeviceRemovedExtendedDataSettings">
    <summary>
      <para>This interface controls Device Removed Extended Data (DRED) settings.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12deviceremovedextendeddatasettings" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_RENDER_TARGET_DESC">
    <summary>
      <para>Describes bindings (fixed for the duration of the render pass) to one or more render target views (RTVs), as well as their beginning and ending access characteristics.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_render_pass_render_target_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_RENDER_TARGET_DESC::cpuDescriptor">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_cpu_descriptor_handle">D3D12_CPU_DESCRIPTOR_HANDLE</a>. The CPU descriptor handle corresponding to the render target view(s) (RTVs).</summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_RENDER_TARGET_DESC::BeginningAccess">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_render_pass_beginning_access">D3D12_RENDER_PASS_BEGINNING_ACCESS</a>. The access to the RTV(s) requested at the transition into a render pass.</summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_RENDER_TARGET_DESC::EndingAccess">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_render_pass_ending_access">D3D12_RENDER_PASS_ENDING_ACCESS</a>. The access to the RTV(s) requested at the transition out of a render pass.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::EndEvent">
    <summary>
      <para>Not intended to be called directly.  Use the PIX event runtime to insert events into a command list.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-endevent" /></para>
    </summary>
  </comment>
  <comment id="D3D12_META_COMMAND_DESC">
    <summary>
      <para>Describes a meta command.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_meta_command_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_META_COMMAND_DESC::Id">
    <summary>A <a href="https://docs.microsoft.com/windows/win32/api/guiddef/ns-guiddef-guid">GUID</a> uniquely identifying the meta command.</summary>
  </comment>
  <comment id="D3D12_META_COMMAND_DESC::Name">
    <summary>The meta command name.</summary>
  </comment>
  <comment id="D3D12_META_COMMAND_DESC::InitializationDirtyState">
    <summary>Declares the command list states that are modified by the call to initialize the meta command. If all state bits are set, then that's equivalent to calling <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12graphicscommandlist-clearstate">ID3D12GraphicsCommandList::ClearState</a>.</summary>
  </comment>
  <comment id="D3D12_META_COMMAND_DESC::ExecutionDirtyState">
    <summary>Declares the command list states that are modified by the call to execute the meta command. If all state bits are set, then that's equivalent to calling <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12graphicscommandlist-clearstate">ID3D12GraphicsCommandList::ClearState</a>.</summary>
  </comment>
  <comment id="ID3D12Object::SetPrivateData">
    <summary>
      <para>Sets application-defined data to a device object and associates that data with an application-defined GUID.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12object-setprivatedata" /></para>
      <param name="guid">The <b>GUID</b> to associate with the data.</param>
      <param name="DataSize">The size in bytes of the data.</param>
      <param name="pData">A pointer to a memory block that contains the data to be stored with this device object. If <i>pData</i> is <b>NULL</b>, <i>DataSize</i> must also be 0, and any data that was previously associated with the <b>GUID</b> specified in <i>guid</i> will be destroyed.</param>
    </summary>
  </comment>
  <comment id="D3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR">
    <summary>
      <para>Describes the amount of artificial slowdown inserted by the debug device to simulate lower-performance graphics adapters.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/ns-d3d12sdklayers-d3d12_debug_device_gpu_slowdown_performance_factor" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR::SlowdownFactor">
    <summary>Specifies the amount of slowdown artificially applied, as a factor of the nominal time for the fence to signal. The default value is 0.</summary>
  </comment>
  <comment id="D3D12_INFO_QUEUE_FILTER_DESC">
    <summary>
      <para>Allow or deny certain types of messages to pass through a filter.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/ns-d3d12sdklayers-d3d12_info_queue_filter_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_INFO_QUEUE_FILTER_DESC::NumCategories">
    <summary>Number of message categories to allow or deny.</summary>
  </comment>
  <comment id="D3D12_INFO_QUEUE_FILTER_DESC::pCategoryList">
    <summary>Array of message categories to allow or deny. Array must have at least <i>NumCategories</i> members (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ne-d3d12sdklayers-d3d12_message_category">D3D12_MESSAGE_CATEGORY</a>).</summary>
  </comment>
  <comment id="D3D12_INFO_QUEUE_FILTER_DESC::NumSeverities">
    <summary>Number of message severity levels to allow or deny.</summary>
  </comment>
  <comment id="D3D12_INFO_QUEUE_FILTER_DESC::pSeverityList">
    <summary>Array of message severity levels to allow or deny. Array must have at least <i>NumSeverities</i> members (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ne-d3d12sdklayers-d3d12_message_severity">D3D12_MESSAGE_SEVERITY</a>).</summary>
  </comment>
  <comment id="D3D12_INFO_QUEUE_FILTER_DESC::NumIDs">
    <summary>Number of message IDs to allow or deny.</summary>
  </comment>
  <comment id="D3D12_INFO_QUEUE_FILTER_DESC::pIDList">
    <summary>Array of message IDs to allow or deny. Array must have at least <i>NumIDs</i> members (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ne-d3d12sdklayers-d3d12_message_id">D3D12_MESSAGE_ID</a>).</summary>
  </comment>
  <comment id="D3D12_DISCARD_REGION">
    <summary>
      <para>Describes details for the discard-resource operation.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_discard_region" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DISCARD_REGION::NumRects">
    <summary>The number of rectangles in the array that the <b>pRects</b> member specifies.</summary>
  </comment>
  <comment id="D3D12_DISCARD_REGION::pRects">
    <summary>An array of <b>D3D12_RECT</b> structures for the rectangles in the resource to discard.
            If <b>NULL</b>, <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12graphicscommandlist-discardresource">DiscardResource</a> discards the entire resource.</summary>
  </comment>
  <comment id="D3D12_DISCARD_REGION::FirstSubresource">
    <summary>Index of the first subresource in the resource to discard.</summary>
  </comment>
  <comment id="D3D12_DISCARD_REGION::NumSubresources">
    <summary>The number of subresources in the resource to discard.</summary>
  </comment>
  <comment id="ID3D12CommandQueue::GetClockCalibration">
    <summary>
      <para>This method samples the CPU and GPU timestamp counters at the same moment in time.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12commandqueue-getclockcalibration" /></para>
      <param name="pGpuTimestamp">The value of the GPU timestamp counter.</param>
      <param name="pCpuTimestamp">The value of the CPU timestamp counter.</param>
    </summary>
  </comment>
  <comment id="ID3D12Device::CreateCommittedResource">
    <summary>
      <para>Creates both a resource and an implicit heap, such that the heap is big enough to contain the entire resource, and the resource is mapped to the heap.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createcommittedresource" /></para>
      <param name="pHeapProperties">A pointer to a <b>D3D12_HEAP_PROPERTIES</b> structure that provides properties for the resource's heap.</param>
      <param name="HeapFlags">Heap options, as a bitwise-OR'd combination of <b>D3D12_HEAP_FLAGS</b> enumeration constants.</param>
      <param name="pDesc">A pointer to a <b>D3D12_RESOURCE_DESC</b> structure that describes the resource.</param>
      <param name="InitialResourceState">The initial state of the resource, as a bitwise-OR'd combination of <b>D3D12_RESOURCE_STATES</b> enumeration constants.

When you create a resource together with a <a href="https://docs.microsoft.com./ne-d3d12-d3d12_heap_type.md">D3D12_HEAP_TYPE_UPLOAD</a> heap, you must set <i>InitialResourceState</i> to <a href="https://docs.microsoft.com./ne-d3d12-d3d12_resource_states.md">D3D12_RESOURCE_STATE_GENERIC_READ</a>.

When you create a resource together with a <a href="https://docs.microsoft.com./ne-d3d12-d3d12_heap_type.md">D3D12_HEAP_TYPE_READBACK</a> heap, you must set <i>InitialResourceState</i> to <a href="https://docs.microsoft.com./ne-d3d12-d3d12_resource_states.md">D3D12_RESOURCE_STATE_COPY_DEST</a>.</param>
      <param name="pOptimizedClearValue">Specifies a <b>D3D12_CLEAR_VALUE</b> structure that describes the default value for a clear color.

<i>pOptimizedClearValue</i> specifies a value for which clear operations are most optimal. When the created resource is a texture with either the <a href="https://docs.microsoft.com./ne-d3d12-d3d12_resource_flags.md">D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET</a> or <b>D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL</b> flags, you should choose the value with which the clear operation will most commonly be called. You can call the clear operation with other values, but those operations won't be as efficient as when the value matches the one passed in to resource creation.

When you use <a href="https://docs.microsoft.com./ne-d3d12-d3d12_resource_dimension.md">D3D12_RESOURCE_DIMENSION_BUFFER</a>, you must set <i>pOptimizedClearValue</i> to <c>nullptr</c>.</param>
      <param name="riidResource">A reference to the globally unique identifier (<b>GUID</b>) of the resource interface to return in <i>ppvResource</i>.

While <i>riidResource</i> is most commonly the <b>GUID</b> of <a href="https://docs.microsoft.com./nn-d3d12-id3d12resource.md">ID3D12Resource</a>, it may be the <b>GUID</b> of any interface. If the resource object doesn't support the interface for this <b>GUID</b>, then creation fails with <b>E_NOINTERFACE</b>.</param>
      <param name="ppvResource">An optional pointer to a memory block that receives the requested interface pointer to the created resource object.

<i>ppvResource</i> can be <c>nullptr</c>, to enable capability testing. When <i>ppvResource</i> is <c>nullptr</c>, no object is created, and <b>S_FALSE</b> is returned when <i>pDesc</i> is valid.</param>
    </summary>
  </comment>
  <comment id="ID3D12DebugCommandList1::AssertResourceState">
    <summary>
      <para>Validates that the given state matches the state of the subresource, assuming the state of the given subresource is known during recording of a command list (e.g.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12debugcommandlist1-assertresourcestate" /></para>
      <param name="pResource">Specifies the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a> to check.</param>
      <param name="Subresource">The index of the subresource to check. This can be set to an index, or D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES.</param>
      <param name="State">Specifies the state to check for. This can be one or more <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_states">D3D12_RESOURCE_STATES</a> flags Or'ed together.</param>
    </summary>
  </comment>
  <comment id="ID3D12CommandQueue::Wait">
    <summary>
      <para>Queues a GPU-side wait, and returns immediately. A GPU-side wait is where the GPU waits until the specified fence reaches or exceeds the specified value.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12commandqueue-wait" /></para>
      <param name="pFence">A pointer to the <a href="https://docs.microsoft.com/windows/win32/api/d3d12/nn-d3d12-id3d12fence">ID3D12Fence</a> object.</param>
      <param name="Value">The value that the command queue is waiting for the fence to reach or exceed.  So when  <a href="https://docs.microsoft.com/windows/win32/api/d3d12/nf-d3d12-id3d12fence-getcompletedvalue">ID3D12Fence::GetCompletedValue</a> is greater than or equal to <i>Value</i>, the wait is terminated.</param>
    </summary>
  </comment>
  <comment id="D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS">
    <summary>
      <para>Specifies the result of a call to ID3D12Device5::CheckDriverMatchingIdentifier which queries whether serialized data is compatible with the current device and driver version.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_driver_matching_identifier_status" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS::D3D12_DRIVER_MATCHING_IDENTIFIER_COMPATIBLE_WITH_DEVICE">
    <summary>Serialized data is compatible with the current device/driver.</summary>
  </comment>
  <comment id="D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS::D3D12_DRIVER_MATCHING_IDENTIFIER_UNSUPPORTED_TYPE">
    <summary>The specified <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_serialized_data_type">D3D12_SERIALIZED_DATA_TYPE</a> specified is unknown or unsupported.</summary>
  </comment>
  <comment id="D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS::D3D12_DRIVER_MATCHING_IDENTIFIER_UNRECOGNIZED">
    <summary>Format of the data in <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_serialized_data_driver_matching_identifier">D3D12_SERIALIZED_DATA_DRIVER_MATCHING_IDENTIFIER</a> is unrecognized.  This could indicate either corrupt data or the identifier was produced by a different hardware vendor.</summary>
  </comment>
  <comment id="D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS::D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_VERSION">
    <summary>Serialized data is recognized, but its version is not compatible with the current driver. This result may indicate that the device is from the same hardware vendor but is an incompatible version.</summary>
  </comment>
  <comment id="D3D12_DRIVER_MATCHING_IDENTIFIER_STATUS::D3D12_DRIVER_MATCHING_IDENTIFIER_INCOMPATIBLE_TYPE">
    <summary><a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_serialized_data_type">D3D12_SERIALIZED_DATA_TYPE</a> specifies a data type that is not compatible with the type of serialized data.  As long as there is only a single defined serialized data type this error cannot not be produced.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::BeginQuery">
    <summary>
      <para>Starts a query running.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-beginquery" /></para>
      <param name="pQueryHeap">Specifies the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12queryheap">ID3D12QueryHeap</a> containing the query.</param>
      <param name="Type">Specifies one member of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_query_type">D3D12_QUERY_TYPE</a>.</param>
      <param name="Index">Specifies the index of the query within the query heap.</param>
    </summary>
  </comment>
  <comment id="ID3D12Object">
    <summary>
      <para>An interface from which ID3D12Device and ID3D12DeviceChild inherit from. It provides methods to associate private data and annotate object names.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12object" /></para>
    </summary>
  </comment>
  <comment id="ID3D12VideoDevice1">
    <summary>
      <para>Adds support for motion estimation.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/nn-d3d12video-id3d12videodevice1" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TEX3D_SRV">
    <summary>
      <para>Describes the subresources from a 3D texture to use in a shader-resource view.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_tex3d_srv" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TEX3D_SRV::MostDetailedMip">
    <summary>Index of the most detailed mipmap level to use; this number is between 0 and <b>MipLevels</b> (from the original Texture3D for which <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12device-createshaderresourceview">ID3D12Device::CreateShaderResourceView</a> creates a view) -1.</summary>
  </comment>
  <comment id="D3D12_TEX3D_SRV::MipLevels">
    <summary>The maximum number of mipmap levels for the view of the texture. See the remarks in <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tex1d_srv">D3D12_TEX1D_SRV</a>.

Set to -1 to indicate all the mipmap levels from <b>MostDetailedMip</b> on down to least detailed.</summary>
  </comment>
  <comment id="D3D12_TEX3D_SRV::ResourceMinLODClamp">
    <summary>A value to clamp sample LOD values to. For example, if you specify 2.0f for the clamp value, you ensure that no individual sample accesses a mip level less than 2.0f.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_INSTANCE_FLAGS">
    <summary>
      <para>Flags for a raytracing acceleration structure instance. These flags can be used to override D3D12_RAYTRACING_GEOMETRY_FLAGS for individual instances.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_raytracing_instance_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RAYTRACING_INSTANCE_FLAGS::D3D12_RAYTRACING_INSTANCE_FLAG_NONE">
    <summary>No options specified.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_INSTANCE_FLAGS::D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_CULL_DISABLE">
    <summary>Disables front/back face culling for this instance.  The Ray flags <b>RAY_FLAG_CULL_BACK_FACING_TRIANGLES</b> and <b>RAY_FLAG_CULL_FRONT_FACING_TRIANGLES</b> will have no effect on this instance.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_INSTANCE_FLAGS::D3D12_RAYTRACING_INSTANCE_FLAG_TRIANGLE_FRONT_COUNTERCLOCKWISE">
    <summary>This flag reverses front and back facings, which is useful if the application’s natural winding order differs from the default. By default, a triangle is front facing if its vertices appear clockwise from the ray origin and back facing if its vertices appear counter-clockwise from the ray origin, in object space in a left-handed coordinate system.  

Since these winding direction rules are defined in object space, they are unaffected by instance transforms.  For example, an instance transform matrix with negative determinant (e.g. mirroring some geometry) does not change the facing of the triangles within the instance.  Per-geometry transforms defined in <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_raytracing_geometry_triangles_desc">D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC</a> ,  by contrast,  get combined with the associated vertex data in object space, so a negative determinant matrix there does flip triangle winding.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_INSTANCE_FLAGS::D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_OPAQUE">
    <summary>The instance will act as if   <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_raytracing_geometry_flags">D3D12_RAYTRACING_GEOMETRY_FLAG_OPAQUE</a> had been specified for all the geometries in the bottom-level acceleration structure referenced by the instance.  Note that this behavior can be overridden by the ray flag <b>RAY_FLAG_FORCE_NON_OPAQUE</b>.

This flag is mutually exclusive to the <b>D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_NON_OPAQUE</b> flag.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_INSTANCE_FLAGS::D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_NON_OPAQUE">
    <summary>The instance will act as if <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_raytracing_geometry_flags">D3D12_RAYTRACING_GEOMETRY_FLAG_OPAQUE</a> had not been specified for any of the geometries in the bottom-level acceleration structure referenced by the instance. Note that this behavior can be overridden by the ray flag <b>RAY_FLAG_FORCE_OPAQUE</b>.

This flag is mutually exclusive to the <b>D3D12_RAYTRACING_INSTANCE_FLAG_FORCE_OPAQUE</b> flag.</summary>
  </comment>
  <comment id="ID3D12Resource::ReadFromSubresource">
    <summary>
      <para>Uses the CPU to copy data from a subresource, enabling the CPU to read the contents of most textures with undefined layouts.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12resource-readfromsubresource" /></para>
      <param name="pDstData">A pointer to the destination data in memory.</param>
      <param name="DstRowPitch">The distance from one row of destination data to the next row.</param>
      <param name="DstDepthPitch">The distance from one depth slice of destination data to the next.</param>
      <param name="SrcSubresource">Specifies the index of the subresource to read from.</param>
      <param name="pSrcBox">A pointer to a box that defines the portion of the destination subresource to copy the resource data from.
              If NULL, the data is read from the destination subresource with no offset.
              The dimensions of the destination must fit the destination (see
              <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_box">D3D12_BOX</a>).
            

An empty box results in a no-op.
              A box is empty if the top value is greater than or equal to the bottom value, or the left value is greater than or equal to the right value, or the front value is greater than or equal to the back value.
              When the box is empty, this method doesn't perform any operation.</param>
    </summary>
  </comment>
  <comment id="D3D12_RESOURCE_ALLOCATION_INFO">
    <summary>
      <para>Describes parameters needed to allocate resources.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_resource_allocation_info" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RESOURCE_ALLOCATION_INFO::SizeInBytes">
    <summary>The size, in bytes, of the resource.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_ALLOCATION_INFO::Alignment">
    <summary>The alignment value for the resource; one of 4KB (4096), 64KB (65536), or 4MB (4194304) alignment.</summary>
  </comment>
  <comment id="D3D12_LIBRARY_DESC">
    <summary>
      <para>Describes a library.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/ns-d3d12shader-d3d12_library_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_LIBRARY_DESC::Creator">
    <summary>The name of the originator of the library.</summary>
  </comment>
  <comment id="D3D12_LIBRARY_DESC::Flags">
    <summary>A combination of <a href="https://docs.microsoft.com/windows/desktop/direct3dhlsl/d3dcompile-constants">D3DCOMPILE Constants</a> that are combined by using a bitwise OR operation. The resulting value specifies how the compiler compiles.</summary>
  </comment>
  <comment id="D3D12_LIBRARY_DESC::FunctionCount">
    <summary>The number of functions exported from the library.</summary>
  </comment>
  <comment id="ID3D12RootSignature">
    <summary>
      <para>The root signature defines what resources are bound to the graphics pipeline. A root signature is configured by the app and links command lists to the resources the shaders require. Currently, there is one graphics and one compute root signature per app.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12rootsignature" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIEW_INSTANCING_TIER">
    <summary>
      <para>Indicates the tier level at which view instancing is supported.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_view_instancing_tier" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIEW_INSTANCING_TIER::D3D12_VIEW_INSTANCING_TIER_NOT_SUPPORTED">
    <summary>View instancing is not supported.</summary>
  </comment>
  <comment id="D3D12_VIEW_INSTANCING_TIER::D3D12_VIEW_INSTANCING_TIER_1">
    <summary>View instancing is supported by draw-call level looping only.</summary>
  </comment>
  <comment id="D3D12_VIEW_INSTANCING_TIER::D3D12_VIEW_INSTANCING_TIER_2">
    <summary>View instancing is supported by draw-call level looping at worst, but the GPU can perform view instancing more efficiently in certain circumstances which are architecture-dependent.</summary>
  </comment>
  <comment id="D3D12_VIEW_INSTANCING_TIER::D3D12_VIEW_INSTANCING_TIER_3">
    <summary>View instancing is supported and instancing begins with the first shader stage that references SV_ViewID or with rasterization if no shader stage references SV_ViewID. This means that redundant work is eliminated across view instances when it's not dependent on SV_ViewID. Before rasterization, work that doesn't directly depend on SV_ViewID is shared across all views; only work that depends on SV_ViewID is repeated for each view.

<div class="alert"><b>Note</b>  If a hull shader produces tessellation factors that are dependent on SV_ViewID, then tessellation and all subsequent work must be repeated per-view. Similarly, if the amount of geometry produced by the geometry shader depends on SV_ViewID, then the geometry shader must be repeated per-view before proceeding to rasterization.</div>
<div> </div>
View instance masking only effects whether work that directly depends on SV_ViewID is performed, not the entire loop iteration (per-view). If the view instance mask is non-0, some work that depends on SV_ViewID might still be performed on masked-off pixels but will have no externally-visible effect; for example, no UAV writes are performed and clipping/rasterzation is not invoked. If the view instance mask is 0 no work is performed, including work that's not dependent on SV_ViewID.</summary>
  </comment>
  <comment id="D3D12_TILE_SHAPE">
    <summary>
      <para>Describes the shape of a tile by specifying its dimensions.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_tile_shape" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TILE_SHAPE::WidthInTexels">
    <summary>The width in texels of the tile.</summary>
  </comment>
  <comment id="D3D12_TILE_SHAPE::HeightInTexels">
    <summary>The height in texels of the tile.</summary>
  </comment>
  <comment id="D3D12_TILE_SHAPE::DepthInTexels">
    <summary>The depth in texels of the tile.</summary>
  </comment>
  <comment id="D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE">
    <summary>
      <para>Defines supported search block sizes for video motion estimation.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ne-d3d12video-d3d12_video_motion_estimator_search_block_size" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE::D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_8X8">
    <summary>The search block size is 8x8 pixels.</summary>
  </comment>
  <comment id="D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE::D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_16X16">
    <summary>The search block size is 16x16 pixels.</summary>
  </comment>
  <comment id="ID3D12FunctionReflection::GetDesc">
    <summary>
      <para>Fills the function descriptor structure for the function.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12functionreflection-getdesc" /></para>
      <param name="pDesc">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12shader/ns-d3d12shader-d3d12_function_desc">D3D12_FUNCTION_DESC</a> structure that receives a description of the function.</param>
    </summary>
  </comment>
  <comment id="D3D12_MIP_REGION">
    <summary>
      <para>Describes the dimensions of a mip region.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_mip_region" /></para>
    </summary>
  </comment>
  <comment id="D3D12_MIP_REGION::Width">
    <summary>The width of the mip region.</summary>
  </comment>
  <comment id="D3D12_MIP_REGION::Height">
    <summary>The height of the mip region.</summary>
  </comment>
  <comment id="D3D12_MIP_REGION::Depth">
    <summary>The depth of the mip region.</summary>
  </comment>
  <comment id="D3D12_PIPELINE_STATE_STREAM_DESC">
    <summary>
      <para>Describes a pipeline state stream.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_pipeline_state_stream_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_PIPELINE_STATE_STREAM_DESC::SizeInBytes">
    <summary><a href="https://docs.microsoft.com/visualstudio/code-quality/annotating-structs-and-classes?view=vs-2015">SAL</a>: <c>_In_</c>

Specifies the size of the opaque data structure pointed to by the pPipelineStateSubobjectStream member, in bytes.</summary>
  </comment>
  <comment id="D3D12_PIPELINE_STATE_STREAM_DESC::pPipelineStateSubobjectStream">
    <summary><a href="https://docs.microsoft.com/visualstudio/code-quality/annotating-structs-and-classes?view=vs-2015">SAL</a>: <c>_In_reads_(_Inexpressible_("Dependentonsizeofsubobjects"))</c>

Specifies the address of a data structure that describes as a bytestream an arbitrary pipeline state subobject.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_ARCHITECTURE">
    <summary>
      <para>Provides detail about the adapter architecture, so that your application can better optimize for certain adapter properties.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_feature_data_architecture" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_ARCHITECTURE::NodeIndex">
    <summary>In multi-adapter operation, this indicates which physical adapter of the device is relevant.
            See <a href="https://docs.microsoft.com/windows/win32/direct3d12/multi-engine">Multi-adapter systems</a>.
            <b>NodeIndex</b> is filled out by the application before calling <a href="https://docs.microsoft.com/windows/win32/api/d3d12/nf-d3d12-id3d12device-checkfeaturesupport">CheckFeatureSupport</a>, as the application can retrieve details about the architecture of each adapter.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_ARCHITECTURE::TileBasedRenderer">
    <summary>Specifies whether the hardware and driver support a tile-based renderer.
            The runtime sets this member to <b>TRUE</b> if the hardware and driver support a tile-based renderer.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_ARCHITECTURE::UMA">
    <summary>Specifies whether the hardware and driver support UMA.
            The runtime sets this member to <b>TRUE</b> if the hardware and driver support UMA.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_ARCHITECTURE::CacheCoherentUMA">
    <summary>Specifies whether the hardware and driver support cache-coherent UMA.
            The runtime sets this member to <b>TRUE</b> if the hardware and driver support cache-coherent UMA.</summary>
  </comment>
  <comment id="D3D12_VIDEO_SCALE_SUPPORT">
    <summary>
      <para>Describes the supported scaling range of output sizes for a video scaler.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_video_scale_support" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_SCALE_SUPPORT::OutputSizeRange">
    <summary>A <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_size_range.md">D3D12_VIDEO_SIZE_RANGE</a> structure describing the supported output size range for the scaler.</summary>
  </comment>
  <comment id="D3D12_VIDEO_SCALE_SUPPORT::Flags">
    <summary>A member of the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_scale_support_flags.md">D3D12_VIDEO_SCALE_SUPPORT_FLAGS</a> enumeration specifying the supported scaling capabilities of the scaler.</summary>
  </comment>
  <comment id="D3D12_INPUT_LAYOUT_DESC">
    <summary>
      <para>Describes the input-buffer data for the input-assembler stage.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_input_layout_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_INPUT_LAYOUT_DESC::pInputElementDescs">
    <summary>An array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_input_element_desc">D3D12_INPUT_ELEMENT_DESC</a> structures that describe the data types of the input-assembler stage.</summary>
  </comment>
  <comment id="D3D12_INPUT_LAYOUT_DESC::NumElements">
    <summary>The number of input-data types in the array of input elements that the <b>pInputElementDescs</b> member points to.</summary>
  </comment>
  <comment id="D3D12_COMMAND_SIGNATURE_DESC">
    <summary>
      <para>Describes the arguments (parameters) of a command signature.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_command_signature_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_COMMAND_SIGNATURE_DESC::ByteStride">
    <summary>Specifies the size of each argument of a command signature, in bytes.</summary>
  </comment>
  <comment id="D3D12_COMMAND_SIGNATURE_DESC::NumArgumentDescs">
    <summary>Specifies the number of arguments in the command signature.</summary>
  </comment>
  <comment id="D3D12_COMMAND_SIGNATURE_DESC::pArgumentDescs">
    <summary>An array of <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_indirect_argument_desc">D3D12_INDIRECT_ARGUMENT_DESC</a> structures,
            containing details of the arguments, including whether the argument is a vertex buffer, constant, constant buffer view, shader resource view, or unordered access view.</summary>
  </comment>
  <comment id="D3D12_COMMAND_SIGNATURE_DESC::NodeMask">
    <summary>For single GPU operation, set this to zero. If there are multiple GPU nodes, set bits to identify the nodes (the  device's physical adapters) for which the command signature is to apply.
            Each bit in the mask corresponds to a single node.
            Refer to <a href="https://docs.microsoft.com/windows/win32/direct3d12/multi-engine">Multi-adapter systems</a>.</summary>
  </comment>
  <comment id="ID3D12ShaderReflection::GetOutputParameterDesc">
    <summary>
      <para>Gets an output-parameter description for a shader.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getoutputparameterdesc" /></para>
      <param name="ParameterIndex">A zero-based parameter index.</param>
      <param name="pDesc">A shader-output-parameter description, as a pointer to a <a href="https://docs.microsoft.com/windows/win32/api/d3d12shader/ns-d3d12shader-d3d12_signature_parameter_desc">D3D12_SIGNATURE_PARAMETER_DESC</a> structure.</param>
    </summary>
  </comment>
  <comment id="ID3D12InfoQueue::GetStorageFilter">
    <summary>
      <para>Get the storage filter at the top of the storage-filter stack.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getstoragefilter" /></para>
      <param name="pFilter">Storage filter at the top of the storage-filter stack.</param>
      <param name="pFilterByteLength">Size of the storage filter in bytes. If <i>pFilter</i> is NULL, the size of the storage filter will be output to this parameter.</param>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS6">
    <summary>
      <para>Indicates the level of support that the adapter provides for variable-rate shading (VRS), and indicates whether or not background processing is supported.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_feature_data_d3d12_options6" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS6::AdditionalShadingRatesSupported">
    <summary>Indicates whether 2x4, 4x2, and 4x4 coarse pixel sizes are supported for single-sampled rendering; and whether coarse pixel size 2x4 is supported for 2x MSAA. <c>true</c> if those sizes are supported, otherwise <c>false</c>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS6::PerPrimitiveShadingRateSupportedWithViewportIndexing">
    <summary>Indicates whether the per-provoking-vertex (also known as per-primitive) rate can be used with more than one viewport. If so, then, in that case, that rate can be used when <c>SV_ViewportIndex</c> is written to. <c>true</c> if that rate can be used with more than one viewport, otherwise <c>false</c>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS6::VariableShadingRateTier">
    <summary>Indicates the shading rate tier.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS6::ShadingRateImageTileSize">
    <summary>Indicates the tile size of the screen-space image as a <b>UINT</b>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS6::BackgroundProcessingSupported">
    <summary>Indicates whether or not background processing is supported. <c>true</c> if background processing is supported, otherwise <c>false</c>. For more info, see the [Direct3D 12 background processing spec](https://microsoft.github.io/DirectX-Specs/d3d/BackgroundProcessing.html).</summary>
  </comment>
  <comment id="D3D12_TILE_REGION_SIZE">
    <summary>
      <para>Describes the size of a tiled region.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_tile_region_size" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TILE_REGION_SIZE::NumTiles">
    <summary>The number of tiles in the tiled region.</summary>
  </comment>
  <comment id="D3D12_TILE_REGION_SIZE::UseBox">
    <summary>Specifies whether the runtime uses the <b>Width</b>, <b>Height</b>, and <b>Depth</b> members to define the region.
            

If <b>TRUE</b>, the runtime uses the <b>Width</b>, <b>Height</b>, and <b>Depth</b> members to define the region. In this case,  <b>NumTiles</b> should be equal to <b>Width</b> *  <b>Height</b> * <b>Depth</b>.

If <b>FALSE</b>, the runtime ignores the <b>Width</b>, <b>Height</b>, and <b>Depth</b> members and uses the <b>NumTiles</b> member to traverse tiles in the resource linearly across x, then y, then z (as applicable) and then spills over mipmaps/arrays in subresource order.  For example, use this technique to map an entire resource at once.
            

Regardless of whether you specify <b>TRUE</b> or <b>FALSE</b> for <b>UseBox</b>, you use a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tiled_resource_coordinate">D3D12_TILED_RESOURCE_COORDINATE</a> structure to specify the starting location for the region within the resource as a separate parameter outside of this structure by using x, y, and z coordinates.
            

When the region includes mipmaps that are packed with nonstandard tiling, <b>UseBox</b> must be <b>FALSE</b> because tile dimensions are not standard and the app only knows a count of how many tiles are consumed by the packed area, which is per array slice.  The corresponding (separate) starting location parameter uses x to offset into the flat range of tiles in this case, and y and z coordinates must each be 0.</summary>
  </comment>
  <comment id="D3D12_TILE_REGION_SIZE::Width">
    <summary>The width of the tiled region, in tiles. Used for buffer and 1D, 2D, and 3D textures.</summary>
  </comment>
  <comment id="D3D12_TILE_REGION_SIZE::Height">
    <summary>The height of the tiled region, in tiles. Used for 2D and 3D textures.</summary>
  </comment>
  <comment id="D3D12_TILE_REGION_SIZE::Depth">
    <summary>The depth of the tiled region, in tiles. Used for 3D textures or arrays. For arrays, used for advancing in depth jumps to next slice of same mipmap size, which isn't contiguous in the subresource counting space if there are multiple mipmaps.</summary>
  </comment>
  <comment id="D3D12_PREDICATION_OP">
    <summary>
      <para>Specifies the predication operation to apply.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_predication_op" /></para>
    </summary>
  </comment>
  <comment id="D3D12_PREDICATION_OP::D3D12_PREDICATION_OP_EQUAL_ZERO">
    <summary>Enables predication if all 64-bits are zero.</summary>
  </comment>
  <comment id="D3D12_PREDICATION_OP::D3D12_PREDICATION_OP_NOT_EQUAL_ZERO">
    <summary>Enables predication if at least one of the 64-bits are not zero.</summary>
  </comment>
  <comment id="ID3D12ShaderReflectionType::IsEqual">
    <summary>
      <para>Indicates whether two ID3D12ShaderReflectionType Interface pointers have the same underlying type.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflectiontype-isequal" /></para>
      <param name="pType">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12shader/nn-d3d12shader-id3d12shaderreflectiontype">ID3D12ShaderReflectionType Interface</a>.</param>
    </summary>
  </comment>
  <comment id="ID3D12CommandQueue::UpdateTileMappings">
    <summary>
      <para>Updates mappings of tile locations in reserved resources to memory locations in a resource heap.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12commandqueue-updatetilemappings" /></para>
      <param name="pResource">A pointer to the reserved resource.</param>
      <param name="NumResourceRegions">The number of reserved resource regions.</param>
      <param name="pResourceRegionStartCoordinates">An array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tiled_resource_coordinate">D3D12_TILED_RESOURCE_COORDINATE</a> structures that describe the starting coordinates of the reserved resource regions. The <i>NumResourceRegions</i> parameter specifies the number of <b>D3D12_TILED_RESOURCE_COORDINATE</b> structures in the array.</param>
      <param name="pResourceRegionSizes">An array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tile_region_size">D3D12_TILE_REGION_SIZE</a> structures that describe the sizes of the reserved resource regions. The <i>NumResourceRegions</i> parameter specifies the number of <b>D3D12_TILE_REGION_SIZE</b> structures in the array.</param>
      <param name="pHeap">A pointer to the resource heap.</param>
      <param name="NumRanges">The number of tile  ranges.</param>
      <param name="pRangeFlags">A pointer to an  array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_tile_range_flags">D3D12_TILE_RANGE_FLAGS</a> values that describes each tile range. The <i>NumRanges</i> parameter specifies the number of values in the array.</param>
      <param name="pHeapRangeStartOffsets">An array of offsets into the resource heap. These are 0-based tile offsets, counting in tiles (not bytes).</param>
      <param name="pRangeTileCounts">An array of tiles.
            An array of values that specify the number of tiles in each tile range. The <i>NumRanges</i> parameter specifies the number of values in the array.</param>
      <param name="Flags">A combination of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_tile_mapping_flags">D3D12_TILE_MAPPING_FLAGS</a> values that are combined by using a bitwise OR operation.</param>
    </summary>
  </comment>
  <comment id="D3D12_RESOURCE_UAV_BARRIER">
    <summary>
      <para>Represents a resource in which all UAV accesses must complete before any future UAV accesses can begin.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_resource_uav_barrier" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RESOURCE_UAV_BARRIER::pResource">
    <summary>The resource used in the transition, as a pointer to <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a>.</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_STATES">
    <summary>
      <para>Defines flags that specify states related to a graphics command list. Values can be bitwise OR'd together.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_graphics_states" /></para>
    </summary>
  </comment>
  <comment id="D3D12_GRAPHICS_STATES::D3D12_GRAPHICS_STATE_NONE">
    <summary>Specifies no state.</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_STATES::D3D12_GRAPHICS_STATE_IA_VERTEX_BUFFERS">
    <summary>Specifies the state of the vertex buffer bindings on the input assembler stage.</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_STATES::D3D12_GRAPHICS_STATE_IA_INDEX_BUFFER">
    <summary>Specifies the state of the index buffer binding on the input assembler stage.</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_STATES::D3D12_GRAPHICS_STATE_IA_PRIMITIVE_TOPOLOGY">
    <summary>Specifies the state of the primitive topology value set on the input assembler stage.</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_STATES::D3D12_GRAPHICS_STATE_DESCRIPTOR_HEAP">
    <summary>Specifies the state of the currently bound descriptor heaps.</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_STATES::D3D12_GRAPHICS_STATE_GRAPHICS_ROOT_SIGNATURE">
    <summary>Specifies the state of the currently set graphics root signature.</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_STATES::D3D12_GRAPHICS_STATE_COMPUTE_ROOT_SIGNATURE">
    <summary>Specifies the state of the currently set compute root signature.</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_STATES::D3D12_GRAPHICS_STATE_RS_VIEWPORTS">
    <summary>Specifies the state of the viewports bound to the rasterizer stage.</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_STATES::D3D12_GRAPHICS_STATE_RS_SCISSOR_RECTS">
    <summary>Specifies the state of the scissor rectangles bound to the rasterizer stage.</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_STATES::D3D12_GRAPHICS_STATE_PREDICATION">
    <summary>Specifies the predicate state.</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_STATES::D3D12_GRAPHICS_STATE_OM_RENDER_TARGETS">
    <summary>Specifies the state of the render targets bound to the output merger stage.</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_STATES::D3D12_GRAPHICS_STATE_OM_STENCIL_REF">
    <summary>Specifies the state of the reference value for depth stencil tests set on the output merger stage.</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_STATES::D3D12_GRAPHICS_STATE_OM_BLEND_FACTOR">
    <summary>Specifies the state of the blend factor set on the output merger stage.</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_STATES::D3D12_GRAPHICS_STATE_PIPELINE_STATE">
    <summary>Specifies the state of the pipeline state object.</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_STATES::D3D12_GRAPHICS_STATE_SO_TARGETS">
    <summary>Specifies the state of the buffer views bound to the stream output stage.</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_STATES::D3D12_GRAPHICS_STATE_OM_DEPTH_BOUNDS">
    <summary>Specifies the state of the depth bounds set on the output merger stage.</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_STATES::D3D12_GRAPHICS_STATE_SAMPLE_POSITIONS">
    <summary>Specifies the state of the sample positions.</summary>
  </comment>
  <comment id="D3D12_GRAPHICS_STATES::D3D12_GRAPHICS_STATE_VIEW_INSTANCE_MASK">
    <summary>Specifies the state of the view instances mask.</summary>
  </comment>
  <comment id="ID3D12CommandSignature">
    <summary>
      <para>A command signature object enables apps to specify indirect drawing, including the buffer format, command type and resource bindings to be used.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12commandsignature" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TILED_RESOURCES_TIER">
    <summary>
      <para>Identifies the tier level at which tiled resources are supported.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_tiled_resources_tier" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TILED_RESOURCES_TIER::D3D12_TILED_RESOURCES_TIER_NOT_SUPPORTED">
    <summary>Indicates that textures cannot be created with the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_texture_layout">D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE</a> layout.
            


<a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12device-createreservedresource">ID3D12Device::CreateReservedResource</a> cannot be used, not even for buffers.</summary>
  </comment>
  <comment id="D3D12_TILED_RESOURCES_TIER::D3D12_TILED_RESOURCES_TIER_1">
    <summary>Indicates that 2D textures can be created with the D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE layout.
              Limitations exist for certain resource formats and properties.
              For more details, see <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_texture_layout">D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE</a>.
            


<a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12device-createreservedresource">ID3D12Device::CreateReservedResource</a> can be used.
            

GPU reads or writes to NULL mappings are undefined.
              Applications are encouraged to workaround this limitation by repeatedly mapping the same page to everywhere a NULL mapping would've been used.
            

When the size of a texture mipmap level is an integer multiple of the standard tile shape for its format, it is guaranteed to be nonpacked.</summary>
  </comment>
  <comment id="D3D12_TILED_RESOURCES_TIER::D3D12_TILED_RESOURCES_TIER_2">
    <summary>Indicates that a superset of Tier_1 functionality is supported, including this additional support:
            

<ul>
<li>When the size of a texture mipmap level is at least one standard tile shape for its format, the mipmap level is guaranteed to be nonpacked.
                For more info, see <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_packed_mip_info">D3D12_PACKED_MIP_INFO</a>.
              </li>
<li>Shader instructions are available for clamping level-of-detail (LOD) and for obtaining status about the shader operation.
                For info about one of these shader instructions, see Sample(S,float,int,float,uint).
                <a href="https://docs.microsoft.com/windows/desktop/direct3dhlsl/sample-s-float--int-uint-">Sample(S,float,int,float,uint)</a>.
              </li>
<li>Reading from <b>NULL</b>-mapped tiles treat that sampled value as zero.
                Writes to <b>NULL</b>-mapped tiles are discarded.
              </li>
</ul>
Adapters that support feature level 12_0 all support TIER_2 or greater.</summary>
  </comment>
  <comment id="D3D12_TILED_RESOURCES_TIER::D3D12_TILED_RESOURCES_TIER_3">
    <summary>Indicates that a superset of Tier 2 is supported, with the addition that 3D textures (<a href="https://docs.microsoft.com/windows/desktop/direct3d12/volume-tiled-resources">Volume Tiled Resources</a>) are supported.</summary>
  </comment>
  <comment id="ID3D12Device::GetCopyableFootprints">
    <summary>
      <para>Gets a resource layout that can be copied. Helps the app fill-in D3D12_PLACED_SUBRESOURCE_FOOTPRINT and D3D12_SUBRESOURCE_FOOTPRINT when suballocating space in upload heaps.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-getcopyablefootprints" /></para>
      <param name="pResourceDesc">A description of the resource, as a pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_resource_desc">D3D12_RESOURCE_DESC</a> structure.</param>
      <param name="FirstSubresource">Index of the first subresource in the resource.
            The range of valid values is 0 to D3D12_REQ_SUBRESOURCES.</param>
      <param name="NumSubresources">The number of subresources in the resource.  The range of valid values is 0 to (D3D12_REQ_SUBRESOURCES - <i>FirstSubresource</i>).</param>
      <param name="BaseOffset">The offset, in bytes, to the resource.</param>
      <param name="pLayouts">A pointer to an array (of length <i>NumSubresources</i>) of
            <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_placed_subresource_footprint">D3D12_PLACED_SUBRESOURCE_FOOTPRINT</a> structures, to be filled with the description and placement of each subresource.</param>
      <param name="pNumRows">A pointer to an array (of length <i>NumSubresources</i>) of integer  variables, to be filled with the number of rows for each subresource.</param>
      <param name="pRowSizeInBytes">A pointer to an array (of length <i>NumSubresources</i>) of integer variables, each entry to be filled with the unpadded size in bytes of a row, of each subresource.
          

For example, if a Texture2D resource has a width of 32 and bytes per pixel of 4, 

then <i>pRowSizeInBytes</i> returns 128.

<i>pRowSizeInBytes</i> should not be confused with <b>row pitch</b>, as examining <i>pLayouts</i> and getting the row pitch from that will give you 256 as it is aligned to D3D12_TEXTURE_DATA_PITCH_ALIGNMENT.</param>
      <param name="pTotalBytes">A pointer to an integer variable, to be filled with the total size, in bytes.</param>
    </summary>
  </comment>
  <comment id="D3D12_TEX2D_ARRAY_SRV">
    <summary>
      <para>Describes the subresources from an array of 2D textures to use in a shader-resource view.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_tex2d_array_srv" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TEX2D_ARRAY_SRV::MostDetailedMip">
    <summary>Index of the most detailed mipmap level to use; this number is between 0 and <b>MipLevels</b> -1 (where <b>MipLevels</b> is from the original Texture2D for which <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12device-createshaderresourceview">ID3D12Device::CreateShaderResourceView</a> creates a view).</summary>
  </comment>
  <comment id="D3D12_TEX2D_ARRAY_SRV::MipLevels">
    <summary>The maximum number of mipmap levels for the view of the texture. See the remarks in <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tex1d_srv">D3D12_TEX1D_SRV</a>.
            

Set to -1 to indicate all the mipmap levels from <b>MostDetailedMip</b> on down to least detailed.</summary>
  </comment>
  <comment id="D3D12_TEX2D_ARRAY_SRV::FirstArraySlice">
    <summary>The index of the first texture to use in an array of textures.</summary>
  </comment>
  <comment id="D3D12_TEX2D_ARRAY_SRV::ArraySize">
    <summary>Number of textures in the array.</summary>
  </comment>
  <comment id="D3D12_TEX2D_ARRAY_SRV::PlaneSlice">
    <summary>The index (plane slice number) of the plane to use in an array of textures.</summary>
  </comment>
  <comment id="D3D12_TEX2D_ARRAY_SRV::ResourceMinLODClamp">
    <summary>A value to clamp sample LOD values to. For example, if you specify 2.0f for the clamp value, you ensure that no individual sample accesses a mip level less than 2.0f.</summary>
  </comment>
  <comment id="ID3D12DebugCommandQueue::AssertResourceState">
    <summary>
      <para>Checks whether a resource, or subresource, is in a specified state, or not.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12debugcommandqueue-assertresourcestate" /></para>
      <param name="pResource">Specifies the  <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a> to check.</param>
      <param name="Subresource">The index of the subresource to check.
          This can be set to an index, or D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES.</param>
      <param name="State">Specifies the state to check for. This can be one or more D3D12_RESOURCE_STATES flags Or'ed together.</param>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS">
    <summary>
      <para>Specifies input stream arguments for an input stream passed to ID3D12VideoCommandList::ProcessFrames.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_video_process_input_stream_arguments" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS::InputStream">
    <summary>An array of <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_process_input_stream.md">D3D12_VIDEO_PROCESS_INPUT_STREAM</a> structures containing the set of references for video processing. If the stereo format is <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_frame_stereo_format.md">D3D12_VIDEO_PROCESS_STEREO_FORMAT_SEPARATE</a>, then two sets of input streams must be supplied.  For all other stereo formats, the first set of reference must be supplied, and the second should be zero initialized.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS::Transform">
    <summary>A <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_process_transform.md">D3D12_VIDEO_PROCESS_TRANSFORM</a> structure specifying the flip, rotation, scale and destination translation for the video input.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS::Flags">
    <summary>A value from the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_process_input_stream_flags.md">D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS</a> enumeration specifying the options for the input stream.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS::RateInfo">
    <summary>A <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_process_input_stream_rate.md">D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE</a> structure specifying the framerate and input and output indicies for framerate conversion and deinterlacing.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS::FilterLevels">
    <summary>The level to apply for each enabled filter.  The filter level is specified in the order that filters appear in the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_process_filter_flags.md">D3D12_VIDEO_PROCESS_FILTER_FLAGS</a> enumeration.  Specify 0 if a filter is not enabled or the filter index is reserved.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS::AlphaBlending">
    <summary>A <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_process_alpha_blending.md">D3D12_VIDEO_PROCESS_ALPHA_BLENDING</a> structure specifying the planar alpha for an input stream on the video processor.</summary>
  </comment>
  <comment id="ID3D12Debug2::SetGPUBasedValidationFlags">
    <summary>
      <para>This method configures the level of GPU-based validation that the debug device is to perform at runtime.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12debug2-setgpubasedvalidationflags" /></para>
      <param name="Flags">Specifies the level of GPU-based validation to perform at runtime.</param>
    </summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::Close">
    <summary>
      <para>Indicates that recording to the command list has finished.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-close" /></para>
    </summary>
  </comment>
  <comment id="ID3D12Debug2">
    <summary>
      <para>Adds configurable levels of GPU-based validation to the debug layer.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nn-d3d12sdklayers-id3d12debug2" /></para>
    </summary>
  </comment>
  <comment id="ID3D12ShaderReflection::IsSampleFrequencyShader">
    <summary>
      <para>Indicates whether a shader is a sample frequency shader.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-issamplefrequencyshader" /></para>
    </summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::ResourceBarrier">
    <summary>
      <para>Notifies the driver that it needs to synchronize multiple accesses to resources.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-resourcebarrier" /></para>
      <param name="NumBarriers">The number of submitted barrier descriptions.</param>
      <param name="pBarriers">Pointer to an array of barrier descriptions.</param>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_FRAME_ARGUMENT">
    <summary>
      <para>Represents the decode parameters for a frame.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_video_decode_frame_argument" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_FRAME_ARGUMENT::Type">
    <summary>A member of the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_decode_argument_type.md">D3D12_VIDEO_DECODE_ARGUMENT_TYPE</a> enumeration specifying the type of argument.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_FRAME_ARGUMENT::Size">
    <summary>The size of the data in <i>pArgument</i>, in bytes.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_FRAME_ARGUMENT::pData">
    <summary>A pointer to the argument data.</summary>
  </comment>
  <comment id="ID3D12PipelineState">
    <summary>
      <para>Represents the state of all currently set shaders as well as certain fixed function state objects.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12pipelinestate" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS">
    <summary>
      <para>Specifies support for protected resources in video operations.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ne-d3d12video-d3d12_video_protected_resource_support_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS::D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAG_NONE">
    <summary>Protected resources are not supported.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAGS::D3D12_VIDEO_PROTECTED_RESOURCE_SUPPORT_FLAG_SUPPORTED">
    <summary>Protected resources are supported.</summary>
  </comment>
  <comment id="D3D12_VARIABLE_SHADING_RATE_TIER">
    <summary>
      <para>Defines constants that specify a shading rate tier (for variable-rate shading, or VRS).</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_variable_shading_rate_tier" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VARIABLE_SHADING_RATE_TIER::D3D12_VARIABLE_SHADING_RATE_TIER_NOT_SUPPORTED">
    <summary>Specifies that variable-rate shading is not supported.</summary>
  </comment>
  <comment id="D3D12_VARIABLE_SHADING_RATE_TIER::D3D12_VARIABLE_SHADING_RATE_TIER_1">
    <summary>Specifies that variable-rate shading tier 1 is supported.</summary>
  </comment>
  <comment id="D3D12_VARIABLE_SHADING_RATE_TIER::D3D12_VARIABLE_SHADING_RATE_TIER_2">
    <summary>Specifies that variable-rate shading tier 2 is supported.</summary>
  </comment>
  <comment id="D3D12_ROOT_PARAMETER1">
    <summary>
      <para>Describes the slot of a root signature version 1.1.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_root_parameter1" /></para>
    </summary>
  </comment>
  <comment id="D3D12_ROOT_PARAMETER1::ParameterType">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_root_parameter_type">D3D12_ROOT_PARAMETER_TYPE</a>-typed value that  specifies the type of root signature slot. This member determines which type to use in the union below.</summary>
  </comment>
  <comment id="D3D12_ROOT_PARAMETER1::DescriptorTable">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_root_descriptor_table1">D3D12_ROOT_DESCRIPTOR_TABLE1</a> structure that describes the layout of a descriptor table as a collection of descriptor ranges that appear one after the other in a descriptor heap.</summary>
  </comment>
  <comment id="D3D12_ROOT_PARAMETER1::Constants">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_root_constants">D3D12_ROOT_CONSTANTS</a> structure that describes constants inline in the root signature that appear in shaders as one constant buffer.</summary>
  </comment>
  <comment id="D3D12_ROOT_PARAMETER1::Descriptor">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_root_descriptor1">D3D12_ROOT_DESCRIPTOR1</a> structure that describes descriptors inline in the root signature that appear in shaders.</summary>
  </comment>
  <comment id="D3D12_ROOT_PARAMETER1::ShaderVisibility">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_shader_visibility">D3D12_SHADER_VISIBILITY</a>-typed value that  specifies the shaders that can access the contents of the root signature slot.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::OMSetRenderTargets">
    <summary>
      <para>Sets CPU descriptor handles for the render targets and depth stencil.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-omsetrendertargets" /></para>
      <param name="NumRenderTargetDescriptors">The number of entries in the <i>pRenderTargetDescriptors</i> array (ranges between 0 and <b>D3D12_SIMULTANEOUS_RENDER_TARGET_COUNT</b>). If this parameter is nonzero, the number of entries in the array to which pRenderTargetDescriptors points must equal the number in this parameter.</param>
      <param name="pRenderTargetDescriptors">Specifies an array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_cpu_descriptor_handle">D3D12_CPU_DESCRIPTOR_HANDLE</a> structures that describe the CPU descriptor handles that represents the start of the heap of render target descriptors. If this parameter is NULL and NumRenderTargetDescriptors is 0, no render targets are bound.</param>
      <param name="RTsSingleHandleToDescriptorRange"><b>True</b> means the handle passed in is the pointer to a contiguous range of <i>NumRenderTargetDescriptors</i>  descriptors.  This case is useful if the set of descriptors to bind already happens to be contiguous in memory (so all that’s needed is a handle to the first one).  For example, if  <i>NumRenderTargetDescriptors</i> is 3 then the memory layout is taken as follows:

<img alt="Memory layout with parameter set to true" src="./images/oms_true.png"/>
In this case the driver dereferences the handle and then increments the memory being pointed to.

<b>False</b> means that the handle is the first of an array of <i>NumRenderTargetDescriptors</i> handles.  The false case allows an application to bind a set of descriptors from different locations at once. Again assuming that <i>NumRenderTargetDescriptors</i> is 3, the memory layout is taken as follows:

<img alt="Memory layout with parameter set to false" src="./images/oms_false.png"/>
In this case the driver dereferences three handles that are expected to be adjacent to each other in memory.</param>
      <param name="pDepthStencilDescriptor">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_cpu_descriptor_handle">D3D12_CPU_DESCRIPTOR_HANDLE</a> structure that describes the CPU descriptor handle that represents the start of the heap that holds the depth stencil descriptor. If this parameter is NULL, no depth stencil descriptor is bound.</param>
    </summary>
  </comment>
  <comment id="D3D12_LOGIC_OP">
    <summary>
      <para>Specifies logical operations to configure for a render target.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_logic_op" /></para>
    </summary>
  </comment>
  <comment id="D3D12_LOGIC_OP::D3D12_LOGIC_OP_CLEAR">
    <summary>Clears the render target (<c>0</c>).</summary>
  </comment>
  <comment id="D3D12_LOGIC_OP::D3D12_LOGIC_OP_SET">
    <summary>Sets the render target ( <c>1</c>).</summary>
  </comment>
  <comment id="D3D12_LOGIC_OP::D3D12_LOGIC_OP_COPY">
    <summary>Copys the render target (<c>s</c> source from Pixel Shader output).</summary>
  </comment>
  <comment id="D3D12_LOGIC_OP::D3D12_LOGIC_OP_COPY_INVERTED">
    <summary>Performs an inverted-copy of the render target (<c>~s</c>).</summary>
  </comment>
  <comment id="D3D12_LOGIC_OP::D3D12_LOGIC_OP_NOOP">
    <summary>No operation is performed on the render target (<c>d</c> destination in the Render Target View).</summary>
  </comment>
  <comment id="D3D12_LOGIC_OP::D3D12_LOGIC_OP_INVERT">
    <summary>Inverts the render target (<c>~d</c>).</summary>
  </comment>
  <comment id="D3D12_LOGIC_OP::D3D12_LOGIC_OP_AND">
    <summary>Performs a logical AND operation on the render target (<c>s &amp; d</c>).</summary>
  </comment>
  <comment id="D3D12_LOGIC_OP::D3D12_LOGIC_OP_NAND">
    <summary>Performs a logical NAND operation on the render target (<c>~(s &amp; d)</c>).</summary>
  </comment>
  <comment id="D3D12_LOGIC_OP::D3D12_LOGIC_OP_OR">
    <summary>Performs a logical OR operation on the render target (<c>s | d</c>).</summary>
  </comment>
  <comment id="D3D12_LOGIC_OP::D3D12_LOGIC_OP_NOR">
    <summary>Performs a logical NOR operation on the render target (<c>~(s | d)</c>).</summary>
  </comment>
  <comment id="D3D12_LOGIC_OP::D3D12_LOGIC_OP_XOR">
    <summary>Performs a logical XOR operation on the render target (<c>s ^ d</c>).</summary>
  </comment>
  <comment id="D3D12_LOGIC_OP::D3D12_LOGIC_OP_EQUIV">
    <summary>Performs a logical equal operation on the render target (<c>~(s ^ d)</c>).</summary>
  </comment>
  <comment id="D3D12_LOGIC_OP::D3D12_LOGIC_OP_AND_REVERSE">
    <summary>Performs a logical AND and reverse operation on the render target (<c>s &amp; ~d</c>).</summary>
  </comment>
  <comment id="D3D12_LOGIC_OP::D3D12_LOGIC_OP_AND_INVERTED">
    <summary>Performs a logical AND and invert operation on the render target (<c>~s &amp; d</c>).</summary>
  </comment>
  <comment id="D3D12_LOGIC_OP::D3D12_LOGIC_OP_OR_REVERSE">
    <summary>Performs a logical OR and reverse operation on the render target (<c>s | ~d</c>).</summary>
  </comment>
  <comment id="D3D12_LOGIC_OP::D3D12_LOGIC_OP_OR_INVERTED">
    <summary>Performs a logical OR and invert operation on the render target (<c>~s | d</c>).</summary>
  </comment>
  <comment id="ID3D12PipelineLibrary::LoadComputePipeline">
    <summary>
      <para>Retrieves the requested PSO from the library. The input desc is matched against the data in the current library database, and remembered in order to prevent duplication of PSO contents.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12pipelinelibrary-loadcomputepipeline" /></para>
      <param name="pName">The unique name of the PSO.</param>
      <param name="pDesc">Specifies a description of the required PSO in a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_compute_pipeline_state_desc">D3D12_COMPUTE_PIPELINE_STATE_DESC</a> structure. This input description is matched against the data in the current library database, and stored in order to prevent duplication of PSO contents.</param>
      <param name="riid">Specifies a REFIID for the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12pipelinestate">ID3D12PipelineState</a> object. Typically set this, and the following parameter, with the macro <c>IID_PPV_ARGS(&amp;PSO1)</c>, where <i>PSO1</i> is the name of the object.</param>
      <param name="ppPipelineState">Specifies a pointer that will reference the returned PSO.</param>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS">
    <summary>
      <para>Specifies the automatic processing features that a video processor can support.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ne-d3d12video-d3d12_video_process_auto_processing_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS::D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_NONE">
    <summary>No automatic processing features are supported.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS::D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_DENOISE">
    <summary>Denoise is supported.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS::D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_DERINGING">
    <summary>Deringing is supported.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS::D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_EDGE_ENHANCEMENT">
    <summary>Edge enhancement is supported.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS::D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_COLOR_CORRECTION">
    <summary>Color correction is supported.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS::D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_FLESH_TONE_MAPPING">
    <summary>Flesh tone mapping is supported.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS::D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_IMAGE_STABILIZATION">
    <summary>Image stabilization is supported.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS::D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_SUPER_RESOLUTION">
    <summary>Enhanced image resolution is supported.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS::D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_ANAMORPHIC_SCALING">
    <summary>Anamorphic scaling is supported.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAGS::D3D12_VIDEO_PROCESS_AUTO_PROCESSING_FLAG_CUSTOM">
    <summary>Additional processing features, not described by the other flags, are available.</summary>
  </comment>
  <comment id="D3D12_MEMCPY_DEST">
    <summary>
      <para>Describes the destination of a memory copy operation.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_memcpy_dest" /></para>
    </summary>
  </comment>
  <comment id="D3D12_MEMCPY_DEST::pData">
    <summary>A pointer to a memory block that receives the copied data.</summary>
  </comment>
  <comment id="D3D12_MEMCPY_DEST::RowPitch">
    <summary>The row pitch, or width, or physical size, in bytes, of the subresource data.</summary>
  </comment>
  <comment id="D3D12_MEMCPY_DEST::SlicePitch">
    <summary>The slice pitch, or width, or physical size, in bytes, of the subresource data.</summary>
  </comment>
  <comment id="D3D12_TILE_RANGE_FLAGS">
    <summary>
      <para>Specifies a range of tile mappings.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_tile_range_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TILE_RANGE_FLAGS::D3D12_TILE_RANGE_FLAG_NONE">
    <summary>No tile-mapping flags are specified.</summary>
  </comment>
  <comment id="D3D12_TILE_RANGE_FLAGS::D3D12_TILE_RANGE_FLAG_NULL">
    <summary>The tile range is <b>NULL</b>.</summary>
  </comment>
  <comment id="D3D12_TILE_RANGE_FLAGS::D3D12_TILE_RANGE_FLAG_SKIP">
    <summary>Skip the tile range.</summary>
  </comment>
  <comment id="D3D12_TILE_RANGE_FLAGS::D3D12_TILE_RANGE_FLAG_REUSE_SINGLE_TILE">
    <summary>Reuse a single tile in the tile range.</summary>
  </comment>
  <comment id="ID3D12CommandQueue::GetTimestampFrequency">
    <summary>
      <para>This method is used to determine the rate at which the GPU timestamp counter increments.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12commandqueue-gettimestampfrequency" /></para>
      <param name="pFrequency">The GPU timestamp counter frequency (in ticks/second).</param>
    </summary>
  </comment>
  <comment id="D3D12_COMMAND_LIST_FLAGS::D3D12_COMMAND_LIST_FLAG_NONE">
    <summary>No flags specified.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList4::DispatchRays">
    <summary>
      <para>Launch the threads of a ray generation shader.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist4-dispatchrays" /></para>
      <param name="pDesc">A description of the ray dispatch</param>
    </summary>
  </comment>
  <comment id="D3D12_ROOT_DESCRIPTOR1">
    <summary>
      <para>Describes descriptors inline in the root signature version 1.1 that appear in shaders.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_root_descriptor1" /></para>
    </summary>
  </comment>
  <comment id="D3D12_ROOT_DESCRIPTOR1::ShaderRegister">
    <summary>The shader register.</summary>
  </comment>
  <comment id="D3D12_ROOT_DESCRIPTOR1::RegisterSpace">
    <summary>The register space.</summary>
  </comment>
  <comment id="D3D12_ROOT_DESCRIPTOR1::Flags">
    <summary>Specifies the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_root_descriptor_flags">D3D12_ROOT_DESCRIPTOR_FLAGS</a> that determine the volatility of descriptors and the data they reference.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_SHADER_MODEL">
    <summary>
      <para>Contains the supported shader model.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_feature_data_shader_model" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_SHADER_MODEL::HighestShaderModel">
    <summary>Specifies one member of  <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d_shader_model">D3D_SHADER_MODEL</a> that indicates the maximum supported shader model.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_HEAP_TIER">
    <summary>
      <para>Specifies which resource heap tier the hardware and driver support.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_resource_heap_tier" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RESOURCE_HEAP_TIER::D3D12_RESOURCE_HEAP_TIER_1">
    <summary>Indicates that heaps can only support resources from a single resource category.
            For the list of resource categories, see Remarks.
            In tier 1, these resource categories are mutually exclusive and cannot be used with the same heap.
            The resource category must be declared when creating a heap, using the correct <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_heap_flags">D3D12_HEAP_FLAGS</a> enumeration constant.
            Applications cannot create heaps with flags that allow all three categories.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_HEAP_TIER::D3D12_RESOURCE_HEAP_TIER_2">
    <summary>Indicates that heaps can support resources from all three categories.
            For the list of resource categories, see Remarks.
            In tier 2, these resource categories can be mixed within the same heap.
            Applications may create heaps with flags that allow all three categories; but are not required to do so.
            Applications may be written to support tier 1 and seamlessly run on tier 2.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList1::AtomicCopyBufferUINT">
    <summary>
      <para>Atomically copies a primary data element of type UINT from one resource to another, along with optional dependent resources.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist1-atomiccopybufferuint" /></para>
      <param name="pDstBuffer"><a href="https://docs.microsoft.com/visualstudio/code-quality/annotating-function-parameters-and-return-values?view=vs-2015">SAL</a>: <c>_In_</c>

The resource that the UINT primary data element is copied into.</param>
      <param name="DstOffset">An offset into the destination resource buffer that specifies where the primary data element is copied into, in bytes. This offset combined with the base address of the resource buffer must result in a memory address that's naturally aligned for UINT values.</param>
      <param name="pSrcBuffer"><a href="https://docs.microsoft.com/visualstudio/code-quality/annotating-function-parameters-and-return-values?view=vs-2015">SAL</a>: <c>_In_</c>

The resource that the UINT primary data element is copied from. This data is typically an address, index, or other handle that shader code can use to locate the most-recent version of latency-sensitive information.</param>
      <param name="SrcOffset">An offset into the source resource buffer that specifies where the primary data element is copied from, in bytes. This offset combined with the base address of the resource buffer must result in a memory address that's naturally aligned for UINT values.</param>
      <param name="Dependencies">The number of dependent resources.</param>
      <param name="ppDependentResources"><a href="https://docs.microsoft.com/visualstudio/code-quality/annotating-function-parameters-and-return-values?view=vs-2015">SAL</a>: <c>_In_reads_(Dependencies)</c>

An array of resources that contain the dependent elements of the data payload.</param>
      <param name="pDependentSubresourceRanges"><a href="https://docs.microsoft.com/visualstudio/code-quality/annotating-function-parameters-and-return-values?view=vs-2015">SAL</a>: <c>_In_reads_(Dependencies)</c>

An array of subresource ranges that specify the dependent elements of the data payload. These elements are completely updated before the primary data element is itself atomically copied. This ensures that the entire operation is logically atomic; that is, the primary data element never refers to an incomplete data payload.</param>
    </summary>
  </comment>
  <comment id="D3D12_PROTECTED_RESOURCE_SESSION_DESC">
    <summary>
      <para>Describes flags for a protected resource session, per adapter.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_protected_resource_session_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_PROTECTED_RESOURCE_SESSION_DESC::NodeMask">
    <summary>The node mask. For single GPU operation, set this to zero. If there are multiple GPU nodes, then set a bit to identify the node (the device's physical adapter) to which the protected session applies. Each bit in the mask corresponds to a single node. Only 1 bit may be set.</summary>
  </comment>
  <comment id="D3D12_PROTECTED_RESOURCE_SESSION_DESC::Flags">
    <summary>Specifies the supported crypto sessions options.</summary>
  </comment>
  <comment id="D3D12_CLEAR_VALUE">
    <summary>
      <para>Describes a value used to optimize clear operations for a particular resource.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_clear_value" /></para>
    </summary>
  </comment>
  <comment id="D3D12_CLEAR_VALUE::Format">
    <summary>Specifies one member of the <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a> enum.

The format of the commonly cleared color follows the same validation rules as a view/ descriptor creation. In general, the format of the clear color can be any format in the same typeless group that the resource format belongs to.

This <i>Format</i> must match the format of the view used during the clear operation. It indicates whether the <i>Color</i> or the <i>DepthStencil</i> member is valid and how to convert the values for usage with the resource.</summary>
  </comment>
  <comment id="D3D12_CLEAR_VALUE::Color">
    <summary>Specifies a 4-entry array of float values, determining the RGBA value. The order of RGBA matches the order used with <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12graphicscommandlist-clearrendertargetview">ClearRenderTargetView</a>.</summary>
  </comment>
  <comment id="D3D12_CLEAR_VALUE::DepthStencil">
    <summary>Specifies one member of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_depth_stencil_value">D3D12_DEPTH_STENCIL_VALUE</a>. These values match the semantics of <i>Depth</i> and <i>Stencil</i> in <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12graphicscommandlist-cleardepthstencilview">ClearDepthStencilView</a>.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList4::EndRenderPass">
    <summary>
      <para>Marks the ending of a render pass.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist4-endrenderpass" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TEXTURE_LAYOUT">
    <summary>
      <para>Specifies texture layout options.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_texture_layout" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TEXTURE_LAYOUT::D3D12_TEXTURE_LAYOUT_UNKNOWN">
    <summary>Indicates that the layout is unknown, and is likely adapter-dependent.
              During creation, the driver chooses the most efficient layout based on other resource properties, especially resource size and flags.
              Prefer this choice unless certain functionality is required from another texture layout.
            

Zero-copy texture upload optimizations exist for UMA architectures; see <a href="https://docs.microsoft.com/windows/win32/api/d3d12/nf-d3d12-id3d12resource-writetosubresource">ID3D12Resource::WriteToSubresource</a>.</summary>
  </comment>
  <comment id="D3D12_TEXTURE_LAYOUT::D3D12_TEXTURE_LAYOUT_ROW_MAJOR">
    <summary>Indicates that data for the texture is stored in row-major order (sometimes called "pitch-linear order").
            

This texture layout locates consecutive texels of a row contiguously in memory, before the texels of the next row.
              Similarly, consecutive texels of a particular depth or array slice are contiguous in memory before the texels of the next depth or array slice.
              Padding may exist between rows and between depth or array slices to align collections of data.
              A stride is the distance in memory between rows, depth, or array slices; and it includes any padding.
            

This texture layout enables sharing of the texture data between multiple adapters, when other layouts aren't available.
            

Many restrictions apply, because this layout is generally not efficient for extensive usage:
            

<ul>
<li>The locality of nearby texels is not rotationally invariant.
              </li>
<li>Only the following texture properties are supported:
                <ul>
<li>
<a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_resource_dimension">D3D12_RESOURCE_DIMENSION</a>_TEXTURE_2D.
                  </li>
<li>A single mip level.
                  </li>
<li>A single array slice.
                  </li>
<li>64KB alignment.
                  </li>
<li>Non-MSAA.
                  </li>
<li>No <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_resource_flags">D3D12_RESOURCE_FLAG</a>_ALLOW_DEPTH_STENCIL.
                  </li>
<li>The format cannot be a YUV format.
                  </li>
</ul>
</li>
<li>The texture must be created on a heap with <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_heap_flags">D3D12_HEAP_FLAG</a>_SHARED_CROSS_ADAPTER.
              </li>
</ul>
Buffers are created with <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_texture_layout">D3D12_TEXTURE_LAYOUT</a>_ROW_MAJOR, because row-major texture data can be located in them without creating a texture object.
              This is commonly used for uploading or reading back texture data, especially for discrete/NUMA adapters.
              However, <b>D3D12_TEXTURE_LAYOUT</b>_ROW_MAJOR can also be used when marshaling texture data between GPUs or adapters.
              For examples of usage with <a href="https://docs.microsoft.com/windows/win32/api/d3d12/nf-d3d12-id3d12graphicscommandlist-copytextureregion">ID3D12GraphicsCommandList::CopyTextureRegion</a>, see some of the following topics:
            

<ul>
<li>
<a href="https://docs.microsoft.com/windows/win32/direct3d12/default-texture-mapping">Default Texture Mapping and Standard Swizzle</a>
</li>
<li>
<a href="https://docs.microsoft.com/windows/win32/direct3d12/predication">Predication</a>
</li>
<li>
<a href="https://docs.microsoft.com/windows/win32/direct3d12/user-mode-heap-synchronization">Multi-engine synchronization</a>
</li>
<li>
<a href="https://docs.microsoft.com/windows/win32/direct3d12/upload-and-readback-of-texture-data">Uploading Texture Data</a>
</li>
</ul></summary>
  </comment>
  <comment id="D3D12_TEXTURE_LAYOUT::D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE">
    <summary>Indicates that the layout within 64KB tiles and tail mip packing is up to the driver.
              No standard swizzle pattern.
            

This texture layout is arranged into contiguous 64KB regions, also known as tiles, containing near equilateral amount of consecutive number of texels along each dimension.
              Tiles are arranged in row-major order.
              While there is no padding between tiles, there are typically unused texels within the last tile in each dimension.
              The layout of texels within the tile is undefined.
              Each subresource immediately follows where the previous subresource end, and the subresource order follows the same sequence as subresource ordinals.
              However, tail mip packing is adapter-specific.
              For more details, see tiled resource tier and <a href="https://docs.microsoft.com/windows/win32/api/d3d12/nf-d3d12-id3d12device-getresourcetiling">ID3D12Device::GetResourceTiling</a>.
            

This texture layout enables partially resident or sparse texture scenarios when used together with virtual memory page mapping functionality.
              This texture layout must be used together with <a href="https://docs.microsoft.com/windows/win32/api/d3d12/nf-d3d12-id3d12device-createreservedresource">ID3D12Device::CreateReservedResource</a>to enable the usage of <a href="https://docs.microsoft.com/windows/win32/api/d3d12/nf-d3d12-id3d12commandqueue-updatetilemappings">ID3D12CommandQueue::UpdateTileMappings</a>.
            

Some restrictions apply to textures with this layout:
            

<ul>
<li>The adapter must support <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_tiled_resources_tier">D3D12_TILED_RESOURCES_TIER</a> 1 or greater.
              </li>
<li>64KB alignment must be used.
              </li>
<li>
<a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_resource_dimension">D3D12_RESOURCE_DIMENSION</a>_TEXTURE1D is not supported, nor are all formats.
              </li>
<li>The tiled resource tier indicates whether textures with <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_resource_dimension">D3D12_RESOURCE_DIMENSION</a>_TEXTURE3D is supported.
              </li>
</ul></summary>
  </comment>
  <comment id="D3D12_TEXTURE_LAYOUT::D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE">
    <summary>Indicates that a default texture uses the standardized swizzle pattern.
            

This texture layout is arranged the same way that D3D12_TEXTURE_LAYOUT_64KB_UNDEFINED_SWIZZLE is, except that the layout of texels within the tile is defined.
              Tail mip packing is adapter-specific.
            

This texture layout enables optimizations when marshaling data between multiple adapters or between the CPU and GPU.
              The amount of copying can be reduced when multiple components understand the texture memory layout.
              This layout is generally more efficient for extensive usage than row-major layout, due to the rotationally invariant locality of neighboring texels.
              This layout can typically only be used with adapters that support standard swizzle, but exceptions exist for cross-adapter shared heaps.
            

The restrictions for this layout are that the following aren't supported:
            

<ul>
<li>
<a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_resource_dimension">D3D12_RESOURCE_DIMENSION</a>_TEXTURE1D
              </li>
<li>Multi-sample anti-aliasing (MSAA)
              </li>
<li>
<a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_resource_flags">D3D12_RESOURCE_FLAG</a>_ALLOW_DEPTH_STENCIL
              </li>
<li>Formats within the <a href="https://docs.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>_R32G32B32_TYPELESS group
              </li>
</ul></summary>
  </comment>
  <comment id="D3D12GetDebugInterface">
    <summary>
      <para>Gets a debug interface.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12getdebuginterface" /></para>
      <param name="riid">The globally unique identifier (<b>GUID</b>) for the debug interface.
            The <b>REFIID</b>, or <b>GUID</b>, of the debug interface can be obtained by using the __uuidof() macro.
            For example, __uuidof(<a href="https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/nn-d3d12sdklayers-id3d12debug">ID3D12Debug</a>) will get the <b>GUID</b> of the debug interface.</param>
      <param name="ppvDebug">The debug interface, as a pointer to pointer to void.
            See
            <a href="https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/nn-d3d12sdklayers-id3d12debug">ID3D12Debug</a>and
            <a href="https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/nn-d3d12sdklayers-id3d12debugdevice">ID3D12DebugDevice</a>.</param>
    </summary>
  </comment>
  <comment id="ID3D12ShaderReflection::GetThreadGroupSize">
    <summary>
      <para>Retrieves the sizes, in units of threads, of the X, Y, and Z dimensions of the shader's thread-group grid.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getthreadgroupsize" /></para>
      <param name="pSizeX">A pointer to the size, in threads, of the x-dimension of the thread-group grid. The maximum size is 1024.</param>
      <param name="pSizeY">A pointer to the size, in threads, of the y-dimension of the thread-group grid. The maximum size is 1024.</param>
      <param name="pSizeZ">A pointer to the size, in threads, of the z-dimension of the thread-group grid. The maximum size is 64.</param>
    </summary>
  </comment>
  <comment id="D3D12_RESOURCE_TRANSITION_BARRIER">
    <summary>
      <para>Describes the transition of subresources between different usages.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_resource_transition_barrier" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RESOURCE_TRANSITION_BARRIER::pResource">
    <summary>A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a> object that represents the resource used in the transition.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_TRANSITION_BARRIER::Subresource">
    <summary>The index of the subresource for the transition.
            Use the <b>D3D12_RESOURCE_BARRIER_ALL_SUBRESOURCES</b> flag ( 0xffffffff ) to transition all subresources in a resource at the same time.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_TRANSITION_BARRIER::StateBefore">
    <summary>The "before" usages of the subresources, as a bitwise-OR'd combination of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_states">D3D12_RESOURCE_STATES</a> enumeration constants.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_TRANSITION_BARRIER::StateAfter">
    <summary>The "after" usages of the subresources, as a bitwise-OR'd combination of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_states">D3D12_RESOURCE_STATES</a> enumeration constants.</summary>
  </comment>
  <comment id="ID3D12DebugCommandList">
    <summary>
      <para>Provides methods to monitor and debug a command list.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nn-d3d12sdklayers-id3d12debugcommandlist" /></para>
    </summary>
  </comment>
  <comment id="ID3D12VideoDecodeCommandList2">
    <summary>
      <para>Adds support for video extension commands.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/nn-d3d12video-id3d12videodecodecommandlist2" /></para>
    </summary>
  </comment>
  <comment id="D3D12_GPU_DESCRIPTOR_HANDLE">
    <summary>
      <para>Describes a GPU descriptor handle.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_gpu_descriptor_handle" /></para>
    </summary>
  </comment>
  <comment id="D3D12_GPU_DESCRIPTOR_HANDLE::ptr">
    <summary>The address of the descriptor.</summary>
  </comment>
  <comment id="ID3D12Device::GetDeviceRemovedReason">
    <summary>
      <para>Gets the reason that the device was removed.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-getdeviceremovedreason" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_TRANSFORM">
    <summary>
      <para>Specifies transform parameters for video processing.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_video_process_transform" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_TRANSFORM::SourceRectangle">
    <summary>Specifies the source rectangle of the transform. This is the portion of the input surface that is blitted to the destination surface. The source rectangle is given in pixel coordinates, relative to the input surface.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_TRANSFORM::DestinationRectangle">
    <summary>Specifies the destination rectangle of the transform. This is the portion of the output surface that receives the blit for this stream. The destination rectangle is given in pixel coordinates, relative to the output surface.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_TRANSFORM::Orientation">
    <summary>The rotation and flip operation to apply to the source.  Source and Destination rectangles are specified in post orientation coordinates.</summary>
  </comment>
  <comment id="ID3D12FunctionReflection::GetResourceBindingDescByName">
    <summary>
      <para>Gets a description of how a resource is bound to a function.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12functionreflection-getresourcebindingdescbyname" /></para>
      <param name="Name">The constant-buffer name of the resource.</param>
      <param name="pDesc">A pointer to a <a href="https://docs.microsoft.com/windows/win32/api/d3d12shader/ns-d3d12shader-d3d12_shader_input_bind_desc">D3D12_SHADER_INPUT_BIND_DESC</a> structure that describes input binding of the resource.</param>
    </summary>
  </comment>
  <comment id="ID3D12Device2">
    <summary>
      <para>Represents a virtual adapter. This interface extends ID3D12Device1 to create pipeline state objects from pipeline state stream descriptions.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12device2" /></para>
    </summary>
  </comment>
  <comment id="ID3D12VideoProcessCommandList2">
    <summary>
      <para>Adds support for video extension commands.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/nn-d3d12video-id3d12videoprocesscommandlist2" /></para>
    </summary>
  </comment>
  <comment id="ID3D12ShaderReflectionVariable::GetType">
    <summary>
      <para>Gets a shader-variable type.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflectionvariable-gettype" /></para>
    </summary>
  </comment>
  <comment id="D3D12_STATE_SUBOBJECT">
    <summary>
      <para>Represents a subobject within a state object description. Use with <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_state_object_desc">D3D12_STATE_OBJECT_DESC</a>.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_state_subobject" /></para>
    </summary>
  </comment>
  <comment id="D3D12_STATE_SUBOBJECT::Type">
    <summary>A <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_state_subobject_type">D3D12_STATE_SUBOBJECT_TYPE</a> specifying the type of the state subobject.</summary>
  </comment>
  <comment id="D3D12_STATE_SUBOBJECT::pDesc">
    <summary>Pointer to state object description of the type specified in the <i>Type</i> parameter.</summary>
  </comment>
  <comment id="D3D12_TEX2DMS_DSV">
    <summary>
      <para>Describes the subresource from a multi sampled 2D texture that is accessible to a depth-stencil view.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_tex2dms_dsv" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TEX2DMS_DSV::UnusedField_NothingToDefine">
    <summary>Unused.</summary>
  </comment>
  <comment id="ID3D12InfoQueue::GetBreakOnCategory">
    <summary>
      <para>Get a message category to break on when a message with that category passes through the storage filter.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getbreakoncategory" /></para>
      <param name="Category">Message category to break on.</param>
    </summary>
  </comment>
  <comment id="D3D12_SIGNATURE_PARAMETER_DESC">
    <summary>
      <para>Describes a shader signature.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/ns-d3d12shader-d3d12_signature_parameter_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_SIGNATURE_PARAMETER_DESC::SemanticName">
    <summary>A per-parameter string that identifies how the data will be used. For more info, see <a href="https://docs.microsoft.com/windows/desktop/direct3dhlsl/dx-graphics-hlsl-semantics">Semantics</a>.</summary>
  </comment>
  <comment id="D3D12_SIGNATURE_PARAMETER_DESC::SemanticIndex">
    <summary>Semantic index that modifies the semantic. Used to differentiate different parameters that use the same semantic.</summary>
  </comment>
  <comment id="D3D12_SIGNATURE_PARAMETER_DESC::Register">
    <summary>The register that will contain this variable's data.</summary>
  </comment>
  <comment id="D3D12_SIGNATURE_PARAMETER_DESC::SystemValueType">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_name">D3D_NAME</a>-typed value that identifies a predefined string that determines the functionality of certain pipeline stages.</summary>
  </comment>
  <comment id="D3D12_SIGNATURE_PARAMETER_DESC::ComponentType">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_register_component_type">D3D_REGISTER_COMPONENT_TYPE</a>-typed value that identifies the per-component-data type that is stored in a register.  Each register can store up to four-components of data.</summary>
  </comment>
  <comment id="D3D12_SIGNATURE_PARAMETER_DESC::Mask">
    <summary>Mask which indicates which components of a register are used.</summary>
  </comment>
  <comment id="D3D12_SIGNATURE_PARAMETER_DESC::ReadWriteMask">
    <summary>Mask which indicates whether a given component is never written (if the signature is an output signature) or always read (if the signature is an input signature).</summary>
  </comment>
  <comment id="D3D12_SIGNATURE_PARAMETER_DESC::Stream">
    <summary>Indicates which stream the geometry shader is using for the signature parameter.</summary>
  </comment>
  <comment id="D3D12_SIGNATURE_PARAMETER_DESC::MinPrecision">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_min_precision">D3D_MIN_PRECISION</a>-typed value that indicates the minimum desired interpolation precision. For more info, see <a href="https://docs.microsoft.com/windows/desktop/direct3dhlsl/using-hlsl-minimum-precision">Using HLSL minimum precision</a>.</summary>
  </comment>
  <comment id="ID3D12Device5">
    <summary>
      <para>Represents a virtual adapter. This interface extends <a href="https://docs.microsoft.com../d3d12/nn-d3d12-id3d12device4.md">ID3D12Device4</a>.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12device5" /></para>
    </summary>
  </comment>
  <comment id="ID3D12Device::GetCustomHeapProperties">
    <summary>
      <para>Divulges the equivalent custom heap properties that are used for non-custom heap types, based on the adapter's architectural properties.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-getcustomheapproperties" /></para>
      <param name="nodeMask">For single-GPU operation, set this to zero.
          If there are multiple GPU nodes, set a bit to identify the node (the  device's physical adapter).
          Each bit in the mask corresponds to a single node.
          Only 1 bit must be set.
          See <a href="https://docs.microsoft.com/windows/win32/direct3d12/multi-engine">Multi-adapter systems</a>.</param>
      <param name="heapType">A <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_heap_type">D3D12_HEAP_TYPE</a>-typed value that specifies the heap to get properties for.
          D3D12_HEAP_TYPE_CUSTOM is not supported as a parameter value.</param>
    </summary>
  </comment>
  <comment id="D3D12_FILTER">
    <summary>
      <para>Specifies filtering options during texture sampling.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_filter" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FILTER::D3D12_FILTER_MIN_MAG_MIP_POINT">
    <summary>Use point sampling for minification, magnification, and mip-level sampling.</summary>
  </comment>
  <comment id="D3D12_FILTER::D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR">
    <summary>Use point sampling for minification and magnification; use linear interpolation for mip-level sampling.</summary>
  </comment>
  <comment id="D3D12_FILTER::D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT">
    <summary>Use point sampling for minification; use linear interpolation for magnification; use point sampling for mip-level sampling.</summary>
  </comment>
  <comment id="D3D12_FILTER::D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR">
    <summary>Use point sampling for minification; use linear interpolation for magnification and mip-level sampling.</summary>
  </comment>
  <comment id="D3D12_FILTER::D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT">
    <summary>Use linear interpolation for minification; use point sampling for magnification and mip-level sampling.</summary>
  </comment>
  <comment id="D3D12_FILTER::D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR">
    <summary>Use linear interpolation for minification; use point sampling for magnification; use linear interpolation for mip-level sampling.</summary>
  </comment>
  <comment id="D3D12_FILTER::D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT">
    <summary>Use linear interpolation for minification and magnification; use point sampling for mip-level sampling.</summary>
  </comment>
  <comment id="D3D12_FILTER::D3D12_FILTER_MIN_MAG_MIP_LINEAR">
    <summary>Use linear interpolation for minification, magnification, and mip-level sampling.</summary>
  </comment>
  <comment id="D3D12_FILTER::D3D12_FILTER_ANISOTROPIC">
    <summary>Use anisotropic interpolation for minification, magnification, and mip-level sampling.</summary>
  </comment>
  <comment id="D3D12_FILTER::D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT">
    <summary>Use point sampling for minification, magnification, and mip-level sampling. Compare the result to the comparison value.</summary>
  </comment>
  <comment id="D3D12_FILTER::D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR">
    <summary>Use point sampling for minification and magnification; use linear interpolation for mip-level sampling. Compare the result to the comparison value.</summary>
  </comment>
  <comment id="D3D12_FILTER::D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT">
    <summary>Use point sampling for minification; use linear interpolation for magnification; use point sampling for mip-level sampling. Compare the result to the comparison value.</summary>
  </comment>
  <comment id="D3D12_FILTER::D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR">
    <summary>Use point sampling for minification; use linear interpolation for magnification and mip-level sampling. Compare the result to the comparison value.</summary>
  </comment>
  <comment id="D3D12_FILTER::D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT">
    <summary>Use linear interpolation for minification; use point sampling for magnification and mip-level sampling. Compare the result to the comparison value.</summary>
  </comment>
  <comment id="D3D12_FILTER::D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR">
    <summary>Use linear interpolation for minification; use point sampling for magnification; use linear interpolation for mip-level sampling. Compare the result to the comparison value.</summary>
  </comment>
  <comment id="D3D12_FILTER::D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT">
    <summary>Use linear interpolation for minification and magnification; use point sampling for mip-level sampling. Compare the result to the comparison value.</summary>
  </comment>
  <comment id="D3D12_FILTER::D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR">
    <summary>Use linear interpolation for minification, magnification, and mip-level sampling. Compare the result to the comparison value.</summary>
  </comment>
  <comment id="D3D12_FILTER::D3D12_FILTER_COMPARISON_ANISOTROPIC">
    <summary>Use anisotropic interpolation for minification, magnification, and mip-level sampling. Compare the result to the comparison value.</summary>
  </comment>
  <comment id="D3D12_FILTER::D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT">
    <summary>Fetch the same set of texels as <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_filter">D3D12_FILTER_MIN_MAG_MIP_POINT</a> and instead of filtering them return the minimum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the minimum.  You can query support for this filter type from the <b>MinMaxFiltering</b> member in the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options1">D3D11_FEATURE_DATA_D3D11_OPTIONS1</a> structure.</summary>
  </comment>
  <comment id="D3D12_FILTER::D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR">
    <summary>Fetch the same set of texels as <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_filter">D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR</a> and instead of filtering them return the minimum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the minimum.  You can query support for this filter type from the <b>MinMaxFiltering</b> member in the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options1">D3D11_FEATURE_DATA_D3D11_OPTIONS1</a> structure.</summary>
  </comment>
  <comment id="D3D12_FILTER::D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT">
    <summary>Fetch the same set of texels as <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_filter">D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT</a> and instead of filtering them return the minimum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the minimum.  You can query support for this filter type from the <b>MinMaxFiltering</b> member in the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options1">D3D11_FEATURE_DATA_D3D11_OPTIONS1</a> structure.</summary>
  </comment>
  <comment id="D3D12_FILTER::D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR">
    <summary>Fetch the same set of texels as <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_filter">D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR</a> and instead of filtering them return the minimum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the minimum.  You can query support for this filter type from the <b>MinMaxFiltering</b> member in the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options1">D3D11_FEATURE_DATA_D3D11_OPTIONS1</a> structure.</summary>
  </comment>
  <comment id="D3D12_FILTER::D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT">
    <summary>Fetch the same set of texels as <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_filter">D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT</a> and instead of filtering them return the minimum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the minimum.  You can query support for this filter type from the <b>MinMaxFiltering</b> member in the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options1">D3D11_FEATURE_DATA_D3D11_OPTIONS1</a> structure.</summary>
  </comment>
  <comment id="D3D12_FILTER::D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR">
    <summary>Fetch the same set of texels as <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_filter">D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR</a> and instead of filtering them return the minimum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the minimum.  You can query support for this filter type from the <b>MinMaxFiltering</b> member in the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options1">D3D11_FEATURE_DATA_D3D11_OPTIONS1</a> structure.</summary>
  </comment>
  <comment id="D3D12_FILTER::D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT">
    <summary>Fetch the same set of texels as <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_filter">D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT</a> and instead of filtering them return the minimum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the minimum.  You can query support for this filter type from the <b>MinMaxFiltering</b> member in the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options1">D3D11_FEATURE_DATA_D3D11_OPTIONS1</a> structure.</summary>
  </comment>
  <comment id="D3D12_FILTER::D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR">
    <summary>Fetch the same set of texels as <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_filter">D3D12_FILTER_MIN_MAG_MIP_LINEAR</a> and instead of filtering them return the minimum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the minimum.  You can query support for this filter type from the <b>MinMaxFiltering</b> member in the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options1">D3D11_FEATURE_DATA_D3D11_OPTIONS1</a> structure.</summary>
  </comment>
  <comment id="D3D12_FILTER::D3D12_FILTER_MINIMUM_ANISOTROPIC">
    <summary>Fetch the same set of texels as <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_filter">D3D12_FILTER_ANISOTROPIC</a> and instead of filtering them return the minimum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the minimum.  You can query support for this filter type from the <b>MinMaxFiltering</b> member in the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options1">D3D11_FEATURE_DATA_D3D11_OPTIONS1</a> structure.</summary>
  </comment>
  <comment id="D3D12_FILTER::D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT">
    <summary>Fetch the same set of texels as <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_filter">D3D12_FILTER_MIN_MAG_MIP_POINT</a> and instead of filtering them return the maximum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the maximum.  You can query support for this filter type from the <b>MinMaxFiltering</b> member in the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options1">D3D11_FEATURE_DATA_D3D11_OPTIONS1</a> structure.</summary>
  </comment>
  <comment id="D3D12_FILTER::D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR">
    <summary>Fetch the same set of texels as <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_filter">D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR</a> and instead of filtering them return the maximum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the maximum.  You can query support for this filter type from the <b>MinMaxFiltering</b> member in the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options1">D3D11_FEATURE_DATA_D3D11_OPTIONS1</a> structure.</summary>
  </comment>
  <comment id="D3D12_FILTER::D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT">
    <summary>Fetch the same set of texels as <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_filter">D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT</a> and instead of filtering them return the maximum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the maximum.  You can query support for this filter type from the <b>MinMaxFiltering</b> member in the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options1">D3D11_FEATURE_DATA_D3D11_OPTIONS1</a> structure.</summary>
  </comment>
  <comment id="D3D12_FILTER::D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR">
    <summary>Fetch the same set of texels as <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_filter">D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR</a> and instead of filtering them return the maximum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the maximum.  You can query support for this filter type from the <b>MinMaxFiltering</b> member in the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options1">D3D11_FEATURE_DATA_D3D11_OPTIONS1</a> structure.</summary>
  </comment>
  <comment id="D3D12_FILTER::D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT">
    <summary>Fetch the same set of texels as <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_filter">D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT</a> and instead of filtering them return the maximum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the maximum.  You can query support for this filter type from the <b>MinMaxFiltering</b> member in the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options1">D3D11_FEATURE_DATA_D3D11_OPTIONS1</a> structure.</summary>
  </comment>
  <comment id="D3D12_FILTER::D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR">
    <summary>Fetch the same set of texels as <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_filter">D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR</a> and instead of filtering them return the maximum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the maximum.  You can query support for this filter type from the <b>MinMaxFiltering</b> member in the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options1">D3D11_FEATURE_DATA_D3D11_OPTIONS1</a> structure.</summary>
  </comment>
  <comment id="D3D12_FILTER::D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT">
    <summary>Fetch the same set of texels as <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_filter">D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT</a> and instead of filtering them return the maximum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the maximum.  You can query support for this filter type from the <b>MinMaxFiltering</b> member in the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options1">D3D11_FEATURE_DATA_D3D11_OPTIONS1</a> structure.</summary>
  </comment>
  <comment id="D3D12_FILTER::D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR">
    <summary>Fetch the same set of texels as <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_filter">D3D12_FILTER_MIN_MAG_MIP_LINEAR</a> and instead of filtering them return the maximum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the maximum.  You can query support for this filter type from the <b>MinMaxFiltering</b> member in the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options1">D3D11_FEATURE_DATA_D3D11_OPTIONS1</a> structure.</summary>
  </comment>
  <comment id="D3D12_FILTER::D3D12_FILTER_MAXIMUM_ANISOTROPIC">
    <summary>Fetch the same set of texels as <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_filter">D3D12_FILTER_ANISOTROPIC</a> and instead of filtering them return the maximum of the texels.  Texels that are weighted 0 during filtering aren't counted towards the maximum.  You can query support for this filter type from the <b>MinMaxFiltering</b> member in the <a href="https://docs.microsoft.com/windows/desktop/api/d3d11/ns-d3d11-d3d11_feature_data_d3d11_options1">D3D11_FEATURE_DATA_D3D11_OPTIONS1</a> structure.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::OMSetStencilRef">
    <summary>
      <para>Sets the reference value for depth stencil tests.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-omsetstencilref" /></para>
      <param name="StencilRef">Reference value to perform against when doing a depth-stencil test.</param>
    </summary>
  </comment>
  <comment id="D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS">
    <summary>
      <para>Specifies options for determining quality levels.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_multisample_quality_level_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS::D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_NONE">
    <summary>No options are supported.</summary>
  </comment>
  <comment id="D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS::D3D12_MULTISAMPLE_QUALITY_LEVELS_FLAG_TILED_RESOURCE">
    <summary>The number of quality levels can be determined for tiled resources.</summary>
  </comment>
  <comment id="ID3D12Object::SetName">
    <summary>
      <para>Associates a name with the device object. This name is for use in debug diagnostics and tools.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12object-setname" /></para>
      <param name="Name">A <b>NULL</b>-terminated <b>UNICODE</b> string that contains the name to associate with the device object.</param>
    </summary>
  </comment>
  <comment id="ID3D12DescriptorHeap::GetGPUDescriptorHandleForHeapStart">
    <summary>
      <para>Gets the GPU descriptor handle that represents the start of the heap.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12descriptorheap-getgpudescriptorhandleforheapstart" /></para>
    </summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::ResolveSubresource">
    <summary>
      <para>Copy a multi-sampled resource into a non-multi-sampled resource.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-resolvesubresource" /></para>
      <param name="pDstResource">Destination resource. Must be a created on a <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_heap_type">D3D12_HEAP_TYPE_DEFAULT</a> heap and be single-sampled. See <a href="https://docs.microsoft.com/windows/win32/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a>.</param>
      <param name="DstSubresource">A zero-based index, that identifies the destination subresource. Use <a href="https://docs.microsoft.com/windows/win32/direct3d12/d3d12calcsubresource">D3D12CalcSubresource</a> to calculate the subresource index if the parent resource is complex.</param>
      <param name="pSrcResource">Source resource. Must be multisampled.</param>
      <param name="SrcSubresource">The source subresource of the source resource.</param>
      <param name="Format">A <a href="https://docs.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a> that indicates how the multisampled resource will be resolved to a single-sampled resource. See remarks.</param>
    </summary>
  </comment>
  <comment id="D3D12_WRITEBUFFERIMMEDIATE_PARAMETER">
    <summary>
      <para>Specifies the immediate value and destination address written using ID3D12CommandList2::WriteBufferImmediate.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_writebufferimmediate_parameter" /></para>
    </summary>
  </comment>
  <comment id="D3D12_WRITEBUFFERIMMEDIATE_PARAMETER::Dest">
    <summary>The GPU virtual address at which to write the value. The address must be aligned to a 32-bit (4-byte) boundary.</summary>
  </comment>
  <comment id="D3D12_WRITEBUFFERIMMEDIATE_PARAMETER::Value">
    <summary>The 32-bit value to write.</summary>
  </comment>
  <comment id="D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE">
    <summary>
      <para>Represents a GPU virtual address range and stride.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_gpu_virtual_address_range_and_stride" /></para>
    </summary>
  </comment>
  <comment id="D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE::StartAddress">
    <summary>The beginning of the virtual address range.</summary>
  </comment>
  <comment id="D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE::SizeInBytes">
    <summary>The size of the virtual address range, in bytes.</summary>
  </comment>
  <comment id="D3D12_GPU_VIRTUAL_ADDRESS_RANGE_AND_STRIDE::StrideInBytes">
    <summary>Defines the record-indexing stride within the memory range.</summary>
  </comment>
  <comment id="D3D12_DRED_ALLOCATION_TYPE">
    <summary>
      <para>Congruent with, and numerically equivalent to, 3D12DDI_HANDLETYPE enumeration values.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_dred_allocation_type" /></para>
    </summary>
  </comment>
  <comment id="ID3D12DebugDevice::SetFeatureMask">
    <summary>
      <para>Set a bit field of flags that will turn debug features on and off.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12debugdevice-setfeaturemask" /></para>
      <param name="Mask">Feature-mask flags, as a bitwise-OR'd combination of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ne-d3d12sdklayers-d3d12_debug_feature">D3D12_DEBUG_FEATURE</a> enumeration constants.
            If a flag is present, that feature will be set to on; otherwise, the feature will be set to off.</param>
    </summary>
  </comment>
  <comment id="D3D12_COLOR_WRITE_ENABLE">
    <summary>
      <para>Identifies which components of each pixel of a render target are writable during blending.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_color_write_enable" /></para>
    </summary>
  </comment>
  <comment id="D3D12_COLOR_WRITE_ENABLE::D3D12_COLOR_WRITE_ENABLE_RED">
    <summary>Allow data to be stored in the red component.</summary>
  </comment>
  <comment id="D3D12_COLOR_WRITE_ENABLE::D3D12_COLOR_WRITE_ENABLE_GREEN">
    <summary>Allow data to be stored in the green component.</summary>
  </comment>
  <comment id="D3D12_COLOR_WRITE_ENABLE::D3D12_COLOR_WRITE_ENABLE_BLUE">
    <summary>Allow data to be stored in the blue component.</summary>
  </comment>
  <comment id="D3D12_COLOR_WRITE_ENABLE::D3D12_COLOR_WRITE_ENABLE_ALPHA">
    <summary>Allow data to be stored in the alpha component.</summary>
  </comment>
  <comment id="D3D12_COLOR_WRITE_ENABLE::D3D12_COLOR_WRITE_ENABLE_ALL">
    <summary>Allow data to be stored in all components.</summary>
  </comment>
  <comment id="ID3D12InfoQueue::GetMessage">
    <summary>
      <para>Get a message from the message queue.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getmessage" /></para>
      <param name="MessageIndex">Index into message queue after an optional retrieval filter has been applied. This can be between 0 and the number of messages in the message queue that pass through the retrieval filter (which can be obtained with <a href="https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getnumstoredmessagesallowedbyretrievalfilter">GetNumStoredMessagesAllowedByRetrievalFilter</a>). 0 is the message at the front of the message queue.</param>
      <param name="pMessage">Returned message.</param>
      <param name="pMessageByteLength">Size of <i>pMessage</i> in bytes.</param>
    </summary>
  </comment>
  <comment id="D3D12_BUFFER_SRV_FLAGS">
    <summary>
      <para>Identifies how to view a buffer resource.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_buffer_srv_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_BUFFER_SRV_FLAGS::D3D12_BUFFER_SRV_FLAG_NONE">
    <summary>Indicates a default view.</summary>
  </comment>
  <comment id="D3D12_BUFFER_SRV_FLAGS::D3D12_BUFFER_SRV_FLAG_RAW">
    <summary>View the buffer as raw. For more info about raw viewing of buffers, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-resources-intro">Raw Views of Buffers</a>.</summary>
  </comment>
  <comment id="ID3D12Object::SetPrivateDataInterface">
    <summary>
      <para>Associates an IUnknown-derived interface with the device object and associates that interface with an application-defined GUID.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12object-setprivatedatainterface" /></para>
      <param name="guid">The <b>GUID</b> to associate with the interface.</param>
      <param name="pData">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/unknwn/nn-unknwn-iunknown">IUnknown</a>-derived interface to be associated with the device object.</param>
    </summary>
  </comment>
  <comment id="ID3D12StateObject">
    <summary>
      <para>Represents a variable amount of configuration state, including shaders, that an application manages as a single unit and which is given to a driver atomically to process, such as compile or optimize.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12stateobject" /></para>
    </summary>
  </comment>
  <comment id="D3D12_BACKGROUND_PROCESSING_MODE">
    <summary>
      <para>Defines constants that specify a level of dynamic optimization to apply to GPU work that's subsequently submitted.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_background_processing_mode" /></para>
    </summary>
  </comment>
  <comment id="D3D12_BACKGROUND_PROCESSING_MODE::D3D12_BACKGROUND_PROCESSING_MODE_ALLOWED">
    <summary>The default setting. Specifies that the driver may instrument workloads, and dynamically recompile shaders, in a low overhead, non-intrusive manner that avoids glitching the foreground workload.</summary>
  </comment>
  <comment id="D3D12_BACKGROUND_PROCESSING_MODE::D3D12_BACKGROUND_PROCESSING_MODE_ALLOW_INTRUSIVE_MEASUREMENTS">
    <summary>Specifies that the driver may instrument as aggressively as possible. The understanding is that causing glitches is fine while in this mode, because the current work is being submitted specifically to train the system.</summary>
  </comment>
  <comment id="D3D12_BACKGROUND_PROCESSING_MODE::D3D12_BACKGROUND_PROCESSING_MODE_DISABLE_BACKGROUND_WORK">
    <summary>Specifies that background work should stop. This ensures that background shader recompilation won't consume CPU cycles. Available only in <b>Developer mode</b>.</summary>
  </comment>
  <comment id="D3D12_BACKGROUND_PROCESSING_MODE::D3D12_BACKGROUND_PROCESSING_MODE_DISABLE_PROFILING_BY_SYSTEM">
    <summary>Specifies that all dynamic optimization should be disabled. For example, if you're doing an A/B performance comparison, then using this constant ensures that the driver doesn't change anything that might interfere with your results. Available only in <b>Developer mode</b>.</summary>
  </comment>
  <comment id="ID3D12DebugCommandList1::SetDebugParameter">
    <summary>
      <para>Modifies optional Debug Layer settings of a command list.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12debugcommandlist1-setdebugparameter" /></para>
      <param name="Type">Specifies a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ne-d3d12sdklayers-d3d12_debug_command_list_parameter_type">D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE</a> value that indicates which debug parameter data to set.</param>
      <param name="pData">Pointer to debug parameter data to set.  The interpretation of this data depends on the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ne-d3d12sdklayers-d3d12_debug_command_list_parameter_type">D3D12_DEBUG_COMMAND_LIST_PARAMETER_TYPE</a> given in the <i>Type</i> parameter.</param>
      <param name="DataSize">Specifies the size in bytes of the debug parameter <i>pData</i>.</param>
    </summary>
  </comment>
  <comment id="ID3D12Device::CreateCommandQueue">
    <summary>
      <para>Creates a command queue.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createcommandqueue" /></para>
      <param name="pDesc">Specifies a D3D12_COMMAND_QUEUE_DESC that describes the command queue.</param>
      <param name="riid">The globally unique identifier (GUID) for the command queue interface. See remarks.  An input parameter.</param>
      <param name="ppCommandQueue">A pointer to a memory block that receives a pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12commandqueue">ID3D12CommandQueue</a> interface for the command queue.</param>
    </summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList1::SetSamplePositions">
    <summary>
      <para>This method configures the sample positions used by subsequent draw, copy, resolve, and similar operations.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist1-setsamplepositions" /></para>
      <param name="NumSamplesPerPixel"><a href="https://docs.microsoft.com/visualstudio/code-quality/annotating-function-parameters-and-return-values?view=vs-2015">SAL</a>: <c>_In_</c>

Specifies the number of samples to take, per pixel. This value can be 1, 2, 4, 8, or 16, otherwise the SetSamplePosition call is dropped. The number of samples must match the sample count configured in the PSO at draw time, otherwise the behavior is undefined.</param>
      <param name="NumPixels"><a href="https://docs.microsoft.com/visualstudio/code-quality/annotating-function-parameters-and-return-values?view=vs-2015">SAL</a>: <c>_In_</c>

Specifies the number of pixels that sample patterns are being specified for. This value can be either 1 or 4, otherwise the SetSamplePosition call is dropped. A value of 1 configures a single sample pattern to be used for each pixel; a value of 4 configures separate sample patterns for each pixel in a 2x2 pixel grid which is repeated over the render-target or viewport space, aligned to even coordintes.

Note that the maximum number of combined samples can't exceed 16, otherwise the call is dropped. If NumPixels is set to 4, NumSamplesPerPixel can specify no more than 4 samples.</param>
      <param name="pSamplePositions"><a href="https://docs.microsoft.com/visualstudio/code-quality/annotating-function-parameters-and-return-values?view=vs-2015">SAL</a>: <c>_In_reads_(NumSamplesPerPixel*NumPixels)</c>

Specifies an array of D3D12_SAMPLE_POSITION elements. The size of the array is NumPixels * NumSamplesPerPixel. If NumPixels is set to 4, then the first group of sample positions corresponds to the upper-left pixel in the 2x2 grid of pixels; the next group of sample positions corresponds to the upper-right pixel, the next group to the lower-left pixel, and the final group to the lower-right pixel.

If centroid interpolation is used during rendering, the order of positions for each pixel determines centroid-sampling prioritiy. That is, the first covered sample in the order specified is chosen as the centroid sample location.</param>
    </summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_ENDING_ACCESS_TYPE">
    <summary>
      <para>Specifies the type of access that an application is given to the specified resource(s) at the transition out of a render pass.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_render_pass_ending_access_type" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_ENDING_ACCESS_TYPE::D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_DISCARD">
    <summary>Indicates that your application won't have any future dependency on any data that you wrote to the resource(s) during this render pass. For example, a depth buffer that won't be textured from before it's written to again.</summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_ENDING_ACCESS_TYPE::D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_PRESERVE">
    <summary>Indicates that your application will have a dependency on the written contents of the resource(s) in the future, and so they must be preserved.</summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_ENDING_ACCESS_TYPE::D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_RESOLVE">
    <summary>Indicates that the resource(s)—for example, a multi-sample anti-aliasing (MSAA) surface—should be directly resolved to a separate resource at the conclusion of the render pass. For a tile-based deferred renderer (TBDR), this should ideally happenwhile the MSAA contents are still in the tile cache. You should ensure that the resolve destination is in the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_states">D3D12_RESOURCE_STATE_RESOLVE_DEST</a> resource state when the render pass ends. The resolve source is left in its initial resource state at the time the render pass ends.  A resolve operation submitted by a render pass doesn't implicitly change the state of any resource.</summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_ENDING_ACCESS_TYPE::D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_NO_ACCESS">
    <summary>Indicates that your application will neither read from nor write  to the resource(s) during the render pass. You would most likely use this value to indicate that you won't be accessing the depth/stencil plane for a depth/stencil view (DSV). You must pair this value with <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_render_pass_beginning_access_type">D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_NO_ACCESS</a> in the corresponding <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_render_pass_beginning_access">D3D12_RENDER_PASS_BEGINNING_ACCESS</a> structure.</summary>
  </comment>
  <comment id="ID3D12InfoQueue::GetRetrievalFilter">
    <summary>
      <para>Get the retrieval filter at the top of the retrieval-filter stack.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getretrievalfilter" /></para>
      <param name="pFilter">Retrieval filter at the top of the retrieval-filter stack.</param>
      <param name="pFilterByteLength">Size of the retrieval filter in bytes. If <i>pFilter</i> is NULL, the size of the retrieval filter will be output to this parameter.</param>
    </summary>
  </comment>
  <comment id="D3D12_RESOURCE_COORDINATE">
    <summary>
      <para>Describes the coordinates of a resource.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_resource_coordinate" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RESOURCE_COORDINATE::X">
    <summary>The x-coordinate of the resource.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_COORDINATE::Y">
    <summary>The y-coordinate of the resource.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_COORDINATE::Z">
    <summary>The z-coordinate of the resource.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_COORDINATE::SubresourceIndex">
    <summary>The index of the subresource for the resource.</summary>
  </comment>
  <comment id="D3D12_SHADER_DESC">
    <summary>
      <para>Describes a shader.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/ns-d3d12shader-d3d12_shader_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_SHADER_DESC::Version">
    <summary>The Shader version, as an encoded UINT that corresponds to a shader model, such as "ps_5_0".
            <b>Version</b> describes the program type, a major version number, and a minor version number.
            The program type is a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12shader/ne-d3d12shader-d3d12_shader_version_type">D3D12_SHADER_VERSION_TYPE</a> enumeration constant.
            <b>Version</b> is decoded in the following way:
            

<ul>
<li>Program type = (Version &amp; 0xFFFF0000) &gt;&gt; 16</li>
<li>Major version = (Version &amp; 0x000000F0) &gt;&gt; 4</li>
<li>Minor version = (Version &amp; 0x0000000F)</li>
</ul></summary>
  </comment>
  <comment id="D3D12_SHADER_DESC::Creator">
    <summary>The name of the originator of the shader.</summary>
  </comment>
  <comment id="D3D12_SHADER_DESC::Flags">
    <summary>Shader compilation/parse flags.</summary>
  </comment>
  <comment id="D3D12_SHADER_DESC::ConstantBuffers">
    <summary>The number of shader-constant buffers.</summary>
  </comment>
  <comment id="D3D12_SHADER_DESC::BoundResources">
    <summary>The number of resource (textures and buffers) bound to a shader.</summary>
  </comment>
  <comment id="D3D12_SHADER_DESC::InputParameters">
    <summary>The number of parameters in the input signature.</summary>
  </comment>
  <comment id="D3D12_SHADER_DESC::OutputParameters">
    <summary>The number of parameters in the output signature.</summary>
  </comment>
  <comment id="D3D12_SHADER_DESC::InstructionCount">
    <summary>The number of intermediate-language instructions in the compiled shader.</summary>
  </comment>
  <comment id="D3D12_SHADER_DESC::TempRegisterCount">
    <summary>The number of temporary registers in the compiled shader.</summary>
  </comment>
  <comment id="D3D12_SHADER_DESC::TempArrayCount">
    <summary>Number of temporary arrays used.</summary>
  </comment>
  <comment id="D3D12_SHADER_DESC::DefCount">
    <summary>Number of constant defines.</summary>
  </comment>
  <comment id="D3D12_SHADER_DESC::DclCount">
    <summary>Number of declarations (input + output).</summary>
  </comment>
  <comment id="D3D12_SHADER_DESC::TextureNormalInstructions">
    <summary>Number of non-categorized texture instructions.</summary>
  </comment>
  <comment id="D3D12_SHADER_DESC::TextureLoadInstructions">
    <summary>Number of texture load instructions</summary>
  </comment>
  <comment id="D3D12_SHADER_DESC::TextureCompInstructions">
    <summary>Number of texture comparison instructions</summary>
  </comment>
  <comment id="D3D12_SHADER_DESC::TextureBiasInstructions">
    <summary>Number of texture bias instructions</summary>
  </comment>
  <comment id="D3D12_SHADER_DESC::TextureGradientInstructions">
    <summary>Number of texture gradient instructions.</summary>
  </comment>
  <comment id="D3D12_SHADER_DESC::FloatInstructionCount">
    <summary>Number of floating point arithmetic instructions used.</summary>
  </comment>
  <comment id="D3D12_SHADER_DESC::IntInstructionCount">
    <summary>Number of signed integer arithmetic instructions used.</summary>
  </comment>
  <comment id="D3D12_SHADER_DESC::UintInstructionCount">
    <summary>Number of unsigned integer arithmetic instructions used.</summary>
  </comment>
  <comment id="D3D12_SHADER_DESC::StaticFlowControlCount">
    <summary>Number of static flow control instructions used.</summary>
  </comment>
  <comment id="D3D12_SHADER_DESC::DynamicFlowControlCount">
    <summary>Number of dynamic flow control instructions used.</summary>
  </comment>
  <comment id="D3D12_SHADER_DESC::MacroInstructionCount">
    <summary>Number of macro instructions used.</summary>
  </comment>
  <comment id="D3D12_SHADER_DESC::ArrayInstructionCount">
    <summary>Number of array instructions used.</summary>
  </comment>
  <comment id="D3D12_SHADER_DESC::CutInstructionCount">
    <summary>Number of cut instructions used.</summary>
  </comment>
  <comment id="D3D12_SHADER_DESC::EmitInstructionCount">
    <summary>Number of emit instructions used.</summary>
  </comment>
  <comment id="D3D12_SHADER_DESC::GSOutputTopology">
    <summary>The <a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_primitive_topology">D3D_PRIMITIVE_TOPOLOGY</a>-typed value that represents the geometry shader output topology.</summary>
  </comment>
  <comment id="D3D12_SHADER_DESC::GSMaxOutputVertexCount">
    <summary>Geometry shader maximum output vertex count.</summary>
  </comment>
  <comment id="D3D12_SHADER_DESC::InputPrimitive">
    <summary>The <a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_primitive">D3D_PRIMITIVE</a>-typed value that represents the input primitive for a  geometry shader or hull shader.</summary>
  </comment>
  <comment id="D3D12_SHADER_DESC::PatchConstantParameters">
    <summary>Number of parameters in the patch-constant signature.</summary>
  </comment>
  <comment id="D3D12_SHADER_DESC::cGSInstanceCount">
    <summary>Number of geometry shader instances.</summary>
  </comment>
  <comment id="D3D12_SHADER_DESC::cControlPoints">
    <summary>Number of control points in the hull shader and domain shader.</summary>
  </comment>
  <comment id="D3D12_SHADER_DESC::HSOutputPrimitive">
    <summary>The <a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_tessellator_output_primitive">D3D_TESSELLATOR_OUTPUT_PRIMITIVE</a>-typed value that represents the tessellator output-primitive type.</summary>
  </comment>
  <comment id="D3D12_SHADER_DESC::HSPartitioning">
    <summary>The <a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_tessellator_partitioning">D3D_TESSELLATOR_PARTITIONING</a>-typed value that represents the tessellator partitioning mode.</summary>
  </comment>
  <comment id="D3D12_SHADER_DESC::TessellatorDomain">
    <summary>The <a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_tessellator_domain">D3D_TESSELLATOR_DOMAIN</a>-typed value that represents the tessellator domain.</summary>
  </comment>
  <comment id="D3D12_SHADER_DESC::cBarrierInstructions">
    <summary>Number of barrier instructions in a compute shader.</summary>
  </comment>
  <comment id="D3D12_SHADER_DESC::cInterlockedInstructions">
    <summary>Number of interlocked instructions in a compute shader.</summary>
  </comment>
  <comment id="D3D12_SHADER_DESC::cTextureStoreInstructions">
    <summary>Number of texture writes in a compute shader.</summary>
  </comment>
  <comment id="D3D12_VIEW_INSTANCE_LOCATION">
    <summary>
      <para>Specifies the viewport/stencil and render target associated with a view instance.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_view_instance_location" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIEW_INSTANCE_LOCATION::ViewportArrayIndex">
    <summary>The index of the viewport in the viewports array to be used by the view instance associated with this location.</summary>
  </comment>
  <comment id="D3D12_VIEW_INSTANCE_LOCATION::RenderTargetArrayIndex">
    <summary>The index of the render target in the render targets array to be used by the view instance associated with this location.</summary>
  </comment>
  <comment id="ID3D12Device::CreateRenderTargetView">
    <summary>
      <para>Creates a render-target view for accessing resource data.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createrendertargetview" /></para>
      <param name="pResource">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a> object that represents the render target.
          

At least one of <i>pResource</i> or <i>pDesc</i>  must be provided.
A null <i>pResource</i> is used to initialize a null descriptor, which guarantees D3D11-like null binding behavior (reading 0s, writes are discarded), but must have a valid <i>pDesc</i> in order to determine the descriptor type.</param>
      <param name="pDesc">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_render_target_view_desc">D3D12_RENDER_TARGET_VIEW_DESC</a> structure that describes the render-target view.

A null <i>pDesc</i> is used to initialize a default descriptor, if possible. This behavior is identical to the D3D11 null descriptor behavior, where defaults are filled in. This behavior inherits the resource format and dimension (if not typeless) and RTVs target the first mip and all array slices. Not all resources support null descriptor initialization.</param>
      <param name="DestDescriptor">Describes the CPU descriptor handle that represents the destination where the newly-created render target view will reside.</param>
    </summary>
  </comment>
  <comment id="D3D12_HEAP_FLAGS">
    <summary>
      <para>Specifies heap options, such as whether the heap can contain textures, and whether resources are shared across adapters.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_heap_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_HEAP_FLAGS::D3D12_HEAP_FLAG_NONE">
    <summary>No options are specified.</summary>
  </comment>
  <comment id="D3D12_HEAP_FLAGS::D3D12_HEAP_FLAG_SHARED">
    <summary>The heap is shared. Refer to <a href="https://docs.microsoft.com/windows/desktop/direct3d12/shared-heaps">Shared Heaps</a>.</summary>
  </comment>
  <comment id="D3D12_HEAP_FLAGS::D3D12_HEAP_FLAG_DENY_BUFFERS">
    <summary>The heap isn't allowed to contain buffers.</summary>
  </comment>
  <comment id="D3D12_HEAP_FLAGS::D3D12_HEAP_FLAG_ALLOW_DISPLAY">
    <summary>The heap is allowed to contain swap-chain surfaces.</summary>
  </comment>
  <comment id="D3D12_HEAP_FLAGS::D3D12_HEAP_FLAG_SHARED_CROSS_ADAPTER">
    <summary>The heap is allowed to share resources across adapters. Refer to <a href="https://docs.microsoft.com/windows/desktop/direct3d12/shared-heaps">Shared Heaps</a>.</summary>
  </comment>
  <comment id="D3D12_HEAP_FLAGS::D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES">
    <summary>The heap is not allowed to store Render Target (RT) and/or Depth-Stencil (DS) textures.</summary>
  </comment>
  <comment id="D3D12_HEAP_FLAGS::D3D12_HEAP_FLAG_DENY_NON_RT_DS_TEXTURES">
    <summary>The heap is not allowed to contain resources with D3D12_RESOURCE_DIMENSION_TEXTURE1D, D3D12_RESOURCE_DIMENSION_TEXTURE2D, or D3D12_RESOURCE_DIMENSION_TEXTURE3D  unless either D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET or D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL are present. Refer to <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_dimension">D3D12_RESOURCE_DIMENSION</a> and <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_flags">D3D12_RESOURCE_FLAGS</a>.</summary>
  </comment>
  <comment id="D3D12_HEAP_FLAGS::D3D12_HEAP_FLAG_HARDWARE_PROTECTED">
    <summary>Unsupported. Do not use.</summary>
  </comment>
  <comment id="D3D12_HEAP_FLAGS::D3D12_HEAP_FLAG_ALLOW_WRITE_WATCH">
    <summary>The heap supports MEM_WRITE_WATCH functionality, which causes the system to track the pages that are written to in the commited memory region. This flag can't be combined with the D3D12_HEAP_TYPE_DEFAULT or D3D12_CPU_PAGE_PROPERTY_UNKNOWN flags. Applications are discouraged from using this flag themselves because it prevents tools from using this functionality.</summary>
  </comment>
  <comment id="D3D12_HEAP_FLAGS::D3D12_HEAP_FLAG_ALLOW_SHADER_ATOMICS">
    <summary>Ensures that atomic operations will be atomic on this heap's memory, according to components able to see the memory.

Creating a heap with this flag will fail under either of these conditions.
- The heap type is <b>D3D12_HEAP_TYPE_DEFAULT</b>, and the heap can be visible on multiple nodes, but the device does <i>not</i> support [<b>D3D12_CROSS_NODE_SHARING_TIER_3</b>](./ne-d3d12-d3d12_cross_node_sharing_tier.md).
- The heap is CPU-visible, but the heap type is <i>not</i> <b>D3D12_HEAP_TYPE_CUSTOM</b>.

Note that heaps with this flag might be a limited resource on some systems.</summary>
  </comment>
  <comment id="D3D12_HEAP_FLAGS::D3D12_HEAP_FLAG_CREATE_NOT_RESIDENT">
    <summary>The heap is created in a non-resident state and must be made resident using [ID3D12Device::MakeResident](./nf-d3d12-id3d12device-makeresident.md) or [ID3D12Device3::EnqueueMakeResident](./nf-d3d12-id3d12device3-enqueuemakeresident.md).

By default, the final step of heap creation is to make the heap resident, so this flag skips this step and allows the application to decide when to do so.</summary>
  </comment>
  <comment id="D3D12_HEAP_FLAGS::D3D12_HEAP_FLAG_CREATE_NOT_ZEROED">
    <summary>Allows the OS to not zero the heap created. By default, committed resources and heaps are almost always zeroed upon creation. This flag allows this to be elided in some scenarios. However, it doesn't guarantee it. For example, memory coming from other processes still needs to be zeroed for data protection and process isolation. This can lower the overhead of creating the heap.</summary>
  </comment>
  <comment id="D3D12_HEAP_FLAGS::D3D12_HEAP_FLAG_ALLOW_ALL_BUFFERS_AND_TEXTURES">
    <summary>The heap is allowed to store all types of buffers and/or textures. This is an alias; for more details, see "Aliases" in the Remarks section.</summary>
  </comment>
  <comment id="D3D12_HEAP_FLAGS::D3D12_HEAP_FLAG_ALLOW_ONLY_BUFFERS">
    <summary>The heap is only allowed to store buffers. This is an alias; for more details, see "Aliases" in the Remarks section.</summary>
  </comment>
  <comment id="D3D12_HEAP_FLAGS::D3D12_HEAP_FLAG_ALLOW_ONLY_NON_RT_DS_TEXTURES">
    <summary>The heap is only allowed to store non-RT, non-DS textures. This is an alias; for more details, see "Aliases" in the Remarks section.</summary>
  </comment>
  <comment id="D3D12_HEAP_FLAGS::D3D12_HEAP_FLAG_ALLOW_ONLY_RT_DS_TEXTURES">
    <summary>The heap is only allowed to store RT and/or DS textures. This is an alias; for more details, see "Aliases" in the Remarks section.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::DrawIndexedInstanced">
    <summary>
      <para>Draws indexed, instanced primitives.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-drawindexedinstanced" /></para>
      <param name="IndexCountPerInstance">Number of indices read from the index buffer for each instance.</param>
      <param name="InstanceCount">Number of instances to draw.</param>
      <param name="StartIndexLocation">The location of the first index read by the GPU from the index buffer.</param>
      <param name="BaseVertexLocation">A value added to each index before reading a vertex from the vertex buffer.</param>
      <param name="StartInstanceLocation">A value added to each index before reading per-instance data from a vertex buffer.</param>
    </summary>
  </comment>
  <comment id="D3D12_SUBRESOURCE_TILING">
    <summary>
      <para>Describes a tiled subresource volume.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_subresource_tiling" /></para>
    </summary>
  </comment>
  <comment id="D3D12_SUBRESOURCE_TILING::WidthInTiles">
    <summary>The width in tiles of the subresource.</summary>
  </comment>
  <comment id="D3D12_SUBRESOURCE_TILING::HeightInTiles">
    <summary>The height in tiles of the subresource.</summary>
  </comment>
  <comment id="D3D12_SUBRESOURCE_TILING::DepthInTiles">
    <summary>The depth in tiles of the subresource.</summary>
  </comment>
  <comment id="D3D12_SUBRESOURCE_TILING::StartTileIndexInOverallResource">
    <summary>The index of the tile in the overall tiled subresource to start with.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1">
    <summary>
      <para>Specifies input stream arguments for an input stream passed to ID3D12VideoProcessCommandList1::ProcessFrames1, which supports changing the field type for each call.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_video_process_input_stream_arguments1" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1::InputStream">
    <summary>An array of <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_process_input_stream.md">D3D12_VIDEO_PROCESS_INPUT_STREAM</a> structures containing the set of references for video processing. If the stereo format is <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_frame_stereo_format.md">D3D12_VIDEO_PROCESS_STEREO_FORMAT_SEPARATE</a>, then two sets of input streams must be supplied.  For all other stereo formats, the first set of reference must be supplied, and the second should be zero initialized.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1::Transform">
    <summary>A <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_process_transform.md">D3D12_VIDEO_PROCESS_TRANSFORM</a> structure specifying the flip, rotation, scale and destination translation for the video input.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1::Flags">
    <summary>A value from the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_process_input_stream_flags.md">D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS</a> enumeration specifying the options for the input stream.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1::RateInfo">
    <summary>A <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_process_input_stream_rate.md">D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE</a> structure specifying the framerate and input and output indicies for framerate conversion and deinterlacing.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1::FilterLevels">
    <summary>The level to apply for each enabled filter.  The filter level is specified in the order that filters appear in the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_process_filter_flags.md">D3D12_VIDEO_PROCESS_FILTER_FLAGS</a> enumeration.  Specify 0 if a filter is not enabled or the filter index is reserved.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1::AlphaBlending">
    <summary>A <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_process_alpha_blending.md">D3D12_VIDEO_PROCESS_ALPHA_BLENDING</a> structure specifying the planar alpha for an input stream on the video processor.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS1::FieldType">
    <summary>A value from the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_field_type.md">D3D12_VIDEO_FIELD_TYPE</a> enumeration specfying the interlaced field type of the input source. When working with mixed content, use [ID3D12VideoProcessCommandList1::ProcessFrames1](nf-d3d12video-id3d12videoprocesscommandlist1-processframes1.md) which supports changing the field type for each call.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::SetPipelineState">
    <summary>
      <para>Sets all shaders and programs most of the fixed-function state of the graphics processing unit (GPU) pipeline.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setpipelinestate" /></para>
      <param name="pPipelineState">Pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12pipelinestate">ID3D12PipelineState</a> containing the pipeline state data.</param>
    </summary>
  </comment>
  <comment id="D3D12_HEAP_SERIALIZATION_TIER">
    <summary>
      <para>Defines constants that specify heap serialization support.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_heap_serialization_tier" /></para>
    </summary>
  </comment>
  <comment id="D3D12_HEAP_SERIALIZATION_TIER::D3D12_HEAP_SERIALIZATION_TIER_0">
    <summary>Indicates that heap serialization is not supported.</summary>
  </comment>
  <comment id="D3D12_HEAP_SERIALIZATION_TIER::D3D12_HEAP_SERIALIZATION_TIER_10">
    <summary>Indicates that heap serialization is supported. Your application can serialize resource data in heaps through copying APIs such as <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12graphicscommandlist-copyresource">CopyResource</a>, without necessarily requiring an explicit [state transition](/windows/desktop/direct3d12/using-resource-barriers-to-synchronize-resource-states-in-direct3d-12#implicit-state-transitions) of resources on those heaps.</summary>
  </comment>
  <comment id="D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS">
    <summary>
      <para>Specifies the motion estimation search block sizes that a video encoder can support.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ne-d3d12video-d3d12_video_motion_estimator_search_block_size_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS::D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_NONE">
    <summary>Search block size is not supported by the encoder.</summary>
  </comment>
  <comment id="D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS::D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_8X8">
    <summary>The encoder supports a search block size of 8x8 pixels.</summary>
  </comment>
  <comment id="D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAGS::D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE_FLAG_16X16">
    <summary>The encoder supports a search block size of 16x16 pixels.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_FEATURE_FLAGS">
    <summary>
      <para>Specifies the features that a video processor can support.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ne-d3d12video-d3d12_video_process_feature_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_FEATURE_FLAGS::D3D12_VIDEO_PROCESS_FEATURE_FLAG_NONE">
    <summary>No features are supported.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_FEATURE_FLAGS::D3D12_VIDEO_PROCESS_FEATURE_FLAG_ALPHA_FILL">
    <summary>The video processor can set alpha values on the output pixels. The alpha fill mode is used in <a href="ns-d3d12video-d3d12_video_process_output_stream_desc.md">D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC</a>.  <a href="ne-d3d12video-d3d12_video_process_alpha_fill_mode.md">D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_OPAQUE</a> must be always supported.  The background, destination, and source stream modes are only supported when the driver reports D3D12_VIDEO_PROCESS_FEATURE_FLAG_ALPHA_FILL.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_FEATURE_FLAGS::D3D12_VIDEO_PROCESS_FEATURE_FLAG_LUMA_KEY">
    <summary>The video processor can perform luma keying.  Luma keying is configured via the <b>D3D12_VIDEO_PROCESS_LUMA_KEY</b> member of the <a href="ns-d3d12video-d3d12_video_process_input_stream_arguments.md">D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS</a> structure. For more information see <a href="ns-d3d12video-d3d12_video_process_luma_key">D3D12_VIDEO_PROCESS_LUMA_KEY</a>.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_FEATURE_FLAGS::D3D12_VIDEO_PROCESS_FEATURE_FLAG_STEREO">
    <summary>The video processor can support 3D stereo video. For more information, see <a href="ne-d3d12video-d3d12_video_frame_stereo_format.md">D3D12_VIDEO_FRAME_STEREO_FORMAT</a>.

All drivers setting this capability must support the following stereo formats: D3D12_VIDEO_PROCESS_STEREO_FORMAT_HORIZONTAL, D3D12_VIDEO_PROCESS_STEREO_FORMAT_VERTICAL, and D3D12_VIDEO_PROCESS_STEREO_FORMAT_SEPARATE.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_FEATURE_FLAGS::D3D12_VIDEO_PROCESS_FEATURE_FLAG_ROTATION">
    <summary>The driver can rotate the input data either 90, 180, or 270 degrees clockwise as part of the video processing operation.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_FEATURE_FLAGS::D3D12_VIDEO_PROCESS_FEATURE_FLAG_FLIP">
    <summary>The driver can flip the input data horizontally or vertically, together or separately with a video rotation operation.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_FEATURE_FLAGS::D3D12_VIDEO_PROCESS_FEATURE_FLAG_ALPHA_BLENDING">
    <summary>Alpha blending and a planar alpha may be set in the <b>AlphaBlending</b> member of the <a href="ns-d3d12video-d3d12_video_process_input_stream_arguments.md">D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS</a> structure.  For more information see <a href="ns-d3d12video-d3d12_video_process_alpha_blending.md">D3D12_VIDEO_PROCESS_ALPHA_BLENDING</a>.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_FEATURE_FLAGS::D3D12_VIDEO_PROCESS_FEATURE_FLAG_PIXEL_ASPECT_RATIO">
    <summary>The driver supports changing the pixel aspect ratio.  If the driver does not report this capability, then the <b>SourceAspectRatio</b> and <b>DestinationAspectRatio</b> members of <a href="ns-d3d12video-d3d12_video_process_input_stream_arguments.md">D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS</a> structure must indicate a 1:1 aspect ratio.</summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_RANGE_FLAGS">
    <summary>
      <para>Specifies the volatility of both descriptors and the data they reference in a Root Signature 1.1 description, which can enable some driver optimizations.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_descriptor_range_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_RANGE_FLAGS::D3D12_DESCRIPTOR_RANGE_FLAG_NONE">
    <summary>Default behavior. Descriptors are static, and default assumptions are made for data (for SRV/CBV: DATA_STATIC_WHILE_SET_AT_EXECUTE, and for UAV: DATA_VOLATILE).</summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_RANGE_FLAGS::D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_VOLATILE">
    <summary>If this is the only flag set, then descriptors are volatile and default assumptions are made about data (for SRV/CBV: DATA_STATIC_WHILE_SET_AT_EXECUTE, and for UAV: DATA_VOLATILE). 

If this flag is combined with DATA_VOLATILE, then both descriptors and data are volaille, which is equivalent to Root Signature Version 1.0.

If this flag is combined with DATA_STATIC_WHILE_SET_AT_EXECUTE, then descriptors are volatile. This still doesn’t allow them to change during command list execution so it is valid to combine the additional declaration that data is static while set via root descriptor table during execution – the underlying descriptors are effectively static for longer than the data is being promised to be static.</summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_RANGE_FLAGS::D3D12_DESCRIPTOR_RANGE_FLAG_DATA_VOLATILE">
    <summary>Descriptors are static and the data is volatile.</summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_RANGE_FLAGS::D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE">
    <summary>Descriptors are static and data is static while set at execute.</summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_RANGE_FLAGS::D3D12_DESCRIPTOR_RANGE_FLAG_DATA_STATIC">
    <summary>Both descriptors and data are static. This maximizes the potential for driver optimization.</summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_RANGE_FLAGS::D3D12_DESCRIPTOR_RANGE_FLAG_DESCRIPTORS_STATIC_KEEPING_BUFFER_BOUNDS_CHECKS">
    <summary>Provides the same benefits as static descriptors (see <b>D3D12_DESCRIPTOR_RANGE_FLAG_NONE</b>), except that the driver is not allowed to promote buffers to root descriptors as an optimization, because they must maintain bounds checks and root descriptors do not have those.</summary>
  </comment>
  <comment id="D3D12_DEPTH_STENCIL_VALUE">
    <summary>
      <para>Specifies a depth and stencil value.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_depth_stencil_value" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DEPTH_STENCIL_VALUE::Depth">
    <summary>Specifies the depth value.</summary>
  </comment>
  <comment id="D3D12_DEPTH_STENCIL_VALUE::Stencil">
    <summary>Specifies the stencil value.</summary>
  </comment>
  <comment id="ID3D12ShaderReflection::GetResourceBindingDesc">
    <summary>
      <para>Gets a description of how a resource is bound to a shader.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getresourcebindingdesc" /></para>
      <param name="ResourceIndex">A zero-based resource index.</param>
      <param name="pDesc">A pointer to an input-binding description. See <a href="https://docs.microsoft.com/windows/win32/api/d3d12shader/ns-d3d12shader-d3d12_shader_input_bind_desc">D3D12_SHADER_INPUT_BIND_DESC</a>.</param>
    </summary>
  </comment>
  <comment id="ID3D12SharingContract::SharedFenceSignal">
    <summary>
      <para>Signals a shared fence between the D3D layers and diagnostics tools.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12sharingcontract-sharedfencesignal" /></para>
      <param name="pFence">A pointer to the shared fence to signal.</param>
      <param name="FenceValue">An unsigned 64bit value to signal the shared fence with.</param>
    </summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::SetMarker">
    <summary>
      <para>Not intended to be called directly.  Use the PIX event runtime to insert events into a command list.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setmarker" /></para>
      <param name="Metadata">Internal.</param>
      <param name="pData">Internal.</param>
      <param name="Size">Internal.</param>
    </summary>
  </comment>
  <comment id="D3D12_DRED_VERSION">
    <summary>
      <para>Defines constants that specify a version of Device Removed Extended Data (DRED), as used by the D3D12_VERSIONED_DEVICE_REMOVED_EXTENDED_DATA structure.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_dred_version" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DRED_VERSION::D3D12_DRED_VERSION_1_0">
    <summary>Specifies DRED version 1.0.</summary>
  </comment>
  <comment id="D3D12_DRED_VERSION::D3D12_DRED_VERSION_1_1">
    <summary>Specifies DRED version 1.1.</summary>
  </comment>
  <comment id="D3D12_MESSAGE">
    <summary>
      <para>A debug message in the Information Queue.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/ns-d3d12sdklayers-d3d12_message" /></para>
    </summary>
  </comment>
  <comment id="D3D12_MESSAGE::Category">
    <summary>The category of the message. See <a href="https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ne-d3d12sdklayers-d3d12_message_category">D3D12_MESSAGE_CATEGORY</a>.</summary>
  </comment>
  <comment id="D3D12_MESSAGE::Severity">
    <summary>The severity of the message. See  <a href="https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ne-d3d12sdklayers-d3d12_message_severity">D3D12_MESSAGE_SEVERITY</a>.</summary>
  </comment>
  <comment id="D3D12_MESSAGE::ID">
    <summary>The ID of the message. See <a href="https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ne-d3d12sdklayers-d3d12_message_id">D3D12_MESSAGE_ID</a>.</summary>
  </comment>
  <comment id="D3D12_MESSAGE::pDescription">
    <summary>The message string.</summary>
  </comment>
  <comment id="D3D12_MESSAGE::DescriptionByteLength">
    <summary>The length of <i>pDescription</i>, in bytes.</summary>
  </comment>
  <comment id="D3D12_VIEW_INSTANCING_FLAGS">
    <summary>
      <para>Specifies options for view instancing.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_view_instancing_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIEW_INSTANCING_FLAGS::D3D12_VIEW_INSTANCING_FLAG_NONE">
    <summary>Indicates a default view instancing configuration.</summary>
  </comment>
  <comment id="D3D12_VIEW_INSTANCING_FLAGS::D3D12_VIEW_INSTANCING_FLAG_ENABLE_VIEW_INSTANCE_MASKING">
    <summary>Enables view instance masking.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList4::ExecuteMetaCommand">
    <summary>
      <para>Records the execution (or invocation) of the specified meta command into a graphics command list.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist4-executemetacommand" /></para>
      <param name="pMetaCommand">A pointer to an <b>ID3D12MetaCommand</b> representing the meta command to initialize.</param>
      <param name="pExecutionParametersData">An optional pointer to a constant structure containing the values of the parameters for executing the meta command.</param>
      <param name="ExecutionParametersDataSizeInBytes">A <a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">SIZE_T</a> containing the size of the structure pointed to by <i>pExecutionParametersData</i>, if set, otherwise 0.</param>
    </summary>
  </comment>
  <comment id="ID3D12DescriptorHeap::GetDesc">
    <summary>
      <para>Gets the descriptor heap description.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12descriptorheap-getdesc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT">
    <summary>
      <para>Receives output data from calls to ID3D12VideoEncodeCommandList::ResolveMotionVectorHeap.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_resolve_video_motion_vector_heap_output" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT::pMotionVectorTexture2D">
    <summary>An <a href="https://docs.microsoft.com../d3d12/nn-d3d12-id3d12resource.md">ID3D12Resource</a> representing the output resource for resolved motion vectors. Motion vectors are resolved to <a href="https://docs.microsoft.com../dxgiformat/ne-dxgiformat-dxgi_format.md">DXGI_FORMAT_R16G16_SINT</a> 2D textures. The resolved data is a signed 16-byte integer with quarter PEL units with the X vector component stored in the R component and the Y vector component stored in the G component. Motion vectors are stored in a 2D layout that corresponds to the pixel layout of the original input textures.</summary>
  </comment>
  <comment id="D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_OUTPUT::MotionVectorCoordinate">
    <summary>A <a href="https://docs.microsoft.comns-d3d12video-d3d12_resource_coordinate.md">D3D12_RESOURCE_COORDINATE</a> structure specifying the output origin of the motion vectors. The remaining sub-region must be large enough to store all motion vectors per block specified by the input pixel with and pixel height and the specified <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_motion_estimator_search_block_size.md">D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE</a>.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC">
    <summary>
      <para>Describes a set of triangles used as raytracing geometry. The geometry pointed to by this struct are always in triangle list form, indexed or non-indexed. Triangle strips are not supported.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_raytracing_geometry_triangles_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC::Transform3x4">
    <summary>Address of a 3x4 affine transform matrix in row-major layout to be applied to the vertices in the <i>VertexBuffer</i> during an acceleration structure build.  The contents of <i>VertexBuffer</i> are not modified.  If a 2D vertex format is used, the transformation is applied with the third vertex component assumed to be zero. 

If <i>Transform3x4</i> is NULL the vertices will not be transformed. Using <i>Transform3x4</i> may result in increased computation and/or memory requirements for the acceleration structure build.


The memory pointed to must be in state <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_states">D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE</a>.  The address must be aligned to 16 bytes, defined as <a href="https://docs.microsoft.com/windows/desktop/direct3d12/constants">D3D12_RAYTRACING_TRANSFORM3X4_BYTE_ALIGNMENT</a>.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC::IndexFormat">
    <summary>Format of the indices in the <i>IndexBuffer</i>.  Must be one of the following:

<ul>
<li><b>DXGI_FORMAT_UNKNOWN</b> - when IndexBuffer is NULL</li>
<li><b>DXGI_FORMAT_R32_UINT</b></li>
<li><b>DXGI_FORMAT_R16_UINT</b></li>
</ul></summary>
  </comment>
  <comment id="D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC::VertexFormat">
    <summary>Format of the vertices in <i>VertexBuffer</i>.  Must be one of the following:

<ul>
<li><b>DXGI_FORMAT_R32G32_FLOAT</b> - third component is assumed 0</li>
<li><b>DXGI_FORMAT_R32G32B32_FLOAT</b></li>
<li><b>DXGI_FORMAT_R16G16_FLOAT</b> - third component is assumed 0</li>
<li><b>DXGI_FORMAT_R16G16B16A16_FLOAT</b>  - A16 component is ignored, other data can be packed there, such as setting vertex stride to 6 bytes.</li>
<li><b>DXGI_FORMAT_R16G16_SNORM</b>  - third component is assumed 0</li>
<li><b>DXGI_FORMAT_R16G16B16A16_SNORM</b>   - A16 component is ignored, other data can be packed there, such as setting vertex stride to 6 bytes.</li>
</ul></summary>
  </comment>
  <comment id="D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC::IndexCount">
    <summary>Number of indices in <i>IndexBuffer</i>.  Must be 0 if <i>IndexBuffer</i> is NULL.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC::VertexCount">
    <summary>Number of vertices in <i>VertexBuffer</i>.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC::IndexBuffer">
    <summary>Array of vertex indices.  If NULL, triangles are non-indexed.  Just as with graphics, the address must be aligned to the size of <i>IndexFormat</i>.

The memory pointed to must be in state <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_states">D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE</a>.  Note that if an app wants to share index buffer inputs between graphics input assembler and raytracing acceleration structure build input, it can always put a resource into a combination of read states simultaneously, e.g. <b>D3D12_RESOURCE_STATE_INDEX_BUFFER</b> | <b>D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE</b>.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC::VertexBuffer">
    <summary>Array of vertices including a stride.  The alignment on the address and stride must be a multiple of the component size, so 4 bytes for formats with 32bit components and 2 bytes for formats with 16bit components.  Unlike graphics, there is no constraint on the stride, other than that the bottom 32bits of the value are all that are used – the field is UINT64 purely to make neighboring fields align cleanly/obviously everywhere.  Each vertex position is expected to be at the start address of the stride range and any excess space is ignored by acceleration structure builds.  This excess space might contain other app data such as vertex attributes, which the app is responsible for manually fetching in shaders, whether it is interleaved in vertex buffers or elsewhere.

The memory pointed to must be in state <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_states">D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE</a>.  Note that if an app wants to share vertex buffer inputs between graphics input assembler and raytracing acceleration structure build input, it can always put a resource into a combination of read states simultaneously, e.g. <b>D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER</b> | <b>D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE</b></summary>
  </comment>
  <comment id="D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS">
    <summary>
      <para>Describes settings used by GPU-Based Validation.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/ns-d3d12sdklayers-d3d12_debug_device_gpu_based_validation_settings" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS::MaxMessagesPerCommandList">
    <summary>Specifies a UINT that limits the number of messages that can be stored in the GPU-Based Validation message log.  The default value is 256.  Since many identical errors can be produced in a single Draw/Dispatch call it may be useful to increase this number.  Note this can become a memory burden if a large number of command lists are used as there is a committed message log per command list.</summary>
  </comment>
  <comment id="D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS::DefaultShaderPatchMode">
    <summary>Specifies the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ne-d3d12sdklayers-d3d12_gpu_based_validation_shader_patch_mode">D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE</a> that GPU-Based Validation uses when injecting validation code into shaders, except when overridden by per-command-list GPU-Based Validation settings (see <a href="https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ns-d3d12sdklayers-d3d12_debug_command_list_gpu_based_validation_settings">D3D12_DEBUG_COMMAND_LIST_GPU_BASED_VALIDATION_SETTINGS</a>).  The default value is D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_UNGUARDED_VALIDATION.</summary>
  </comment>
  <comment id="D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS::PipelineStateCreateFlags">
    <summary>Specifies one of the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ne-d3d12sdklayers-d3d12_gpu_based_validation_pipeline_state_create_flags">D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAGS</a> that indicates how GPU-Based Validation handles patching pipeline states.  The default value is D3D12_GPU_BASED_VALIDATION_PIPELINE_STATE_CREATE_FLAG_NONE.</summary>
  </comment>
  <comment id="ID3D12Device::CreateShaderResourceView">
    <summary>
      <para>Creates a shader-resource view for accessing data in a resource.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createshaderresourceview" /></para>
      <param name="pResource">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a> object that represents the shader resource.

At least one of <i>pResource</i> or <i>pDesc</i>  must be provided.
A null <i>pResource</i> is used to initialize a null descriptor, which guarantees D3D11-like null binding behavior (reading 0s, writes are discarded), but must have a valid <i>pDesc</i> in order to determine the descriptor type.</param>
      <param name="pDesc">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_shader_resource_view_desc">D3D12_SHADER_RESOURCE_VIEW_DESC</a> structure that describes the shader-resource view. 

A null <i>pDesc</i> is used to initialize a default descriptor, if possible. This behavior is identical to the D3D11 null descriptor behavior, where defaults are filled in. This behavior inherits the resource format and dimension (if not typeless) and for buffers SRVs target a full buffer and are typed (not raw or structured), and for textures SRVs target a full texture, all mips and all array slices. Not all resources support null descriptor initialization.</param>
      <param name="DestDescriptor">Describes the CPU descriptor handle that represents the shader-resource view. This handle can be created in a shader-visible or non-shader-visible descriptor heap.</param>
    </summary>
  </comment>
  <comment id="ID3D12Debug1::SetEnableGPUBasedValidation">
    <summary>
      <para>This method enables or disables GPU-Based Validation (GBV) before creating a device with the debug layer enabled.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12debug1-setenablegpubasedvalidation" /></para>
      <param name="Enable">TRUE to enable GPU-Based Validation, otherwise FALSE.</param>
    </summary>
  </comment>
  <comment id="ID3D12FunctionReflection::GetConstantBufferByIndex">
    <summary>
      <para>Gets a constant buffer by index for a function.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12functionreflection-getconstantbufferbyindex" /></para>
      <param name="BufferIndex">Zero-based index.</param>
    </summary>
  </comment>
  <comment id="D3D12_RESOURCE_FLAGS">
    <summary>
      <para>Specifies options for working with resources.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_resource_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RESOURCE_FLAGS::D3D12_RESOURCE_FLAG_NONE">
    <summary>No options are specified.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_FLAGS::D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET">
    <summary>Allows a render target view to be created for the resource, as well as enables the resource to transition into the state of D3D12_RESOURCE_STATE_RENDER_TARGET. Some adapter architectures allocate extra memory for textures with this flag to reduce the effective bandwidth during common rendering. This characteristic may not be beneficial for textures that are never rendered to, nor is it available for textures compressed with BC formats. Applications should avoid setting this flag when rendering will never occur.


The following restrictions and interactions apply:

<ul>
<li> Either the texture format must support render target capabilities at the current feature level. Or, when the format is a typeless format, a format within the same typeless group must support render target capabilities at the current feature level.</li>
<li>Cannot be set in conjunction with textures that have D3D12_TEXTURE_LAYOUT_ROW_MAJOR when <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_feature_data_d3d12_options">D3D12_FEATURE_DATA_D3D12_OPTIONS</a>::<b>CrossAdapterRowMajorTextureSupported</b> is FALSE nor in conjunction with textures that have D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE when     <b>D3D12_FEATURE_DATA_D3D12_OPTIONS</b>::<b>StandardSwizzle64KBSupported</b> is FALSE.
</li>
<li>Cannot be used with 4KB alignment, D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL, nor usage with heaps that have D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES.</li>
</ul></summary>
  </comment>
  <comment id="D3D12_RESOURCE_FLAGS::D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL">
    <summary>Allows a depth stencil view to be created for the resource, as well as enables the resource to transition into the state of D3D12_RESOURCE_STATE_DEPTH_WRITE and/or D3D12_RESOURCE_STATE_DEPTH_READ. Most adapter architectures allocate extra memory for textures with this flag to reduce the effective bandwidth and maximize optimizations for early depth-test. Applications should avoid setting this flag when depth operations will never occur.


The following restrictions and interactions apply:

<ul>
<li>Either the texture format must support depth stencil capabilities at the current feature level. Or, when the format is a typeless format, a format within the same typeless group must support depth stencil capabilities at the current feature level.</li>
<li>Cannot be used with D3D12_RESOURCE_DIMENSION_BUFFER, 4KB alignment, D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET, D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS, D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS, D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE, D3D12_TEXTURE_LAYOUT_ROW_MAJOR, nor used with heaps that have D3D12_HEAP_FLAG_DENY_RT_DS_TEXTURES or D3D12_HEAP_FLAG_ALLOW_DISPLAY.
</li>
<li>Precludes usage of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12resource-writetosubresource">WriteToSubresource</a> and <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12resource-readfromsubresource">ReadFromSubresource</a>.
</li>
<li>Precludes GPU copying of a subregion. <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12graphicscommandlist-copytextureregion">CopyTextureRegion</a> must copy a whole subresource to or from resources with this flag.</li>
</ul></summary>
  </comment>
  <comment id="D3D12_RESOURCE_FLAGS::D3D12_RESOURCE_FLAG_ALLOW_UNORDERED_ACCESS">
    <summary>Allows an unordered access view to be created for the resource, as well as enables the resource to transition into the state of D3D12_RESOURCE_STATE_UNORDERED_ACCESS. Some adapter architectures must resort to less efficient texture layouts in order to provide this functionality. If a texture is rarely used for unordered access, it may be worth having two textures around and copying between them. One texture would have this flag, while the other wouldn't. Applications should avoid setting this flag when unordered access operations will never occur.


The following restrictions and interactions apply:

<ul>
<li>Either the texture format must support unordered access capabilities at the current feature level. Or, when the format is a typeless format, a format within the same typeless group must support unordered access capabilities at the current feature level.
</li>
<li>Cannot be set in conjunction with textures that have D3D12_TEXTURE_LAYOUT_ROW_MAJOR when <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_feature_data_d3d12_options">D3D12_FEATURE_DATA_D3D12_OPTIONS</a>::<b>CrossAdapterRowMajorTextureSupported</b> is FALSE nor in conjunction with textures that have D3D12_TEXTURE_LAYOUT_64KB_STANDARD_SWIZZLE when <b>D3D12_FEATURE_DATA_D3D12_OPTIONS</b>::<b>StandardSwizzle64KBSupported</b> is FALSE, nor when the feature level is less than 11.0.
</li>
<li>Cannot be used with MSAA textures. </li>
</ul></summary>
  </comment>
  <comment id="D3D12_RESOURCE_FLAGS::D3D12_RESOURCE_FLAG_DENY_SHADER_RESOURCE">
    <summary>Disallows a shader resource view to be created for the resource, as well as disables the resource to transition into the state of D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE or D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE. Some adapter architectures experience increased bandwidth for depth stencil textures when shader resource views are precluded. If a texture is rarely used for shader resource, it may be worth having two textures around and copying between them. One texture would have this flag and the other wouldn't. Applications should set this flag when depth stencil textures will never be used from shader resource views.


The following restrictions and interactions apply:


<ul>
<li>Must be used with D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL. 
</li>
</ul></summary>
  </comment>
  <comment id="D3D12_RESOURCE_FLAGS::D3D12_RESOURCE_FLAG_ALLOW_CROSS_ADAPTER">
    <summary>Allows the resource to be used for cross-adapter data, as well as the same features enabled by ALLOW_SIMULTANEOUS_ACCESS. Cross adapter resources commonly preclude techniques that reduce effective texture bandwidth during usage, and some adapter architectures may require different caching behavior. Applications should avoid setting this flag when the resource data will never be used with another adapter.

The following restrictions and interactions apply:


<ul>
<li>Must be used with heaps that have D3D12_HEAP_FLAG_SHARED_CROSS_ADAPTER.</li>
<li>Cannot be used with heaps that have D3D12_HEAP_FLAG_ALLOW_DISPLAY.</li>
</ul></summary>
  </comment>
  <comment id="D3D12_RESOURCE_FLAGS::D3D12_RESOURCE_FLAG_ALLOW_SIMULTANEOUS_ACCESS">
    <summary>Allows a resource to be simultaneously accessed by multiple different queues, devices or processes (for example, allows a resource to be used with <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12graphicscommandlist-resourcebarrier">ResourceBarrier</a> transitions performed in more than one command list 
	executing at the same time). 

Simultaneous access allows multiple readers and one writer, as long as the writer doesn't concurrently modify the texels that other readers are accessing. Some adapter architectures cannot leverage techniques to reduce effective texture bandwidth during usage. 

However, applications should avoid setting this flag when multiple readers are not required during frequent, non-overlapping writes to textures. Use of this flag can compromise resource fences to perform waits, and prevents any compression being used with a resource.

These restrictions and interactions apply.

- Can't be used with <a href="https://docs.microsoft.com./ne-d3d12-d3d12_resource_dimension.md">D3D12_RESOURCE_DIMENSION_BUFFER</a>; but buffers always have the properties represented by this flag.
- Can't be used with MSAA textures.
- Can't be used with [D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL]().</summary>
  </comment>
  <comment id="D3D12_RESOURCE_FLAGS::D3D12_RESOURCE_FLAG_VIDEO_DECODE_REFERENCE_ONLY">
    <summary>This resource may only be used as a decode reference frame.  It may only be written to or read by the video decode operation.  

<a href="https://docs.microsoft.com../d3d12video/ne-d3d12video-d3d12_video_decode_tier.md">D3D12_VIDEO_DECODE_TIER_1</a> and <a href="https://docs.microsoft.com../d3d12video/ne-d3d12video-d3d12_video_decode_tier.md">D3D12_VIDEO_DECODE_TIER_2</a> may report     <a href="https://docs.microsoft.com../d3d12video/ne-d3d12video-d3d12_video_decode_configuration_flags.md">D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_REFERENCE_ONLY_ALLOCATIONS_REQUIRED</a> in the <a href="https://docs.microsoft.com../d3d12video/ns-d3d12video-d3d12_feature_data_video_decode_support.md">D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT</a> structure configuration flag.  If so, the application must allocate reference frames with the new <b>D3D12\_RESOURCE\_VIDEO\_DECODE\_REFERENCE\_ONLY</b> resource flag.  <a href="https://docs.microsoft.com../d3d12video/ne-d3d12video-d3d12_video_decode_tier.md">D3D12_VIDEO_DECODE_TIER_3</a> must not set the [D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_REFERENCE_ONLY_ALLOCATIONS_REQUIRED]
(../d3d12video/ne-d3d12video-d3d12_video_decode_configuration_flags)) configuration flag and must not require the use of this resource flag.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList1">
    <summary>
      <para>Encapsulates a list of graphics commands for rendering, extending the interface to support programmable sample positions, atomic copies for implementing late-latch techniques, and optional depth-bounds testing.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12graphicscommandlist1" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT1">
    <summary>
      <para>Specifies resources that are supported for a provided format.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_format_support1" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_NONE">
    <summary>No resources are supported.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_BUFFER">
    <summary>Buffer resources supported.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_IA_VERTEX_BUFFER">
    <summary>Vertex buffers supported.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_IA_INDEX_BUFFER">
    <summary>Index buffers supported.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_SO_BUFFER">
    <summary>Streaming output buffers supported.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_TEXTURE1D">
    <summary>1D texture resources supported.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_TEXTURE2D">
    <summary>2D texture resources supported.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_TEXTURE3D">
    <summary>3D texture resources supported.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_TEXTURECUBE">
    <summary>Cube texture resources supported.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_SHADER_LOAD">
    <summary>The HLSL <a href="https://docs.microsoft.com/windows/desktop/direct3dhlsl/dx-graphics-hlsl-to-load">Load</a> function for texture objects is supported.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE">
    <summary>The HLSL <a href="https://docs.microsoft.com/windows/desktop/direct3dhlsl/dx-graphics-hlsl-to-sample">Sample</a> function for texture objects is supported.

<div class="alert"><b>Note</b>  If the device supports the format as a resource (1D, 2D, 3D, or cube map) but doesn't support this option, the resource can still use the <a href="https://docs.microsoft.com/windows/desktop/direct3dhlsl/dx-graphics-hlsl-to-sample">Sample</a> method but must use only the point filtering sampler state to perform the sample.</div>
<div> </div></summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_COMPARISON">
    <summary>The HLSL <a href="https://docs.microsoft.com/windows/desktop/direct3dhlsl/dx-graphics-hlsl-to-samplecmp">SampleCmp</a> and <a href="https://docs.microsoft.com/windows/desktop/direct3dhlsl/dx-graphics-hlsl-to-samplecmplevelzero">SampleCmpLevelZero</a> functions for texture objects are supported.

<div class="alert"><b>Note</b>  Windows 8 and later might provide limited support for these functions on Direct3D <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-downlevel-intro">feature levels</a> 9_1, 9_2, and 9_3. For more info, see <a href="https://docs.microsoft.com/previous-versions/windows/apps/jj262110(v=win.10)">Implementing shadow buffers for Direct3D feature level 9</a>.
</div>
<div> </div></summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_SHADER_SAMPLE_MONO_TEXT">
    <summary>Reserved.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_MIP">
    <summary>Mipmaps are supported.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_RENDER_TARGET">
    <summary>Render targets are supported.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_BLENDABLE">
    <summary>Blend operations supported.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_DEPTH_STENCIL">
    <summary>Depth stencils supported.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RESOLVE">
    <summary>Multisample antialiasing (MSAA) resolve operations are supported. For more info, see <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12graphicscommandlist-resolvesubresource">ID3D12GraphicsCommandList::ResolveSubresource</a>.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_DISPLAY">
    <summary>Format can be displayed on screen.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_CAST_WITHIN_BIT_LAYOUT">
    <summary>Format can't be cast to another format.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_MULTISAMPLE_RENDERTARGET">
    <summary>Format can be used as a multi-sampled render target.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_MULTISAMPLE_LOAD">
    <summary>Format can be used as a multi-sampled texture and read into a shader with the HLSL <a href="https://docs.microsoft.com/windows/desktop/direct3dhlsl/dx-graphics-hlsl-to-load">Load</a> function.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_SHADER_GATHER">
    <summary>Format can be used with the HLSL gather function. This value is available in DirectX 10.1 or higher.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_BACK_BUFFER_CAST">
    <summary>Format supports casting when the resource is a back buffer.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_TYPED_UNORDERED_ACCESS_VIEW">
    <summary>Format can be used for an unordered access view.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_SHADER_GATHER_COMPARISON">
    <summary>Format can be used with the HLSL gather with comparison function.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_DECODER_OUTPUT">
    <summary>Format can be used with the decoder output.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_OUTPUT">
    <summary>Format can be used with the video processor output.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_VIDEO_PROCESSOR_INPUT">
    <summary>Format can be used with the video processor input.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT1::D3D12_FORMAT_SUPPORT1_VIDEO_ENCODER">
    <summary>Format can be used with the video encoder.</summary>
  </comment>
  <comment id="D3D12_DSV_FLAGS">
    <summary>
      <para>Specifies depth-stencil view options.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_dsv_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DSV_FLAGS::D3D12_DSV_FLAG_NONE">
    <summary>Indicates a default view.</summary>
  </comment>
  <comment id="D3D12_DSV_FLAGS::D3D12_DSV_FLAG_READ_ONLY_DEPTH">
    <summary>Indicates that depth values are read only.</summary>
  </comment>
  <comment id="D3D12_DSV_FLAGS::D3D12_DSV_FLAG_READ_ONLY_STENCIL">
    <summary>Indicates that stencil values are read only.</summary>
  </comment>
  <comment id="D3D12_DISPATCH_ARGUMENTS">
    <summary>
      <para>Describes dispatch parameters, for use by the compute shader.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_dispatch_arguments" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DISPATCH_ARGUMENTS::ThreadGroupCountX">
    <summary>The size, in thread groups, of the x-dimension of the thread-group grid.</summary>
  </comment>
  <comment id="D3D12_DISPATCH_ARGUMENTS::ThreadGroupCountY">
    <summary>The size, in thread groups, of the y-dimension of the thread-group grid.</summary>
  </comment>
  <comment id="D3D12_DISPATCH_ARGUMENTS::ThreadGroupCountZ">
    <summary>The size, in thread groups, of the z-dimension of the thread-group grid.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::BeginEvent">
    <summary>
      <para>Not intended to be called directly.  Use the PIX event runtime to insert events into a command list.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-beginevent" /></para>
      <param name="Metadata">Internal.</param>
      <param name="pData">Internal.</param>
      <param name="Size">Internal.</param>
    </summary>
  </comment>
  <comment id="D3D12_EXPORT_FLAGS">
    <summary>
      <para>The flags to apply when exporting symbols from a state subobject.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_export_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_EXPORT_FLAGS::D3D12_EXPORT_FLAG_NONE">
    <summary>No export flags.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT2">
    <summary>
      <para>Specifies which unordered resource options are supported for a provided format.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_format_support2" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT2::D3D12_FORMAT_SUPPORT2_NONE">
    <summary>No unordered resource options are supported.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT2::D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_ADD">
    <summary>Format supports atomic add.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT2::D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_BITWISE_OPS">
    <summary>Format supports atomic bitwise operations.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT2::D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_COMPARE_STORE_OR_COMPARE_EXCHANGE">
    <summary>Format supports atomic compare with store or exchange.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT2::D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_EXCHANGE">
    <summary>Format supports atomic exchange.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT2::D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_SIGNED_MIN_OR_MAX">
    <summary>Format supports atomic min and max.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT2::D3D12_FORMAT_SUPPORT2_UAV_ATOMIC_UNSIGNED_MIN_OR_MAX">
    <summary>Format supports atomic unsigned min and max.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT2::D3D12_FORMAT_SUPPORT2_UAV_TYPED_LOAD">
    <summary>Format supports a typed load.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT2::D3D12_FORMAT_SUPPORT2_UAV_TYPED_STORE">
    <summary>Format supports a typed store.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT2::D3D12_FORMAT_SUPPORT2_OUTPUT_MERGER_LOGIC_OP">
    <summary>Format supports logic operations in blend state.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT2::D3D12_FORMAT_SUPPORT2_TILED">
    <summary>Format supports tiled resources. Refer to <a href="https://docs.microsoft.com/windows/desktop/direct3d12/volume-tiled-resources">Volume Tiled Resources</a>.</summary>
  </comment>
  <comment id="D3D12_FORMAT_SUPPORT2::D3D12_FORMAT_SUPPORT2_MULTIPLANE_OVERLAY">
    <summary>Format supports multi-plane overlays.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList4">
    <summary>
      <para>Encapsulates a list of graphics commands for rendering, extending the interface to support ray tracing and render passes.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12graphicscommandlist4" /></para>
    </summary>
  </comment>
  <comment id="ID3D12InfoQueue::GetStorageFilterStackSize">
    <summary>
      <para>Get the size of the storage-filter stack in bytes.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getstoragefilterstacksize" /></para>
    </summary>
  </comment>
  <comment id="D3D12_SHADER_COMPONENT_MAPPING">
    <summary>
      <para>Specifies how memory gets routed by a shader resource view (SRV).</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_shader_component_mapping" /></para>
    </summary>
  </comment>
  <comment id="D3D12_SHADER_COMPONENT_MAPPING::D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_0">
    <summary>Indicates return component 0 (red).</summary>
  </comment>
  <comment id="D3D12_SHADER_COMPONENT_MAPPING::D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_1">
    <summary>Indicates return component 1 (green).</summary>
  </comment>
  <comment id="D3D12_SHADER_COMPONENT_MAPPING::D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_2">
    <summary>Indicates return component 2 (blue).</summary>
  </comment>
  <comment id="D3D12_SHADER_COMPONENT_MAPPING::D3D12_SHADER_COMPONENT_MAPPING_FROM_MEMORY_COMPONENT_3">
    <summary>Indicates return component 3 (alpha).</summary>
  </comment>
  <comment id="D3D12_SHADER_COMPONENT_MAPPING::D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_0">
    <summary>Indicates forcing the resulting value to 0.</summary>
  </comment>
  <comment id="D3D12_SHADER_COMPONENT_MAPPING::D3D12_SHADER_COMPONENT_MAPPING_FORCE_VALUE_1">
    <summary>Indicates forcing the resulting value 1. The value of forcing 1 is either 0x1 or 1.0f depending on the format type for that component in the source format.</summary>
  </comment>
  <comment id="D3D12_BLEND_OP">
    <summary>
      <para>Specifies RGB or alpha blending operations.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_blend_op" /></para>
    </summary>
  </comment>
  <comment id="D3D12_BLEND_OP::D3D12_BLEND_OP_ADD">
    <summary>Add source 1 and source 2.</summary>
  </comment>
  <comment id="D3D12_BLEND_OP::D3D12_BLEND_OP_SUBTRACT">
    <summary>Subtract source 1 from source 2.</summary>
  </comment>
  <comment id="D3D12_BLEND_OP::D3D12_BLEND_OP_REV_SUBTRACT">
    <summary>Subtract source 2 from source 1.</summary>
  </comment>
  <comment id="D3D12_BLEND_OP::D3D12_BLEND_OP_MIN">
    <summary>Find the minimum of source 1 and source 2.</summary>
  </comment>
  <comment id="D3D12_BLEND_OP::D3D12_BLEND_OP_MAX">
    <summary>Find the maximum of source 1 and source 2.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_ROOT_SIGNATURE">
    <summary>
      <para>Indicates root signature version support.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_feature_data_root_signature" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_ROOT_SIGNATURE::HighestVersion">
    <summary>On input, specifies the highest version <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d_root_signature_version">D3D_ROOT_SIGNATURE_VERSION</a> to check for. On output specifies the highest version, up to the input version specified, actually available.</summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_ENDING_ACCESS">
    <summary>
      <para>Describes the access to resource(s) that is requested by an application at the transition out of a render pass.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_render_pass_ending_access" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_ENDING_ACCESS::Type">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_render_pass_ending_access_type">D3D12_RENDER_PASS_ENDING_ACCESS_TYPE</a>. The type of access being requested.</summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_ENDING_ACCESS::Resolve">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_render_pass_ending_access_resolve_parameters">D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS</a>. Appropriate when  <b>Type</b> is <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_render_pass_ending_access_type">D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_RESOLVE</a>. Description of the resource to resolve to.</summary>
  </comment>
  <comment id="D3D12_ROOT_DESCRIPTOR_FLAGS">
    <summary>
      <para>Specifies the volatility of the data referenced by descriptors in a Root Signature 1.1 description, which can enable some driver optimizations.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_root_descriptor_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_ROOT_DESCRIPTOR_FLAGS::D3D12_ROOT_DESCRIPTOR_FLAG_NONE">
    <summary>Default assumptions are made for data (for SRV/CBV: DATA_STATIC_WHILE_SET_AT_EXECUTE, and for UAV: DATA_VOLATILE).</summary>
  </comment>
  <comment id="D3D12_ROOT_DESCRIPTOR_FLAGS::D3D12_ROOT_DESCRIPTOR_FLAG_DATA_VOLATILE">
    <summary>Data is volatile. Equivalent to Root Signature Version 1.0.</summary>
  </comment>
  <comment id="D3D12_ROOT_DESCRIPTOR_FLAGS::D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC_WHILE_SET_AT_EXECUTE">
    <summary>Data is static while set at execute.</summary>
  </comment>
  <comment id="D3D12_ROOT_DESCRIPTOR_FLAGS::D3D12_ROOT_DESCRIPTOR_FLAG_DATA_STATIC">
    <summary>Data is static. The best potential for driver optimization.</summary>
  </comment>
  <comment id="ID3D12Tools::ShaderInstrumentationEnabled">
    <summary>
      <para>Determines whether shader instrumentation is enabled.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12tools-shaderinstrumentationenabled" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE">
    <summary>
      <para>Provides information about the stream rate.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_video_process_input_stream_rate" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE::OutputIndex">
    <summary>The zero-based index number of the output frame. The OutputIndex member is a zero-based cyclic number that indicates the frame index number of the output. The driver uses this output-index information to perform the video processing in a certain pattern or cycle, especially when the driver performs deinterlacing or frame-rate conversion. For example, with the following output-index pattern, the driver performs the indicated video processing:

- Progressive format at normal and half rate: 
 - <i>OutputInde</i> = 0, 0,...
- Progressive format at 2/1 custom rate (double frame-rate conversion, OutputFrames=2): 
 - <i>OutputInde</i> = 0, 1, 0, 1,...
- Interlaced format at normal rate: 
 - <i>OutputInde</i> = 0, 1, 0, 1,... (0: first field, 1: second field)
- Interlaced format at half rate: 
 - <i>OutputInde</i> = 0, 0,... (for example, first and second fields are blended to one frame)
- Interlaced at 4/5 custom rate (3:2 inverse telecine, OutputFrames=4): 
 - <i>OutputInde</i> = 0, 1, 2, 3, 0, 1, 2, 3,... (0:A, 1:B, 2:C, 3:D film frame)</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_RATE::InputFrameOrField">
    <summary>The zero-based index number of the input frame or field. The InputFrameOrField member is a zero-based number that indicates the frame or the field number of the input surface. For example, with the following input-frame-or-field number, the driver can perform the indicated video processing: 

- Progressive format and interlaced format at normal rate: 
  - <i>InputFrameOrField</i> = 0, 1, 2,...
- Progressive format and interlaced format at half rate: 
  - <i>InputFrameOrField</i> = 0, 2, 4,...
- Interlaced format at 4/5 custom rate (3:2 inverse telecine, OutputFrames=4 and InputFrameOrField=10): 
  - <i>InputFrameOrField</i> = 0, 0, 0, 0, 10, 10, 10, 10, 20, 20, 20, 20,...
- Interlaced format at 4/15 custom rate (8:7 inverse telecine, OutputFrames=2 and InputFrameOrField=15): 
  - <i>InputFrameOrField</i> = 0, 0, 15, 15, 30, 30,...</summary>
  </comment>
  <comment id="ID3D12Device::CreateDescriptorHeap">
    <summary>
      <para>Creates a descriptor heap object.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createdescriptorheap" /></para>
      <param name="pDescriptorHeapDesc">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_descriptor_heap_desc">D3D12_DESCRIPTOR_HEAP_DESC</a> structure that describes the heap.</param>
      <param name="riid">The globally unique identifier (<b>GUID</b>) for the descriptor heap interface. See Remarks.
            An input parameter.</param>
      <param name="ppvHeap">A pointer to a memory block that receives a pointer to the descriptor heap.
            <i>ppvHeap</i> can be NULL, to enable capability testing.
            When <i>ppvHeap</i> is NULL, no object will be created and S_FALSE will be returned when <i>pDescriptorHeapDesc</i> is valid.</param>
    </summary>
  </comment>
  <comment id="D3D12_SUBRESOURCE_DATA">
    <summary>
      <para>Describes subresource data.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_subresource_data" /></para>
    </summary>
  </comment>
  <comment id="D3D12_SUBRESOURCE_DATA::pData">
    <summary>A pointer to a memory block that contains the subresource data.</summary>
  </comment>
  <comment id="D3D12_SUBRESOURCE_DATA::RowPitch">
    <summary>The row pitch, or width, or physical size, in bytes, of the subresource data.</summary>
  </comment>
  <comment id="D3D12_SUBRESOURCE_DATA::SlicePitch">
    <summary>The depth pitch, or width, or physical size, in bytes, of the subresource data.</summary>
  </comment>
  <comment id="ID3D12ShaderReflectionType">
    <summary>
      <para>This shader-reflection interface provides access to variable type.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nn-d3d12shader-id3d12shaderreflectiontype" /></para>
    </summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::ClearUnorderedAccessViewFloat">
    <summary>
      <para>Sets all the elements in a unordered access view to the specified float values.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-clearunorderedaccessviewfloat" /></para>
      <param name="ViewGPUHandleInCurrentHeap">A <a href="https://docs.microsoft.com./ns-d3d12-d3d12_gpu_descriptor_handle.md">D3D12_GPU_DESCRIPTOR_HANDLE</a> that references an initialized descriptor for the unordered-access view (UAV) that is to be cleared. This descriptor must be in a shader-visible descriptor heap, which must be set on the command list via <a href="https://docs.microsoft.comnf-d3d12-id3d12graphicscommandlist-setdescriptorheaps.md">SetDescriptorHeaps</a>.</param>
      <param name="ViewCPUHandle">A <a href="https://docs.microsoft.com./ns-d3d12-d3d12_cpu_descriptor_handle.md">D3D12_CPU_DESCRIPTOR_HANDLE</a> in a non-shader visible descriptor heap that references an initialized descriptor for the unordered-access view (UAV) that is to be cleared.
          
&gt; [!IMPORTANT]
&gt; This descriptor must not be in a shader-visible descriptor heap. This is to allow drivers thath implement the clear as fixed-function hardware (rather than via a dispatch) to efficiently read from the descriptor, as shader-visible heaps may be created in <b>WRITE_BACK</b> memory (similar to <b>D3D12_HEAP_TYPE_UPLOAD</b> heap types), and CPU reads from this type of memory are prohibitively slow.</param>
      <param name="pResource">A pointer to the <a href="https://docs.microsoft.com./nn-d3d12-id3d12resource.md">ID3D12Resource</a> interface that represents the unordered-access-view (UAV) resource to clear.</param>
      <param name="Values">A 4-component array that containing the values to fill the unordered-access-view resource with.</param>
      <param name="NumRects">The number of rectangles in the array that the <i>pRects</i> parameter specifies.</param>
      <param name="pRects">An array of <b>D3D12_RECT</b> structures for the rectangles in the resource view to clear. If <b>NULL</b>, <b>ClearUnorderedAccessViewFloat</b> clears the entire resource view.</param>
    </summary>
  </comment>
  <comment id="D3D12_MULTIPLE_FENCE_WAIT_FLAGS">
    <summary>
      <para>Specifies multiple wait flags for multiple fences.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_multiple_fence_wait_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_MULTIPLE_FENCE_WAIT_FLAGS::D3D12_MULTIPLE_FENCE_WAIT_FLAG_NONE">
    <summary>No flags are being passed. This means to use the default behavior, which is to wait for all fences before signaling the event.</summary>
  </comment>
  <comment id="D3D12_MULTIPLE_FENCE_WAIT_FLAGS::D3D12_MULTIPLE_FENCE_WAIT_FLAG_ANY">
    <summary>Modifies behavior to indicate that the event should be signaled after any one of the fence values has been reached by its corresponding fence.</summary>
  </comment>
  <comment id="D3D12_MULTIPLE_FENCE_WAIT_FLAGS::D3D12_MULTIPLE_FENCE_WAIT_FLAG_ALL">
    <summary>An alias for <b>D3D12_MULTIPLE_FENCE_WAIT_FLAG_NONE</b>, meaning to use the default behavior and wait for all fences.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::ResolveQueryData">
    <summary>
      <para>Extracts data from a query. ResolveQueryData works with all heap types (default, upload, and readback).  ResolveQueryData works with all heap types (default, upload, and readback). .</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-resolvequerydata" /></para>
      <param name="pQueryHeap">Specifies the  <a href="https://docs.microsoft.com/windows/win32/api/d3d12/nn-d3d12-id3d12queryheap">ID3D12QueryHeap</a> containing the queries to resolve.</param>
      <param name="Type">Specifies the type of query, one member of <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_query_type">D3D12_QUERY_TYPE</a>.</param>
      <param name="StartIndex">Specifies an index of the first query to resolve.</param>
      <param name="NumQueries">Specifies the number of queries to resolve.</param>
      <param name="pDestinationBuffer">Specifies an <a href="https://docs.microsoft.com/windows/win32/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a> destination buffer, which must be in the state
            <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_resource_states">D3D12_RESOURCE_STATE_COPY_DEST</a>.</param>
      <param name="AlignedDestinationBufferOffset">Specifies an alignment offset into the destination buffer.
            Must be a multiple of 8 bytes.</param>
    </summary>
  </comment>
  <comment id="ID3D12Debug3::SetEnableSynchronizedCommandQueueValidation">
    <summary>
      <para>Enables or disables dependent command queue synchronization when using a Direct3D 12 device with the debug layer enabled.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12debug3-setenablesynchronizedcommandqueuevalidation" /></para>
      <param name="Enable">TRUE to enable Dependent Command Queue Synchronization, otherwise FALSE.</param>
    </summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_FLAGS">
    <summary>
      <para>Specifies the nature of the render pass; for example, whether it is a suspending or a resuming render pass.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_render_pass_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_FLAGS::D3D12_RENDER_PASS_FLAG_NONE">
    <summary>Indicates that the render pass has no special requirements.</summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_FLAGS::D3D12_RENDER_PASS_FLAG_ALLOW_UAV_WRITES">
    <summary>Indicates that writes to unordered access view(s) should be allowed during the render pass.</summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_FLAGS::D3D12_RENDER_PASS_FLAG_SUSPENDING_PASS">
    <summary>Indicates that this is a suspending render pass.</summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_FLAGS::D3D12_RENDER_PASS_FLAG_RESUMING_PASS">
    <summary>Indicates that this is a resuming render pass.</summary>
  </comment>
  <comment id="D3D12CreateVersionedRootSignatureDeserializer">
    <summary>
      <para>Generates an interface that can return the deserialized data structure, via GetUnconvertedRootSignatureDesc.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12createversionedrootsignaturedeserializer" /></para>
      <param name="pSrcData">A pointer to the source data for the serialized root signature.</param>
      <param name="SrcDataSizeInBytes">The size, in bytes, of the block of memory that <i>pSrcData</i> points to.</param>
      <param name="pRootSignatureDeserializerInterface">The globally unique identifier (<b>GUID</b>) for the root signature deserializer interface. See remarks.</param>
      <param name="ppRootSignatureDeserializer">A pointer to a memory block that receives a pointer to the root signature deserializer.</param>
    </summary>
  </comment>
  <comment id="ID3D12PipelineLibrary1::LoadPipeline">
    <summary>
      <para>Retrieves the requested PSO from the library. The pipeline stream description is matched against the library database and remembered in order to prevent duplication of PSO contents.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12pipelinelibrary1-loadpipeline" /></para>
      <param name="pName"><a href="https://docs.microsoft.com/visualstudio/code-quality/annotating-function-parameters-and-return-values?view=vs-2015">SAL</a>: <c>_In_</c>

The unique name of the PSO.</param>
      <param name="pDesc"><a href="https://docs.microsoft.com/visualstudio/code-quality/annotating-function-parameters-and-return-values?view=vs-2015">SAL</a>: <c>_In_</c>

Describes the required PSO using a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_pipeline_state_stream_desc">D3D12_PIPELINE_STATE_STREAM_DESC</a> structure. This description is matched against the library database and stored in order to prevent duplication of PSO contents.</param>
      <param name="riid">Specifies a REFIID for the ID3D12PipelineStateState object.

Applications should typically set this argument and the following argument, ppPipelineState, by using the macro IID_PPV_ARGS(&amp;PSO1), where PSO1 is the name of the object.</param>
      <param name="ppPipelineState"><a href="https://docs.microsoft.com/visualstudio/code-quality/annotating-function-parameters-and-return-values?view=vs-2015">SAL</a>: <c>_COM_Outptr_</c>

Specifies the pointer that will reference the PSO after the function successfully returns.</param>
    </summary>
  </comment>
  <comment id="ID3D12ShaderReflectionType::IsOfType">
    <summary>
      <para>Indicates whether a variable is of the specified type.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflectiontype-isoftype" /></para>
      <param name="pType">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12shader/nn-d3d12shader-id3d12shaderreflectiontype">ID3D12ShaderReflectionType Interface</a>.</param>
    </summary>
  </comment>
  <comment id="ID3D12Resource::Map">
    <summary>
      <para>Gets a CPU pointer to the specified subresource in the resource, but may not disclose the pointer value to applications. Map also invalidates the CPU cache, when necessary, so that CPU reads to this address reflect any modifications made by the GPU.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12resource-map" /></para>
      <param name="Subresource">Specifies the index number of the subresource.</param>
      <param name="pReadRange">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_range">D3D12_RANGE</a> structure that describes the range of memory to access.

This indicates the region the CPU might read, and the coordinates are subresource-relative. A null pointer indicates the entire subresource might be read by the CPU. It is valid to specify the CPU won't read any data by passing a range where <b>End</b> is less than or equal to <b>Begin</b>.</param>
      <param name="ppData">A pointer to a memory block that receives a pointer to the resource data.

A null pointer is valid and is useful to cache a CPU virtual address range for methods like <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12resource-writetosubresource">WriteToSubresource</a>. When <i>ppData</i> is not NULL, the pointer returned is never offset by any values in <i>pReadRange</i>.</param>
    </summary>
  </comment>
  <comment id="ID3D12CommandQueue::EndEvent">
    <summary>
      <para>Not intended to be called directly.  Use the PIX event runtime to insert events into a command queue.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12commandqueue-endevent" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS">
    <summary>
      <para>Describes a resource to resolve to at the conclusion of a render pass.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_render_pass_ending_access_resolve_parameters" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS::pSrcResource">
    <summary>A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a>. The source resource.</summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS::pDstResource">
    <summary>A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a>. The destination resource.</summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS::SubresourceCount">
    <summary>A <b>UINT</b>. The number of subresources.</summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS::pSubresourceParameters">
    <summary>A pointer to a constant array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_render_pass_ending_access_resolve_subresource_parameters">D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_SUBRESOURCE_PARAMETERS</a>. These subresources can be a subset of the render target's array slices, but you can't target subresources that aren't part of the render target view (RTV) or the depth/stencil view (DSV).

&gt; [!NOTE]
&gt; This pointer is directly referenced by the command list, and the memory for this array must remain alive and intact until <a href="https://docs.microsoft.comnf-d3d12-id3d12graphicscommandlist4-endrenderpass.md">EndRenderPass</a> is called.</summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS::Format">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>. The data format of the resources.</summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS::ResolveMode">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_resolve_mode">D3D12_RESOLVE_MODE</a>. The resolve operation.</summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_ENDING_ACCESS_RESOLVE_PARAMETERS::PreserveResolveSource">
    <summary>A <b>BOOL</b>. <b>TRUE</b> to preserve the resolve source, otherwise <b>FALSE</b>.</summary>
  </comment>
  <comment id="D3D12_BUFFER_UAV_FLAGS">
    <summary>
      <para>Identifies unordered-access view options for a buffer resource.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_buffer_uav_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_BUFFER_UAV_FLAGS::D3D12_BUFFER_UAV_FLAG_NONE">
    <summary>Indicates a default view.</summary>
  </comment>
  <comment id="D3D12_BUFFER_UAV_FLAGS::D3D12_BUFFER_UAV_FLAG_RAW">
    <summary>Resource contains raw, unstructured data.  Requires the UAV format to be <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT_R32_TYPELESS</a>.
            For more info about raw viewing of buffers, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-resources-intro">Raw Views of Buffers</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_SHADER_CACHE">
    <summary>
      <para>Describes the level of shader caching supported in the current graphics driver.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_feature_data_shader_cache" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_SHADER_CACHE::SupportFlags">
    <summary><a href="https://docs.microsoft.com/visualstudio/code-quality/annotating-structs-and-classes?view=vs-2015">SAL</a>: <c>_Out_</c>

Indicates the level of caching supported.</summary>
  </comment>
  <comment id="D3D12_STENCIL_OP">
    <summary>
      <para>Identifies the stencil operations that can be performed during depth-stencil testing.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_stencil_op" /></para>
    </summary>
  </comment>
  <comment id="D3D12_STENCIL_OP::D3D12_STENCIL_OP_KEEP">
    <summary>Keep the existing stencil data.</summary>
  </comment>
  <comment id="D3D12_STENCIL_OP::D3D12_STENCIL_OP_ZERO">
    <summary>Set the stencil data to 0.</summary>
  </comment>
  <comment id="D3D12_STENCIL_OP::D3D12_STENCIL_OP_REPLACE">
    <summary>Set the stencil data to the reference value set by calling <a href="https://docs.microsoft.com/windows/win32/api/d3d12/nf-d3d12-id3d12graphicscommandlist-omsetstencilref">ID3D12GraphicsCommandList::OMSetStencilRef</a>.</summary>
  </comment>
  <comment id="D3D12_STENCIL_OP::D3D12_STENCIL_OP_INCR_SAT">
    <summary>Increment the stencil value by 1, and clamp the result.</summary>
  </comment>
  <comment id="D3D12_STENCIL_OP::D3D12_STENCIL_OP_DECR_SAT">
    <summary>Decrement the stencil value by 1, and clamp the result.</summary>
  </comment>
  <comment id="D3D12_STENCIL_OP::D3D12_STENCIL_OP_INVERT">
    <summary>Invert the stencil data.</summary>
  </comment>
  <comment id="D3D12_STENCIL_OP::D3D12_STENCIL_OP_INCR">
    <summary>Increment the stencil value by 1, and wrap the result if necessary.</summary>
  </comment>
  <comment id="D3D12_STENCIL_OP::D3D12_STENCIL_OP_DECR">
    <summary>Decrement the stencil value by 1, and wrap the result if necessary.</summary>
  </comment>
  <comment id="ID3D12InfoQueue::GetNumMessagesDiscardedByMessageCountLimit">
    <summary>
      <para>Get the number of messages that were discarded due to the message count limit.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getnummessagesdiscardedbymessagecountlimit" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DEBUG_DEVICE_PARAMETER_TYPE">
    <summary>
      <para>Specifies the data type of the memory pointed to by the pData parameter of ID3D12DebugDevice1::SetDebugParameter and ID3D12DebugDevice1::GetDebugParameter.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/ne-d3d12sdklayers-d3d12_debug_device_parameter_type" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DEBUG_DEVICE_PARAMETER_TYPE::D3D12_DEBUG_DEVICE_PARAMETER_FEATURE_FLAGS">
    <summary>Indicates <i>pData</i> points to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ne-d3d12sdklayers-d3d12_debug_feature">D3D12_DEBUG_FEATURE</a> value.</summary>
  </comment>
  <comment id="D3D12_DEBUG_DEVICE_PARAMETER_TYPE::D3D12_DEBUG_DEVICE_PARAMETER_GPU_BASED_VALIDATION_SETTINGS">
    <summary>Indicates <i>pData</i> points to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ns-d3d12sdklayers-d3d12_debug_device_gpu_based_validation_settings">D3D12_DEBUG_DEVICE_GPU_BASED_VALIDATION_SETTINGS</a> structure.</summary>
  </comment>
  <comment id="D3D12_DEBUG_DEVICE_PARAMETER_TYPE::D3D12_DEBUG_DEVICE_PARAMETER_GPU_SLOWDOWN_PERFORMANCE_FACTOR">
    <summary>Indicates <i>pData</i> points to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ns-d3d12sdklayers-d3d12_debug_device_gpu_slowdown_performance_factor">D3D12_DEBUG_DEVICE_GPU_SLOWDOWN_PERFORMANCE_FACTOR</a> structure.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_SERIALIZATION">
    <summary>
      <para>Indicates the level of support for heap serialization.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_feature_data_serialization" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_SERIALIZATION::NodeIndex">
    <summary>An input field, indicating the adapter index to query.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_SERIALIZATION::HeapSerializationTier">
    <summary>An output field, indicating the tier of heap serialization support.</summary>
  </comment>
  <comment id="D3D12_DRED_FLAGS">
    <summary>
      <para>Defines constants used in the D3D12_DEVICE_REMOVED_EXTENDED_DATA structure to specify control flags for the Direct3D runtime.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_dred_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DRED_FLAGS::D3D12_DRED_FLAG_NONE">
    <summary>Typically specifies that Device Removed Extended Data (DRED) is disabled, except for when user-initiated feedback is used to produce a repro, or when otherwise enabled by Windows via automatic detection of process-instability issues. This is the default value.</summary>
  </comment>
  <comment id="D3D12_DRED_FLAGS::D3D12_DRED_FLAG_FORCE_ENABLE">
    <summary>Forces DRED to be enabled, regardless of the system state.</summary>
  </comment>
  <comment id="D3D12_DRED_FLAGS::D3D12_DRED_FLAG_DISABLE_AUTOBREADCRUMBS">
    <summary>Disables DRED auto breadcrumbs.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_STATUS">
    <summary>
      <para>Specifes the status of a video decode operation.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ne-d3d12video-d3d12_video_decode_status" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_STATUS::D3D12_VIDEO_DECODE_STATUS_OK">
    <summary>The operation succeeded.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_STATUS::D3D12_VIDEO_DECODE_STATUS_CONTINUE">
    <summary>There was a minor problem in the data format, but the host decoder should continue processing.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_STATUS::D3D12_VIDEO_DECODE_STATUS_CONTINUE_SKIP_DISPLAY">
    <summary>There was a significant problem in the data format. The host decoder should continue processing, but should skip display.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_STATUS::D3D12_VIDEO_DECODE_STATUS_RESTART">
    <summary>There was a severe problem in the data format. The host decoder should restart the entire decoding process, starting at a sequence or random-access entry point.</summary>
  </comment>
  <comment id="ID3D12CommandQueue::GetDesc">
    <summary>
      <para>Gets the description of the command queue.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12commandqueue-getdesc" /></para>
    </summary>
  </comment>
  <comment id="D3D12EnableExperimentalFeatures">
    <summary>
      <para>Enables a list of experimental features.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12enableexperimentalfeatures" /></para>
      <param name="NumFeatures">The number of experimental features to enable.</param>
      <param name="pIIDs"><a href="https://docs.microsoft.com/visualstudio/code-quality/annotating-function-parameters-and-return-values?view=vs-2015">SAL</a>: <c>__in_ecount(NumFeatures)</c>

A pointer to an array of IDs that specify which of the available experimental features to enable.</param>
      <param name="pConfigurationStructs"><a href="https://docs.microsoft.com/visualstudio/code-quality/annotating-function-parameters-and-return-values?view=vs-2015">SAL</a>: <c>__in_ecount(NumFeatures)</c>

Structures that contain additional configuration details that some experimental features might need to be enabled.</param>
      <param name="pConfigurationStructSizes"><a href="https://docs.microsoft.com/visualstudio/code-quality/annotating-function-parameters-and-return-values?view=vs-2015">SAL</a>: <c>__in_ecount(NumFeatures)</c>

The sizes of any configuration structs passed in pConfigurationStructs parameter.</param>
    </summary>
  </comment>
  <comment id="ID3D12Device5::GetRaytracingAccelerationStructurePrebuildInfo">
    <summary>
      <para>Query the driver for resource requirements to build an acceleration structure.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device5-getraytracingaccelerationstructureprebuildinfo" /></para>
      <param name="pDesc">Description of the acceleration structure build. This structure is shared with <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12graphicscommandlist4-buildraytracingaccelerationstructure">BuildRaytracingAccelerationStructure</a>.  For more information, see <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_build_raytracing_acceleration_structure_inputs">D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS</a>.

The implementation is allowed to look at all the CPU parameters in this struct and nested structs.  It may not inspect/dereference any GPU virtual addresses, other than to check to see if a pointer is NULL or not, such as the optional transform in <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_raytracing_geometry_triangles_desc">D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC</a>, without dereferencing it. In other words, the calculation of resource requirements for the acceleration structure does not depend on the actual geometry data (such as vertex positions), rather it can only depend on overall properties, such as the number of triangles, number of instances etc.</param>
      <param name="pInfo">The result of the query.</param>
    </summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList1::AtomicCopyBufferUINT64">
    <summary>
      <para>Atomically copies a primary data element of type UINT64 from one resource to another, along with optional dependent resources.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist1-atomiccopybufferuint64" /></para>
      <param name="pDstBuffer"><a href="https://docs.microsoft.com/visualstudio/code-quality/annotating-function-parameters-and-return-values?view=vs-2015">SAL</a>: <c>_In_</c>

The resource that the UINT64 primary data element is copied into.</param>
      <param name="DstOffset">An offset into the destination resource buffer that specifies where the primary data element is copied into, in bytes. This offset combined with the base address of the resource buffer must result in a memory address that's naturally aligned for UINT64 values.</param>
      <param name="pSrcBuffer"><a href="https://docs.microsoft.com/visualstudio/code-quality/annotating-function-parameters-and-return-values?view=vs-2015">SAL</a>: <c>_In_</c>

The resource that the UINT64 primary data element is copied from. This data is typically an address, index, or other handle that shader code can use to locate the most-recent version of latency-sensitive information.</param>
      <param name="SrcOffset">An offset into the source resource buffer that specifies where the primary data element is copied from, in bytes. This offset combined with the base address of the resource buffer must result in a memory address that's naturally aligned for UINT64 values.</param>
      <param name="Dependencies">The number of dependent resources.</param>
      <param name="ppDependentResources"><a href="https://docs.microsoft.com/visualstudio/code-quality/annotating-function-parameters-and-return-values?view=vs-2015">SAL</a>: <c>_In_reads_(Dependencies)</c>

An array of resources that contain the dependent elements of the data payload.</param>
      <param name="pDependentSubresourceRanges"><a href="https://docs.microsoft.com/visualstudio/code-quality/annotating-function-parameters-and-return-values?view=vs-2015">SAL</a>: <c>_In_reads_(Dependencies)</c>

An array of subresource ranges that specify the dependent elements of the data payload. These elements are completely updated before the primary data element is itself atomically copied. This ensures that the entire operation is logically atomic; that is, the primary data element never refers to an incomplete data payload.</param>
    </summary>
  </comment>
  <comment id="D3D12_LIFETIME_STATE">
    <summary>
      <para>Defines constants that specify the lifetime state of a lifetime-tracked object.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_lifetime_state" /></para>
    </summary>
  </comment>
  <comment id="D3D12_LIFETIME_STATE::D3D12_LIFETIME_STATE_IN_USE">
    <summary>Specifies that the lifetime-tracked object is in use.</summary>
  </comment>
  <comment id="D3D12_LIFETIME_STATE::D3D12_LIFETIME_STATE_NOT_IN_USE">
    <summary>Specifies that the lifetime-tracked object is not in use.</summary>
  </comment>
  <comment id="D3D12SerializeRootSignature">
    <summary>
      <para>Serializes a root signature version 1.0 that can be passed to ID3D12Device::CreateRootSignature.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12serializerootsignature" /></para>
      <param name="pRootSignature">The description of the root signature, as a pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_root_signature_desc">D3D12_ROOT_SIGNATURE_DESC</a> structure.</param>
      <param name="Version">A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d_root_signature_version">D3D_ROOT_SIGNATURE_VERSION</a>-typed value that specifies the version of root signature.</param>
      <param name="ppBlob">A pointer to a memory block that receives a pointer to the <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a> interface that you can use to access the serialized root signature.</param>
      <param name="ppErrorBlob">A pointer to a memory block that receives a pointer to the <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a> interface that you can use to access serializer error messages, or <b>NULL</b> if there are no errors.</param>
    </summary>
  </comment>
  <comment id="ID3D12InfoQueue::GetNumMessagesDeniedByStorageFilter">
    <summary>
      <para>Get the number of messages that were denied passage through a storage filter.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getnummessagesdeniedbystoragefilter" /></para>
    </summary>
  </comment>
  <comment id="ID3D12ShaderReflection::GetDesc">
    <summary>
      <para>Gets a shader description.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getdesc" /></para>
      <param name="pDesc">A shader description, as a pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12shader/ns-d3d12shader-d3d12_shader_desc">D3D12_SHADER_DESC</a> structure.</param>
    </summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_RANGE1">
    <summary>
      <para>Describes a descriptor range, with flags to determine their volatility.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_descriptor_range1" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_RANGE1::RangeType">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_descriptor_range_type">D3D12_DESCRIPTOR_RANGE_TYPE</a>-typed value that specifies the type of descriptor range.</summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_RANGE1::NumDescriptors">
    <summary>The number of descriptors in the range. Use -1 or UINT_MAX to specify unbounded size. Only the last entry in a table can have unbounded size.</summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_RANGE1::BaseShaderRegister">
    <summary>The base shader register in the range. For example, for shader-resource views (SRVs), 3 maps to ": register(t3);" in HLSL.</summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_RANGE1::RegisterSpace">
    <summary>The register space. Can typically be 0, but allows multiple descriptor  arrays of unknown size to not appear to overlap.
            For example, for SRVs, by extending the example in the <b>BaseShaderRegister</b> member description, 5 maps to ": register(t3,space5);" in HLSL.</summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_RANGE1::Flags">
    <summary>Specifies the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_descriptor_range_flags">D3D12_DESCRIPTOR_RANGE_FLAGS</a> that determine descriptor and data volatility.</summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_RANGE1::OffsetInDescriptorsFromTableStart">
    <summary>The offset in descriptors from the start of the root signature. This value can be <b>D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND</b>, which indicates this range should immediately follow the preceding range.</summary>
  </comment>
  <comment id="D3D12_TEX1D_ARRAY_RTV">
    <summary>
      <para>Describes the subresources from an array of 1D textures to use in a render-target view.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_tex1d_array_rtv" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TEX1D_ARRAY_RTV::MipSlice">
    <summary>The index of the mipmap level to use mip slice.</summary>
  </comment>
  <comment id="D3D12_TEX1D_ARRAY_RTV::FirstArraySlice">
    <summary>The index of the first texture to use in an array of textures.</summary>
  </comment>
  <comment id="D3D12_TEX1D_ARRAY_RTV::ArraySize">
    <summary>Number of textures to use.</summary>
  </comment>
  <comment id="ID3D12Device::CreateConstantBufferView">
    <summary>
      <para>Creates a constant-buffer view for accessing resource data.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createconstantbufferview" /></para>
      <param name="pDesc">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_constant_buffer_view_desc">D3D12_CONSTANT_BUFFER_VIEW_DESC</a> structure that describes the constant-buffer view.</param>
      <param name="DestDescriptor">Describes the CPU descriptor handle that represents the start of the heap that holds the constant-buffer view.</param>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_SUPPORT_FLAGS">
    <summary>
      <para>Specifies whether a video decoding operation is supported.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ne-d3d12video-d3d12_video_decode_support_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_SUPPORT_FLAGS::D3D12_VIDEO_DECODE_SUPPORT_FLAG_NONE">
    <summary>The video decoding operation isn't supported.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_SUPPORT_FLAGS::D3D12_VIDEO_DECODE_SUPPORT_FLAG_SUPPORTED">
    <summary>The video decoding operation is supported.</summary>
  </comment>
  <comment id="D3D12_VIDEO_EXTENSION_COMMAND_DESC">
    <summary>
      <para>Describes a video extension command.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_video_extension_command_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_EXTENSION_COMMAND_DESC::NodeMask">
    <summary>For single GPU operation, set this to zero. If there are multiple GPU nodes, set a bit to identify the node (the device's physical adapter) to which the command queue applies. Each bit in the mask corresponds to a single node. Only 1 bit may be set.</summary>
  </comment>
  <comment id="D3D12_VIDEO_EXTENSION_COMMAND_DESC::CommandId">
    <summary>The unique identifier for the video extension command.</summary>
  </comment>
  <comment id="D3D12_MESSAGE_CATEGORY">
    <summary>
      <para>Specifies categories of debug messages.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/ne-d3d12sdklayers-d3d12_message_category" /></para>
    </summary>
  </comment>
  <comment id="D3D12_MESSAGE_CATEGORY::D3D12_MESSAGE_CATEGORY_APPLICATION_DEFINED">
    <summary>Indicates a user defined message, see <a href="https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-addmessage">ID3D12InfoQueue::AddMessage</a>.</summary>
  </comment>
  <comment id="D3D12_DRAW_ARGUMENTS">
    <summary>
      <para>Describes parameters for drawing instances.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_draw_arguments" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DRAW_ARGUMENTS::VertexCountPerInstance">
    <summary>Specifies the number of vertices to draw, per instance.</summary>
  </comment>
  <comment id="D3D12_DRAW_ARGUMENTS::InstanceCount">
    <summary>Specifies the number of instances.</summary>
  </comment>
  <comment id="D3D12_DRAW_ARGUMENTS::StartVertexLocation">
    <summary>Specifies an index to the first vertex to start drawing from.</summary>
  </comment>
  <comment id="D3D12_DRAW_ARGUMENTS::StartInstanceLocation">
    <summary>Specifies an index to the first instance to start drawing from.</summary>
  </comment>
  <comment id="ID3D12DebugDevice">
    <summary>
      <para>This interface represents a graphics device for debugging.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nn-d3d12sdklayers-id3d12debugdevice" /></para>
    </summary>
  </comment>
  <comment id="ID3D12DescriptorHeap::GetCPUDescriptorHandleForHeapStart">
    <summary>
      <para>Gets the CPU descriptor handle that represents the start of the heap.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12descriptorheap-getcpudescriptorhandleforheapstart" /></para>
    </summary>
  </comment>
  <comment id="ID3D12StateObjectProperties">
    <summary>
      <para>Provides methods for getting and setting the properties of an ID3D12StateObject.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12stateobjectproperties" /></para>
    </summary>
  </comment>
  <comment id="ID3D12PipelineLibrary1">
    <summary>
      <para>Manages a pipeline library. This interface extends ID3D12PipelineLibrary to load PSOs from a pipeline state stream description.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12pipelinelibrary1" /></para>
    </summary>
  </comment>
  <comment id="ID3D12ShaderReflectionType::GetBaseClass">
    <summary>
      <para>Gets an ID3D12ShaderReflectionType Interface interface containing the variable base class type.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflectiontype-getbaseclass" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DSV_DIMENSION">
    <summary>
      <para>Specifies how to access a resource used in a depth-stencil view.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_dsv_dimension" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DSV_DIMENSION::D3D12_DSV_DIMENSION_UNKNOWN">
    <summary><b>D3D12_DSV_DIMENSION_UNKNOWN</b> is not a valid value for <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_depth_stencil_view_desc">D3D12_DEPTH_STENCIL_VIEW_DESC</a> and is not used.</summary>
  </comment>
  <comment id="D3D12_DSV_DIMENSION::D3D12_DSV_DIMENSION_TEXTURE1D">
    <summary>The resource will be accessed as a 1D texture.</summary>
  </comment>
  <comment id="D3D12_DSV_DIMENSION::D3D12_DSV_DIMENSION_TEXTURE1DARRAY">
    <summary>The resource will be accessed as an array of 1D textures.</summary>
  </comment>
  <comment id="D3D12_DSV_DIMENSION::D3D12_DSV_DIMENSION_TEXTURE2D">
    <summary>The resource will be accessed as a 2D texture.</summary>
  </comment>
  <comment id="D3D12_DSV_DIMENSION::D3D12_DSV_DIMENSION_TEXTURE2DARRAY">
    <summary>The resource will be accessed as an array of 2D textures.</summary>
  </comment>
  <comment id="D3D12_DSV_DIMENSION::D3D12_DSV_DIMENSION_TEXTURE2DMS">
    <summary>The resource will be accessed as a 2D texture with multi sampling.</summary>
  </comment>
  <comment id="D3D12_DSV_DIMENSION::D3D12_DSV_DIMENSION_TEXTURE2DMSARRAY">
    <summary>The resource will be accessed as an array of 2D textures with multi sampling.</summary>
  </comment>
  <comment id="ID3D12VideoDecoder">
    <summary>
      <para>Represents a Direct3D 12 video decoder.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/nn-d3d12video-id3d12videodecoder" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RENDER_TARGET_BLEND_DESC">
    <summary>
      <para>Describes the blend state for a render target.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_render_target_blend_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RENDER_TARGET_BLEND_DESC::BlendEnable">
    <summary>Specifies whether to enable (or disable) blending. Set to <b>TRUE</b> to enable blending.

&gt; [!NOTE]
&gt; It's not valid for <i>LogicOpEnable</i> and <i>BlendEnable</i> to both be <b>TRUE</b>.</summary>
  </comment>
  <comment id="D3D12_RENDER_TARGET_BLEND_DESC::LogicOpEnable">
    <summary>Specifies whether to enable (or disable) a logical operation. Set to <b>TRUE</b> to enable a logical operation.

&gt; [!NOTE]
&gt; It's not valid for <i>LogicOpEnable</i> and <i>BlendEnable</i> to both be <b>TRUE</b>.</summary>
  </comment>
  <comment id="D3D12_RENDER_TARGET_BLEND_DESC::SrcBlend">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_blend">D3D12_BLEND</a>-typed value that specifies the operation to perform on the RGB value that the pixel shader outputs. The <b>BlendOp</b> member defines how to combine the <b>SrcBlend</b> and <b>DestBlend</b> operations.</summary>
  </comment>
  <comment id="D3D12_RENDER_TARGET_BLEND_DESC::DestBlend">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_blend">D3D12_BLEND</a>-typed value that specifies the operation to perform on the current RGB value in the render target. The <b>BlendOp</b> member defines how to combine the <b>SrcBlend</b> and <b>DestBlend</b> operations.</summary>
  </comment>
  <comment id="D3D12_RENDER_TARGET_BLEND_DESC::BlendOp">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_blend_op">D3D12_BLEND_OP</a>-typed value that defines how to combine the <b>SrcBlend</b> and <b>DestBlend</b> operations.</summary>
  </comment>
  <comment id="D3D12_RENDER_TARGET_BLEND_DESC::SrcBlendAlpha">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_blend">D3D12_BLEND</a>-typed value that specifies the operation to perform on the alpha value that the pixel shader outputs. Blend options that end in _COLOR are not allowed. The <b>BlendOpAlpha</b> member defines how to combine the <b>SrcBlendAlpha</b> and <b>DestBlendAlpha</b> operations.</summary>
  </comment>
  <comment id="D3D12_RENDER_TARGET_BLEND_DESC::DestBlendAlpha">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_blend">D3D12_BLEND</a>-typed value that specifies the operation to perform on the current alpha value in the render target. Blend options that end in _COLOR are not allowed. The <b>BlendOpAlpha</b> member defines how to combine the <b>SrcBlendAlpha</b> and <b>DestBlendAlpha</b> operations.</summary>
  </comment>
  <comment id="D3D12_RENDER_TARGET_BLEND_DESC::BlendOpAlpha">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_blend_op">D3D12_BLEND_OP</a>-typed value that defines how to combine the <b>SrcBlendAlpha</b> and <b>DestBlendAlpha</b> operations.</summary>
  </comment>
  <comment id="D3D12_RENDER_TARGET_BLEND_DESC::LogicOp">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_logic_op">D3D12_LOGIC_OP</a>-typed value that specifies the logical operation to configure for the render target.</summary>
  </comment>
  <comment id="D3D12_RENDER_TARGET_BLEND_DESC::RenderTargetWriteMask">
    <summary>A combination of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_color_write_enable">D3D12_COLOR_WRITE_ENABLE</a>-typed values that are combined by using a bitwise OR operation. The resulting value specifies a write mask.</summary>
  </comment>
  <comment id="D3D12_CACHED_PIPELINE_STATE">
    <summary>
      <para>Stores a pipeline state.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_cached_pipeline_state" /></para>
    </summary>
  </comment>
  <comment id="D3D12_CACHED_PIPELINE_STATE::pCachedBlob">
    <summary>Specifies pointer that references the memory location of the cache.</summary>
  </comment>
  <comment id="D3D12_CACHED_PIPELINE_STATE::CachedBlobSizeInBytes">
    <summary>Specifies the size of the cache in bytes.</summary>
  </comment>
  <comment id="ID3D12ShaderReflectionType::GetInterfaceByIndex">
    <summary>
      <para>Gets an interface by index.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflectiontype-getinterfacebyindex" /></para>
      <param name="uIndex">Zero-based index.</param>
    </summary>
  </comment>
  <comment id="D3D12_INDIRECT_ARGUMENT_DESC">
    <summary>
      <para>Describes an indirect argument (an indirect parameter), for use with a command signature.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_indirect_argument_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_INDIRECT_ARGUMENT_DESC::Type">
    <summary>A single <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_indirect_argument_type">D3D12_INDIRECT_ARGUMENT_TYPE</a> enumeration constant.</summary>
  </comment>
  <comment id="D3D12_INDIRECT_ARGUMENT_DESC::Slot">
    <summary>Specifies the slot containing the vertex buffer address.</summary>
  </comment>
  <comment id="D3D12_INDIRECT_ARGUMENT_DESC::RootParameterIndex">
    <summary>Specifies the root index of the constant.</summary>
  </comment>
  <comment id="D3D12_INDIRECT_ARGUMENT_DESC::DestOffsetIn32BitValues">
    <summary>The offset, in 32-bit values, to set the first constant of the group.
                Supports multi-value constants at a given root index.
                Root constant entries must be sorted from smallest to largest DestOffsetIn32BitValues.</summary>
  </comment>
  <comment id="D3D12_INDIRECT_ARGUMENT_DESC::Num32BitValuesToSet">
    <summary>The number of 32-bit constants that are set at the given root index.
                Supports multi-value constants at a given root index.</summary>
  </comment>
  <comment id="D3D12_QUERY_TYPE">
    <summary>
      <para>Specifies the type of query.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_query_type" /></para>
    </summary>
  </comment>
  <comment id="D3D12_QUERY_TYPE::D3D12_QUERY_TYPE_OCCLUSION">
    <summary>Indicates the query is for depth/stencil occlusion counts.</summary>
  </comment>
  <comment id="D3D12_QUERY_TYPE::D3D12_QUERY_TYPE_BINARY_OCCLUSION">
    <summary>Indicates the query is for a binary depth/stencil occlusion statistics.

This new query type acts like D3D12_QUERY_TYPE_OCCLUSION except that it returns simply a binary 0/1 result:  0 indicates that no samples passed depth and stencil testing, 1 indicates that at least one sample passed depth and stencil testing.  This enables occlusion queries to not interfere with any GPU performance optimization associated with depth/stencil testing.</summary>
  </comment>
  <comment id="D3D12_QUERY_TYPE::D3D12_QUERY_TYPE_TIMESTAMP">
    <summary>Indicates the query is for high definition GPU and CPU timestamps.</summary>
  </comment>
  <comment id="D3D12_QUERY_TYPE::D3D12_QUERY_TYPE_PIPELINE_STATISTICS">
    <summary>Indicates the query type is for graphics pipeline statistics, refer to <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_query_data_pipeline_statistics">D3D12_QUERY_DATA_PIPELINE_STATISTICS</a>.</summary>
  </comment>
  <comment id="D3D12_QUERY_TYPE::D3D12_QUERY_TYPE_SO_STATISTICS_STREAM0">
    <summary>Stream 0 output statistics. In Direct3D 12 there is no single stream output (SO) overflow query for all the output streams. Apps need to issue multiple single-stream queries, and then correlate the results. Stream output is the ability of the GPU to write vertices to a buffer. The stream output counters monitor progress.</summary>
  </comment>
  <comment id="D3D12_QUERY_TYPE::D3D12_QUERY_TYPE_SO_STATISTICS_STREAM1">
    <summary>Stream 1 output statistics.</summary>
  </comment>
  <comment id="D3D12_QUERY_TYPE::D3D12_QUERY_TYPE_SO_STATISTICS_STREAM2">
    <summary>Stream 2 output statistics.</summary>
  </comment>
  <comment id="D3D12_QUERY_TYPE::D3D12_QUERY_TYPE_SO_STATISTICS_STREAM3">
    <summary>Stream 3 output statistics.</summary>
  </comment>
  <comment id="D3D12_QUERY_TYPE::D3D12_QUERY_TYPE_VIDEO_DECODE_STATISTICS">
    <summary>Video decode statistics. Refer to <a href="https://docs.microsoft.com../d3d12video/ns-d3d12video-d3d12_query_data_video_decode_statistics.md">D3D12_QUERY_DATA_VIDEO_DECODE_STATISTICS</a>.

Use this query type to determine if a video was successfully decoded. If decoding fails due to insufficient BitRate or FrameRate parameters set during creation of the decode heap, then the status field of the query is set to <a href="https://docs.microsoft.com../d3d12video/ne-d3d12video-d3d12_video_decode_status.md">D3D12_VIDEO_DECODE_STATUS_RATE_EXCEEDED</a> and the query also contains new BitRate and FrameRate values that would succeed.

This query type can only be performed on video decode command lists [(D3D12_COMMAND_LIST_TYPE_VIDEO_DECODE)](/windows/desktop/api/d3d12/ne-d3d12-d3d12_command_list_type). This query type does not use [ID3D12VideoDecodeCommandList::BeginQuery](../d3d12video/nf-d3d12video-id3d12videodecodecommandlist-beginquery.md), only [ID3D12VideoDecodeCommandList::EndQuery](../d3d12video/nf-d3d12video-id3d12videodecodecommandlist-endquery.md). Statistics are recorded only for the most recent [ID3D12VideoDecodeCommandList::DecodeFrame](../d3d12video/nf-d3d12video-id3d12videodecodecommandlist-decodeframe.md) call in the same command list.

Decode status structures are defined by the codec specification.</summary>
  </comment>
  <comment id="ID3D12FunctionReflection::GetResourceBindingDesc">
    <summary>
      <para>Gets a description of how a resource is bound to a function.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12functionreflection-getresourcebindingdesc" /></para>
      <param name="ResourceIndex">A zero-based resource index.</param>
      <param name="pDesc">A pointer to a <a href="https://docs.microsoft.com/windows/win32/api/d3d12shader/ns-d3d12shader-d3d12_shader_input_bind_desc">D3D12_SHADER_INPUT_BIND_DESC</a> structure that describes input binding of the resource.</param>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS">
    <summary>
      <para>Specifies the configuration for video decoding.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ne-d3d12video-d3d12_video_decode_configuration_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS::D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_NONE">
    <summary>No configuration flags.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS::D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_HEIGHT_ALIGNMENT_MULTIPLE_32_REQUIRED">
    <summary>The height of the output decoded surfaces must be a multiple of 32.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS::D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_POST_PROCESSING_SUPPORTED">
    <summary>The driver supports post processing. If this flag is set, the host decoder can set up post-processing by using the conversion flags in the <a href="ns-d3d12video-d3d12_video_decode_conversion_arguments.md">D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS</a>.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS::D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_REFERENCE_ONLY_ALLOCATIONS_REQUIRED">
    <summary>Reference resources must be allocated with the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_flags">D3D12_RESOURCE_FLAG_VIDEO_DECODE_REFERENCE_ONLY</a>  resource flag.  References textures must be separate from output textures, similar to performing a format conversion or downscale.  This flag must not be set for <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_decode_tier.md">D3D12_VIDEO_DECODE_TIER_3</a> or greater.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_CONFIGURATION_FLAGS::D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_ALLOW_RESOLUTION_CHANGE_ON_NON_KEY_FRAME">
    <summary>The decode resolution can be changed on a non-key frame.</summary>
  </comment>
  <comment id="D3D12_RESOLVE_MODE">
    <summary>
      <para>Specifies a resolve operation.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_resolve_mode" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RESOLVE_MODE::D3D12_RESOLVE_MODE_DECOMPRESS">
    <summary>Resolves compressed source samples to their uncompressed values. When using this operation, the source and destination resources must have the same sample count, unlike the min, max, and average operations that require the destination to have a sample count of 1.</summary>
  </comment>
  <comment id="D3D12_RESOLVE_MODE::D3D12_RESOLVE_MODE_MIN">
    <summary>Resolves the source samples to their minimum value. It can be used with any render target or depth stencil format.</summary>
  </comment>
  <comment id="D3D12_RESOLVE_MODE::D3D12_RESOLVE_MODE_MAX">
    <summary>Resolves the source samples to their maximum value. It can be used with any render target or depth stencil format.</summary>
  </comment>
  <comment id="D3D12_RESOLVE_MODE::D3D12_RESOLVE_MODE_AVERAGE">
    <summary>Resolves the source samples to their average value. It can be used with any non-integer render target format, including the depth plane. It can't be used with integer render target formats, including the stencil plane.</summary>
  </comment>
  <comment id="ID3D12ShaderReflection::GetMinFeatureLevel">
    <summary>
      <para>Gets the minimum feature level.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getminfeaturelevel" /></para>
    </summary>
  </comment>
  <comment id="D3D12_META_COMMAND_PARAMETER_TYPE">
    <summary>
      <para>Defines constants that specify the data type of a parameter to a meta command.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_meta_command_parameter_type" /></para>
    </summary>
  </comment>
  <comment id="D3D12_META_COMMAND_PARAMETER_TYPE::D3D12_META_COMMAND_PARAMETER_TYPE_FLOAT">
    <summary>Specifies that the parameter is of type <a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">FLOAT</a>.</summary>
  </comment>
  <comment id="D3D12_META_COMMAND_PARAMETER_TYPE::D3D12_META_COMMAND_PARAMETER_TYPE_UINT64">
    <summary>Specifies that the parameter is of type <a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT64</a>.</summary>
  </comment>
  <comment id="D3D12_META_COMMAND_PARAMETER_TYPE::D3D12_META_COMMAND_PARAMETER_TYPE_GPU_VIRTUAL_ADDRESS">
    <summary>Specifies that the parameter is a GPU virtual address.</summary>
  </comment>
  <comment id="D3D12_META_COMMAND_PARAMETER_TYPE::D3D12_META_COMMAND_PARAMETER_TYPE_CPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV">
    <summary>Specifies that the parameter is a CPU descriptor handle to a heap containing either constant buffer views, shader resource views, or unordered access views.</summary>
  </comment>
  <comment id="D3D12_META_COMMAND_PARAMETER_TYPE::D3D12_META_COMMAND_PARAMETER_TYPE_GPU_DESCRIPTOR_HANDLE_HEAP_TYPE_CBV_SRV_UAV">
    <summary>Specifies that the parameter is a GPU descriptor handle to a heap containing either constant buffer views, shader resource views, or unordered access views.</summary>
  </comment>
  <comment id="D3D12_RT_FORMAT_ARRAY">
    <summary>
      <para>Wraps an array of render target formats.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_rt_format_array" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RT_FORMAT_ARRAY::RTFormats">
    <summary>Specifies a fixed-size array of DXGI_FORMAT values that define the format of up to 8 render targets.</summary>
  </comment>
  <comment id="D3D12_RT_FORMAT_ARRAY::NumRenderTargets">
    <summary>Specifies the number of render target formats stored in the array.</summary>
  </comment>
  <comment id="D3D12_SHADER_VERSION_TYPE">
    <summary>
      <para>Enumerates the types of shaders that Direct3D recognizes. Used to encode the Version member of the D3D12_SHADER_DESC structure.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/ne-d3d12shader-d3d12_shader_version_type" /></para>
    </summary>
  </comment>
  <comment id="D3D12_SHADER_VERSION_TYPE::D3D12_SHVER_PIXEL_SHADER">
    <summary>Pixel shader.</summary>
  </comment>
  <comment id="D3D12_SHADER_VERSION_TYPE::D3D12_SHVER_VERTEX_SHADER">
    <summary>Vertex shader.</summary>
  </comment>
  <comment id="D3D12_SHADER_VERSION_TYPE::D3D12_SHVER_GEOMETRY_SHADER">
    <summary>Geometry shader.</summary>
  </comment>
  <comment id="D3D12_SHADER_VERSION_TYPE::D3D12_SHVER_HULL_SHADER">
    <summary>Hull shader.</summary>
  </comment>
  <comment id="D3D12_SHADER_VERSION_TYPE::D3D12_SHVER_DOMAIN_SHADER">
    <summary>Domain shader.</summary>
  </comment>
  <comment id="D3D12_SHADER_VERSION_TYPE::D3D12_SHVER_COMPUTE_SHADER">
    <summary>Compute shader.</summary>
  </comment>
  <comment id="D3D12_SHADER_VERSION_TYPE::D3D12_SHVER_RESERVED0">
    <summary>Indicates the end of the enumeration.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS">
    <summary>
      <para>Specifies flags for video processing input streams.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ne-d3d12video-d3d12_video_process_input_stream_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS::D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_NONE">
    <summary>No flags specified.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS::D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_FRAME_DISCONTINUITY">
    <summary>Set this flag when not processing frames in order, such as seeking between frames</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAGS::D3D12_VIDEO_PROCESS_INPUT_STREAM_FLAG_FRAME_REPEAT">
    <summary>Set this flag when applying video process operation to the same set of inputs.</summary>
  </comment>
  <comment id="D3D12_SAMPLER_DESC">
    <summary>
      <para>Describes a sampler state.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_sampler_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_SAMPLER_DESC::Filter">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_filter">D3D12_FILTER</a>-typed value that specifies the filtering method to use when sampling a texture.</summary>
  </comment>
  <comment id="D3D12_SAMPLER_DESC::AddressU">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_texture_address_mode">D3D12_TEXTURE_ADDRESS_MODE</a>-typed value that specifies the method to use for resolving a u texture coordinate that is outside the 0 to 1 range.</summary>
  </comment>
  <comment id="D3D12_SAMPLER_DESC::AddressV">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_texture_address_mode">D3D12_TEXTURE_ADDRESS_MODE</a>-typed value that specifies the method to use for resolving a v texture coordinate that is outside the 0 to 1 range.</summary>
  </comment>
  <comment id="D3D12_SAMPLER_DESC::AddressW">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_texture_address_mode">D3D12_TEXTURE_ADDRESS_MODE</a>-typed value that specifies the method to use for resolving a w texture coordinate that is outside the 0 to 1 range.</summary>
  </comment>
  <comment id="D3D12_SAMPLER_DESC::MipLODBias">
    <summary>Offset from the calculated mipmap level. For example, if the runtime calculates that a texture should be sampled at mipmap level 3 and <b>MipLODBias</b> is 2, the texture will be sampled at mipmap level 5.</summary>
  </comment>
  <comment id="D3D12_SAMPLER_DESC::MaxAnisotropy">
    <summary>Clamping value used if <b>D3D12_FILTER_ANISOTROPIC</b> or <b>D3D12_FILTER_COMPARISON_ANISOTROPIC</b> is specified in <b>Filter</b>. Valid values are between 1 and 16.</summary>
  </comment>
  <comment id="D3D12_SAMPLER_DESC::ComparisonFunc">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_comparison_func">D3D12_COMPARISON_FUNC</a>-typed value that specifies a function that compares sampled data against existing sampled data.</summary>
  </comment>
  <comment id="D3D12_SAMPLER_DESC::BorderColor">
    <summary>Border color to use if <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_texture_address_mode">D3D12_TEXTURE_ADDRESS_MODE_BORDER</a> is specified for <b>AddressU</b>, <b>AddressV</b>, or <b>AddressW</b>. Range must be between 0.0 and 1.0 inclusive.</summary>
  </comment>
  <comment id="D3D12_SAMPLER_DESC::MinLOD">
    <summary>Lower end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level higher than that is less detailed.</summary>
  </comment>
  <comment id="D3D12_SAMPLER_DESC::MaxLOD">
    <summary>Upper end of the mipmap range to clamp access to, where 0 is the largest and most detailed mipmap level and any level higher than that is less detailed. This value must be greater than or equal to <b>MinLOD</b>. To have no upper limit on LOD, set this member to a large value.</summary>
  </comment>
  <comment id="D3D12_DEBUG_FEATURE">
    <summary>
      <para>Flags for optional D3D12 Debug Layer features.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/ne-d3d12sdklayers-d3d12_debug_feature" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DEBUG_FEATURE::D3D12_DEBUG_FEATURE_NONE">
    <summary>The default. No optional Debug Layer features.</summary>
  </comment>
  <comment id="D3D12_DEBUG_FEATURE::D3D12_DEBUG_FEATURE_ALLOW_BEHAVIOR_CHANGING_DEBUG_AIDS">
    <summary>The Debug Layer is allowed to deliberately change functional behavior of an application in order to help identify potential errors.  By default, the Debug Layer allows most invalid API usage to run the natural course.</summary>
  </comment>
  <comment id="D3D12_DEBUG_FEATURE::D3D12_DEBUG_FEATURE_CONSERVATIVE_RESOURCE_STATE_TRACKING">
    <summary>Performs additional resource state validation of resources set in descriptors at the time <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12commandqueue-executecommandlists">ID3D12CommandQueue::ExecuteCommandLists</a> is called.  By design descriptors can be changed even after submitting command lists assuming proper synchronization.  Conservative resource state tracking ignores this allowance and validates all resources used in descriptor tables when <b>ExecuteCommandLists</b> is called.  The result may be false validation errors.</summary>
  </comment>
  <comment id="D3D12_DEBUG_FEATURE::D3D12_DEBUG_FEATURE_DISABLE_VIRTUALIZED_BUNDLES_VALIDATION">
    <summary>Disables validation of bundle commands by virtually injecting checks into the calling command list validation paths.</summary>
  </comment>
  <comment id="D3D12_DEBUG_FEATURE::D3D12_DEBUG_FEATURE_VALID_MASK">
    <summary>Internal use only.</summary>
  </comment>
  <comment id="D3D12_ROOT_DESCRIPTOR">
    <summary>
      <para>Describes descriptors inline in the root signature version 1.0 that appear in shaders.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_root_descriptor" /></para>
    </summary>
  </comment>
  <comment id="D3D12_ROOT_DESCRIPTOR::ShaderRegister">
    <summary>The shader register.</summary>
  </comment>
  <comment id="D3D12_ROOT_DESCRIPTOR::RegisterSpace">
    <summary>The register space.</summary>
  </comment>
  <comment id="D3D12_NODE_MASK">
    <summary>
      <para>A state subobject that identifies the GPU nodes to which the state object applies.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_node_mask" /></para>
    </summary>
  </comment>
  <comment id="D3D12_NODE_MASK::NodeMask">
    <summary>The node mask.</summary>
  </comment>
  <comment id="D3D12CreateRootSignatureDeserializer">
    <summary>
      <para>Deserializes a root signature so you can determine the layout definition (D3D12_ROOT_SIGNATURE_DESC).</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12createrootsignaturedeserializer" /></para>
      <param name="pSrcData">A pointer to the source data for the serialized root signature.</param>
      <param name="SrcDataSizeInBytes">The size, in bytes, of the block of memory that <i>pSrcData</i> points to.</param>
      <param name="pRootSignatureDeserializerInterface">The globally unique identifier (<b>GUID</b>) for the root signature deserializer interface. See remarks.</param>
      <param name="ppRootSignatureDeserializer">A pointer to a memory block that receives a pointer to the root signature deserializer.</param>
    </summary>
  </comment>
  <comment id="D3D12_STATE_SUBOBJECT_TYPE">
    <summary>
      <para>The type of a state subobject. Use with D3D12_STATE_SUBOBJECT.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_state_subobject_type" /></para>
    </summary>
  </comment>
  <comment id="D3D12_STATE_SUBOBJECT_TYPE::D3D12_STATE_SUBOBJECT_TYPE_STATE_OBJECT_CONFIG">
    <summary>Subobject type is <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_state_object_config">D3D12_STATE_OBJECT_CONFIG</a>.</summary>
  </comment>
  <comment id="D3D12_STATE_SUBOBJECT_TYPE::D3D12_STATE_SUBOBJECT_TYPE_GLOBAL_ROOT_SIGNATURE">
    <summary>Subobject type is <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_global_root_signature">D3D12_GLOBAL_ROOT_SIGNATURE</a>.</summary>
  </comment>
  <comment id="D3D12_STATE_SUBOBJECT_TYPE::D3D12_STATE_SUBOBJECT_TYPE_LOCAL_ROOT_SIGNATURE">
    <summary>Subobject type is <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_local_root_signature">D3D12_LOCAL_ROOT_SIGNATURE</a>.</summary>
  </comment>
  <comment id="D3D12_STATE_SUBOBJECT_TYPE::D3D12_STATE_SUBOBJECT_TYPE_NODE_MASK">
    <summary>Subobject type is <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_node_mask">D3D12_NODE_MASK</a>.

&gt; [!IMPORTANT]
&gt; On some versions of the DirectX Runtime, specifying a node via [<b>D3D12_NODE_MASK</b>](/windows/win32/api/d3d12/ns-d3d12-d3d12_node_mask) in a [<b>D3D12_STATE_SUBOBJECT</b>](/windows/win32/api/d3d12/ns-d3d12-d3d12_state_subobject) with type <b>D3D12_STATE_SUBOBJECT_TYPE_NODE_MASK</b>, the runtime will incorrectly handle a node mask value of <c>0</c>, which should use node #1, which will lead to errors when attempting to use the state object later. Specify an explicit node value of 1, or omit the [<b>D3D12_NODE_MASK</b>](/windows/win32/api/d3d12/ns-d3d12-d3d12_node_mask) subobject to avoid this issue.</summary>
  </comment>
  <comment id="D3D12_STATE_SUBOBJECT_TYPE::D3D12_STATE_SUBOBJECT_TYPE_DXIL_LIBRARY">
    <summary>Subobject type is <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_dxil_library_desc">D3D12_DXIL_LIBRARY_DESC</a>.</summary>
  </comment>
  <comment id="D3D12_STATE_SUBOBJECT_TYPE::D3D12_STATE_SUBOBJECT_TYPE_EXISTING_COLLECTION">
    <summary>Subobject type is <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_existing_collection_desc">D3D12_EXISTING_COLLECTION_DESC</a>.</summary>
  </comment>
  <comment id="D3D12_STATE_SUBOBJECT_TYPE::D3D12_STATE_SUBOBJECT_TYPE_SUBOBJECT_TO_EXPORTS_ASSOCIATION">
    <summary>Subobject type is <a href="../d3d12/ns-d3d12-d3d12_subobject_to_exports_association.md">D3D12_SUBOBJECT_TO_EXPORTS_ASSOCIATION</a>.</summary>
  </comment>
  <comment id="D3D12_STATE_SUBOBJECT_TYPE::D3D12_STATE_SUBOBJECT_TYPE_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION">
    <summary>Subobject type is <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_dxil_subobject_to_exports_association">D3D12_DXIL_SUBOBJECT_TO_EXPORTS_ASSOCIATION</a>.</summary>
  </comment>
  <comment id="D3D12_STATE_SUBOBJECT_TYPE::D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_SHADER_CONFIG">
    <summary>Subobject type is <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_raytracing_shader_config">D3D12_RAYTRACING_SHADER_CONFIG</a>.</summary>
  </comment>
  <comment id="D3D12_STATE_SUBOBJECT_TYPE::D3D12_STATE_SUBOBJECT_TYPE_RAYTRACING_PIPELINE_CONFIG">
    <summary>Subobject type is <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_raytracing_pipeline_config">D3D12_RAYTRACING_PIPELINE_CONFIG</a>.</summary>
  </comment>
  <comment id="D3D12_STATE_SUBOBJECT_TYPE::D3D12_STATE_SUBOBJECT_TYPE_HIT_GROUP">
    <summary>Subobject type is <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_hit_group_desc">D3D12_HIT_GROUP_DESC</a></summary>
  </comment>
  <comment id="D3D12_STATE_SUBOBJECT_TYPE::D3D12_STATE_SUBOBJECT_TYPE_MAX_VALID">
    <summary>The maximum valid subobject type value.</summary>
  </comment>
  <comment id="D3D12_INPUT_CLASSIFICATION">
    <summary>
      <para>Identifies the type of data contained in an input slot.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_input_classification" /></para>
    </summary>
  </comment>
  <comment id="D3D12_INPUT_CLASSIFICATION::D3D12_INPUT_CLASSIFICATION_PER_VERTEX_DATA">
    <summary>Input data is per-vertex data.</summary>
  </comment>
  <comment id="D3D12_INPUT_CLASSIFICATION::D3D12_INPUT_CLASSIFICATION_PER_INSTANCE_DATA">
    <summary>Input data is per-instance data.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList5">
    <summary>
      <para>Encapsulates a list of graphics commands for rendering, extending the interface to support variable-rate shading (VRS).</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12graphicscommandlist5" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS2">
    <summary>
      <para>Indicates the level of support that the adapter provides for depth-bounds tests and programmable sample positions.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_feature_data_d3d12_options2" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS2::DepthBoundsTestSupported">
    <summary><a href="https://docs.microsoft.com/visualstudio/code-quality/annotating-structs-and-classes?view=vs-2015">SAL</a>: <c>_Out_</c>

On return, contains true if depth-bounds tests are supported; otherwise, false.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS2::ProgrammableSamplePositionsTier">
    <summary><a href="https://docs.microsoft.com/visualstudio/code-quality/annotating-structs-and-classes?view=vs-2015">SAL</a>: <c>_Out_</c>

On return, contains a value that indicates the level of support offered for programmable sample positions.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO">
    <summary>
      <para>Represents prebuild information about a raytracing acceleration structure. Get an instance of this stucture by calling GetRaytracingAccelerationStructurePrebuildInfo.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_raytracing_acceleration_structure_prebuild_info" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO::ResultDataMaxSizeInBytes">
    <summary>Size required to hold the result of an acceleration structure build based on the specified inputs.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_PREBUILD_INFO::ScratchDataSizeInBytes">
    <summary>Scratch storage on the GPU required during acceleration structure build based on the specified inputs.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC">
    <summary>
      <para>Specifies output stream arguments for the output passed to ID3D12VideoProcessCommandList::ProcessFrames.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_video_process_output_stream_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC::Format">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a> structure specifying the format of the output resources.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC::ColorSpace">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/dxgicommon/ne-dxgicommon-dxgi_color_space_type">DXGI_COLOR_SPACE_TYPE</a> value that specifies the colorspace for the video processor output surface.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC::AlphaFillMode">
    <summary>A value from the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_process_alpha_fill_mode.md">D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE</a> enumeration specifying the alpha fill mode for data that the video processor writes to the render target.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC::AlphaFillModeSourceStreamIndex">
    <summary>The zero-based index of an input stream. This parameter is used if <i>AlphaFillMode</i> is <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_process_alpha_fill_mode.md">D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_SOURCE_STREAM</a>. Otherwise, the parameter is ignored.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC::BackgroundColor">
    <summary>The video processor uses the background color to fill areas of the target rectangle that do not contain a video image. Areas outside the target rectangle are not affected.  The meaning of the values are specified by the <i>ColorSpace</i> parameter.

| BackgroundColor   | YCbCrA   | RGBA    |
|-------------------|----------|---------|
| BackgroundColor[0]| Y        | R       |
| BackgroundColor[1]| Cb       | G       |
| BackgroundColor[2]| Cr       | B       |
| BackgroundColor[3]| A        | A       |</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC::FrameRate">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/dxgicommon/ns-dxgicommon-dxgi_rational">DXGI_RATIONAL</a> structure specifying the frame rate of the output video stream.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_OUTPUT_STREAM_DESC::EnableStereo">
    <summary>If TRUE, stereo output is enabled. Otherwise, the video processor produces mono video frames.</summary>
  </comment>
  <comment id="ID3D12InfoQueue::GetNumStoredMessages">
    <summary>
      <para>Get the number of messages currently stored in the message queue.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getnumstoredmessages" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DISPATCH_RAYS_DESC">
    <summary>
      <para>Describes the properties of a ray dispatch operation initiated with a call to ID3D12GraphicsCommandList4::DispatchRays.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_dispatch_rays_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DISPATCH_RAYS_DESC::RayGenerationShaderRecord">
    <summary>The shader record for the ray generation shader to use.  

The memory pointed to must be in state <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_states">D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE</a>.  

The address must be aligned to 64 bytes, defined as <a href="https://docs.microsoft.com/windows/desktop/direct3d12/constants">D3D12_RAYTRACING_SHADER_TABLE_BYTE_ALIGNMENT</a>, and in the range [0...4096] bytes.</summary>
  </comment>
  <comment id="D3D12_DISPATCH_RAYS_DESC::MissShaderTable">
    <summary>The shader table for miss shaders.

The stride is record stride, and must be aligned to 32 bytes, defined as <a href="https://docs.microsoft.com/windows/desktop/direct3d12/constants">D3D12_RAYTRACING_SHADER_RECORD_BYTE_ALIGNMENT</a>, and in the range [0...4096] bytes. 0 is allowed.

The memory pointed to must be in state <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_states">D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE</a>.  

The address must be aligned to 64 bytes, defined as <a href="https://docs.microsoft.com/windows/desktop/direct3d12/constants">D3D12_RAYTRACING_SHADER_TABLE_BYTE_ALIGNMENT</a>.</summary>
  </comment>
  <comment id="D3D12_DISPATCH_RAYS_DESC::HitGroupTable">
    <summary>The shader table for hit groups.

The stride is record stride, and must be aligned to 32 bytes, defined as <a href="https://docs.microsoft.com/windows/desktop/direct3d12/constants">D3D12_RAYTRACING_SHADER_RECORD_BYTE_ALIGNMENT</a>, and in the range [0...4096] bytes. 0 is allowed.

The memory pointed to must be in state <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_states">D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE</a>.  

The address must be aligned to 64 bytes, defined as <a href="https://docs.microsoft.com/windows/desktop/direct3d12/constants">D3D12_RAYTRACING_SHADER_TABLE_BYTE_ALIGNMENT</a>.</summary>
  </comment>
  <comment id="D3D12_DISPATCH_RAYS_DESC::CallableShaderTable">
    <summary>The shader table for callable shaders.

The stride is record stride, and must be aligned to 32 bytes, defined as <a href="https://docs.microsoft.com/windows/desktop/direct3d12/constants">D3D12_RAYTRACING_SHADER_RECORD_BYTE_ALIGNMENT</a>. 0 is allowed.

The memory pointed to must be in state <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_states">D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE</a>.  

The address must be aligned to 64 bytes, defined as <a href="https://docs.microsoft.com/windows/desktop/direct3d12/constants">D3D12_RAYTRACING_SHADER_TABLE_BYTE_ALIGNMENT</a>.</summary>
  </comment>
  <comment id="D3D12_DISPATCH_RAYS_DESC::Width">
    <summary>The width of the generation shader thread grid.</summary>
  </comment>
  <comment id="D3D12_DISPATCH_RAYS_DESC::Height">
    <summary>The height of the generation shader thread grid.</summary>
  </comment>
  <comment id="D3D12_DISPATCH_RAYS_DESC::Depth">
    <summary>The depth of the generation shader thread grid.</summary>
  </comment>
  <comment id="ID3D12ShaderReflectionType::ImplementsInterface">
    <summary>
      <para>Indicates whether a class type implements an interface.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflectiontype-implementsinterface" /></para>
      <param name="pBase">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12shader/nn-d3d12shader-id3d12shaderreflectiontype">ID3D12ShaderReflectionType Interface</a>.</param>
    </summary>
  </comment>
  <comment id="ID3D12RootSignatureDeserializer">
    <summary>
      <para>Contains a method to return the deserialized D3D12_ROOT_SIGNATURE_DESC data structure, of a serialized root signature version 1.0.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12rootsignaturedeserializer" /></para>
    </summary>
  </comment>
  <comment id="D3D12CreateDevice">
    <summary>
      <para>Creates a device that represents the display adapter.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12createdevice" /></para>
      <param name="pAdapter">A pointer to the video adapter to use when creating a <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-devices-intro">device</a>.
            Pass <b>NULL</b> to use the default adapter, which is the first adapter that is enumerated by <a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nf-dxgi-idxgifactory-enumadapters">IDXGIFactory1::EnumAdapters</a>.
            

<div class="alert"><b>Note</b>  Don't mix the use of DXGI 1.0 (<a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgifactory">IDXGIFactory</a>) and DXGI 1.1 (<a href="https://docs.microsoft.com/windows/desktop/api/dxgi/nn-dxgi-idxgifactory1">IDXGIFactory1</a>) in an application.
              Use <b>IDXGIFactory</b> or <b>IDXGIFactory1</b>, but not both in an application.
            </div>
<div> </div></param>
      <param name="MinimumFeatureLevel">The minimum <a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_feature_level">D3D_FEATURE_LEVEL</a> required for successful device creation.</param>
      <param name="riid">The globally unique identifier (<b>GUID</b>) for the device interface.
            This parameter, and <i>ppDevice</i>, can be addressed with the single macro
          <a href="https://docs.microsoft.com/windows/desktop/api/combaseapi/nf-combaseapi-iid_ppv_args">IID_PPV_ARGS</a>.</param>
      <param name="ppDevice">A pointer to a memory block that receives a pointer to the device. Pass <b>NULL</b> to test if device creation would succeed, but to not actually create the device. If <b>NULL</b> is passed and device creation would succeed, <b>S_FALSE</b> is returned.</param>
    </summary>
  </comment>
  <comment id="ID3D12Device::CopyDescriptorsSimple">
    <summary>
      <para>Copies descriptors from a source to a destination.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-copydescriptorssimple" /></para>
      <param name="NumDescriptors">The number of descriptors to copy.</param>
      <param name="DestDescriptorRangeStart">A <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_cpu_descriptor_handle">D3D12_CPU_DESCRIPTOR_HANDLE</a></b> that describes the destination descriptors to start to copy to.

The destination and source descriptors must be in heaps of the same <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_descriptor_heap_type">D3D12_DESCRIPTOR_HEAP_TYPE</a>.</param>
      <param name="SrcDescriptorRangeStart">A <b><a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_cpu_descriptor_handle">D3D12_CPU_DESCRIPTOR_HANDLE</a></b> that describes the source descriptors to start to copy from.

&gt; [!IMPORTANT]
&gt; The <i>SrcDescriptorRangeStart</i> parameter must be in a non shader-visible descriptor heap. This is because shader-visible descriptor heaps may be created in <b>WRITE_COMBINE</b> memory or GPU local memory, which is prohibitively slow to read from. If your application manages descriptor heaps via copying the descriptors required for a given pass or frame from local "storage" descriptor heaps to the GPU-bound descriptor heap, then use shader-opaque heaps for the storage heaps and copy into the GPU-visible heap as required.</param>
      <param name="DescriptorHeapsType">The <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_descriptor_heap_type">D3D12_DESCRIPTOR_HEAP_TYPE</a>-typed value that specifies the type of descriptor heap to copy with. This is required as different descriptor types may have different sizes.

Both the source and destination descriptor heaps must have the same type, else the debug layer will emit an error.</param>
    </summary>
  </comment>
  <comment id="ID3D12Device5::EnumerateMetaCommands">
    <summary>
      <para>Queries reflection metadata about available meta commands.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device5-enumeratemetacommands" /></para>
      <param name="pNumMetaCommands">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">UINT</a> containing the number of meta commands to query for. This field determines the size of the <i>pDescs</i> array, unless <i>pDescs</i> is <b>nullptr</b>.</param>
      <param name="pDescs">An optional pointer to an array of <a href="https://docs.microsoft.com./ns-d3d12-d3d12_meta_command_desc.md">D3D12_META_COMMAND_DESC</a> containing the descriptions of the available meta commands. Pass <c>nullptr</c> to have the number of available meta commands returned in <i>pNumMetaCommands</i>.</param>
    </summary>
  </comment>
  <comment id="ID3D12LifetimeTracker">
    <summary>
      <para>Represents facilities for controlling the lifetime a lifetime-tracked object.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12lifetimetracker" /></para>
    </summary>
  </comment>
  <comment id="ID3D12ShaderReflectionConstantBuffer">
    <summary>
      <para>This shader-reflection interface provides access to a constant buffer.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nn-d3d12shader-id3d12shaderreflectionconstantbuffer" /></para>
    </summary>
  </comment>
  <comment id="ID3D12Fence1">
    <summary>
      <para>Represents a fence. This interface extends ID3D12Fence, and supports the retrieval of the flags used to create the original fence.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12fence1" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_RANGE">
    <summary>
      <para>Describes a descriptor range.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_descriptor_range" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_RANGE::RangeType">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_descriptor_range_type">D3D12_DESCRIPTOR_RANGE_TYPE</a>-typed value that specifies the type of descriptor range.</summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_RANGE::NumDescriptors">
    <summary>The number of descriptors in the range. Use -1 or UINT_MAX to specify an unbounded size. If a given descriptor range is unbounded, then it must either be the last range in the table definition, or else the following range in the table definition must have a value for <i>OffsetInDescriptorsFromTableStart</i> that is not [D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND]().</summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_RANGE::BaseShaderRegister">
    <summary>The base shader register in the range. For example, for shader-resource views (SRVs), 3 maps to ": register(t3);" in HLSL.</summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_RANGE::RegisterSpace">
    <summary>The register space. Can typically be 0, but allows multiple descriptor  arrays of unknown size to not appear to overlap.
            For example, for SRVs, by extending the example in the <b>BaseShaderRegister</b> member description, 5 maps to ": register(t3,space5);" in HLSL.</summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_RANGE::OffsetInDescriptorsFromTableStart">
    <summary>The offset in descriptors, from the start of the descriptor table which was set as the root argument value for this parameter slot. This value can be <b>D3D12_DESCRIPTOR_RANGE_OFFSET_APPEND</b>, which indicates this range should immediately follow the preceding range.</summary>
  </comment>
  <comment id="ID3D12DebugDevice1::ReportLiveDeviceObjects">
    <summary>
      <para>Specifies the amount of information to report on a device object's lifetime.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12debugdevice1-reportlivedeviceobjects" /></para>
      <param name="Flags">A value from the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ne-d3d12sdklayers-d3d12_rldo_flags">D3D12_RLDO_FLAGS</a> enumeration. This method uses the value in <i>Flags</i> to determine the amount of information to report about a device object's lifetime.</param>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE">
    <summary>
      <para>Specifies the alpha fill mode for video processing.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ne-d3d12video-d3d12_video_process_alpha_fill_mode" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE::D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_OPAQUE">
    <summary>Alpha values inside the target rectangle are set to opaque.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE::D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_BACKGROUND">
    <summary>Alpha values inside the target rectangle are set to the alpha value specified in the background color.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE::D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_DESTINATION">
    <summary>Existing alpha values remain unchanged in the output surface.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE::D3D12_VIDEO_PROCESS_ALPHA_FILL_MODE_SOURCE_STREAM">
    <summary>Alpha values are taken from an input stream, scaled, and copied to the corresponding destination rectangle for that stream. The input stream is specified in the <i>AlphaFillModeSourceStreamIndex</i> member of <a href="ns-d3d12video-d3d12_video_process_input_stream_arguments.md">D3D12_VIDEO_PROCESS_OUTPUT_STREAM_ARGUMENTS</a>.

If the input stream does not have alpha data, the video processor sets the alpha values in the target rectangle to opaque. If the input stream is disabled or the source rectangle is empty, the alpha values in the target rectangle are not modified.</summary>
  </comment>
  <comment id="D3D12_TEXTURE_COPY_TYPE">
    <summary>
      <para>Specifies what type of texture copy is to take place.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_texture_copy_type" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TEXTURE_COPY_TYPE::D3D12_TEXTURE_COPY_TYPE_SUBRESOURCE_INDEX">
    <summary>Indicates a subresource, identified by an index, is to be copied.</summary>
  </comment>
  <comment id="D3D12_TEXTURE_COPY_TYPE::D3D12_TEXTURE_COPY_TYPE_PLACED_FOOTPRINT">
    <summary>Indicates a place footprint, identified by a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_placed_subresource_footprint">D3D12_PLACED_SUBRESOURCE_FOOTPRINT</a> structure, is to be copied.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM">
    <summary>
      <para>Contains input information for the video processor blend functionality.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_video_process_input_stream" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM::pTexture2D">
    <summary>An <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a> representing the current input field or frame.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM::Subresource">
    <summary>The subresource index to use of the <i>pInputTexture</i> argument.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM::ReferenceSet">
    <summary>A <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_process_reference_set.md">D3D12_VIDEO_PROCESS_REFERENCE_SET</a> containing the set of references for video processing. Some video processing algorithms require forward or backward frame references. For more information, see <a href="https://docs.microsoft.comne-d3d12video-d3d12_feature_video.md">D3D12_FEATURE_VIDEO_PROCESS_REFERENCE_INFO</a>.</summary>
  </comment>
  <comment id="ID3D12FunctionReflection::GetVariableByName">
    <summary>
      <para>Gets a variable by name.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12functionreflection-getvariablebyname" /></para>
      <param name="Name">A pointer to a string containing the variable name.</param>
    </summary>
  </comment>
  <comment id="ID3D12VersionedRootSignatureDeserializer::GetUnconvertedRootSignatureDesc">
    <summary>
      <para>Gets the layout of the root signature, without converting between root signature versions.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12versionedrootsignaturedeserializer-getunconvertedrootsignaturedesc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TEX2DMS_RTV">
    <summary>
      <para>Describes the subresource from a multi sampled 2D texture to use in a render-target view.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_tex2dms_rtv" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TEX2DMS_RTV::UnusedField_NothingToDefine">
    <summary>Integer of any value. See remarks.</summary>
  </comment>
  <comment id="ID3D12Device::OpenSharedHandle">
    <summary>
      <para>Opens a handle for shared resources, shared heaps, and shared fences, by using HANDLE and REFIID.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-opensharedhandle" /></para>
      <param name="NTHandle">The handle that was output by the call to 
            <a href="https://docs.microsoft.com/windows/win32/api/d3d12/nf-d3d12-id3d12device-createsharedhandle">ID3D12Device::CreateSharedHandle</a>.</param>
      <param name="riid">The globally unique identifier (<b>GUID</b>) for one of the following interfaces:
            

<ul>
<li>
<a href="https://docs.microsoft.com/windows/win32/api/d3d12/nn-d3d12-id3d12heap">ID3D12Heap</a>
</li>
<li>
<a href="https://docs.microsoft.com/windows/win32/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a>
</li>
<li>
<a href="https://docs.microsoft.com/windows/win32/api/d3d12/nn-d3d12-id3d12fence">ID3D12Fence</a>
</li>
</ul>
The <b>REFIID</b>, or <b>GUID</b>, of the interface can be obtained by using the __uuidof() macro.
            For example, __uuidof(ID3D12Heap) will get the <b>GUID</b> of the interface to a resource.</param>
      <param name="ppvObj">A pointer to a memory block that receives a pointer to one of the following interfaces:
            

<ul>
<li>
<a href="https://docs.microsoft.com/windows/win32/api/d3d12/nn-d3d12-id3d12heap">ID3D12Heap</a>
</li>
<li>
<a href="https://docs.microsoft.com/windows/win32/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a>
</li>
<li>
<a href="https://docs.microsoft.com/windows/win32/api/d3d12/nn-d3d12-id3d12fence">ID3D12Fence</a>
</li>
</ul></param>
    </summary>
  </comment>
  <comment id="ID3D12Device3">
    <summary>
      <para>Represents a virtual adapter. This interface extends ID3D12Device2 to support the creation of special-purpose diagnostic heaps in system memory that persist even in the event of a GPU-fault or device-removed scenario.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12device3" /></para>
    </summary>
  </comment>
  <comment id="ID3D12CommandQueue::CopyTileMappings">
    <summary>
      <para>Copies mappings from a source reserved resource to a destination reserved resource.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12commandqueue-copytilemappings" /></para>
      <param name="pDstResource">A pointer to the destination reserved resource.</param>
      <param name="pDstRegionStartCoordinate">A pointer to a
            <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tiled_resource_coordinate">D3D12_TILED_RESOURCE_COORDINATE</a> structure that describes the starting coordinates of the destination reserved resource.</param>
      <param name="pSrcResource">A pointer to the source reserved resource.</param>
      <param name="pSrcRegionStartCoordinate">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tiled_resource_coordinate">D3D12_TILED_RESOURCE_COORDINATE</a> structure that describes the starting coordinates of the source reserved resource.</param>
      <param name="pRegionSize">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tile_region_size">D3D12_TILE_REGION_SIZE</a> structure that describes the size of the reserved region.</param>
      <param name="Flags">One member of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_tile_mapping_flags">D3D12_TILE_MAPPING_FLAGS</a>.</param>
    </summary>
  </comment>
  <comment id="D3D12_STATE_OBJECT_TYPE">
    <summary>
      <para>Specifies the type of a state object. Use with D3D12_STATE_OBJECT_DESC.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_state_object_type" /></para>
    </summary>
  </comment>
  <comment id="D3D12_STATE_OBJECT_TYPE::D3D12_STATE_OBJECT_TYPE_COLLECTION">
    <summary>Collection state object.</summary>
  </comment>
  <comment id="D3D12_STATE_OBJECT_TYPE::D3D12_STATE_OBJECT_TYPE_RAYTRACING_PIPELINE">
    <summary>Raytracing pipeline state object.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::SetDescriptorHeaps">
    <summary>
      <para>Changes the currently bound descriptor heaps that are associated with a command list.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setdescriptorheaps" /></para>
      <param name="NumDescriptorHeaps">Number of descriptor heaps to bind.</param>
      <param name="ppDescriptorHeaps">A pointer to an array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12descriptorheap">ID3D12DescriptorHeap</a> objects for the heaps to set on the command list.

You can only bind descriptor heaps of type [<b>D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV</b>](/windows/win32/api/d3d12/nf-d3d12-id3d12graphicscommandlist-setdescriptorheaps) and [<b>D3D12_DESCRIPTOR_HEAP_TYPE_SAMPLER</b>](/windows/win32/api/d3d12/nf-d3d12-id3d12graphicscommandlist-setdescriptorheaps).

Only one descriptor heap of each type can be set at one time, which means a maximum of 2 heaps (one sampler, one CBV/SRV/UAV) can be set at one time.</param>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS">
    <summary>
      <para>Specifies the parameters for decode output conversion.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_video_decode_conversion_arguments" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS::Enable">
    <summary>A boolean value indicating whether decode conversion should be used.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS::pReferenceTexture2D">
    <summary>A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a> containing the native decoding output. When downsampling is enabled, the output at native decode resolution, color space, and format may be required for future decode submissions (as reference frames, for instance).</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS::ReferenceSubresource">
    <summary>The subresource index of the resource provided in <i>pDecodeTexture2D</i> to use.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS::OutputColorSpace">
    <summary>A value from the <a href="https://docs.microsoft.com/windows/desktop/api/dxgicommon/ne-dxgicommon-dxgi_color_space_type">DXGI_COLOR_SPACE_TYPE</a> enumeration specifying the target color space of the output.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS::DecodeColorSpace">
    <summary>A value from the <a href="https://docs.microsoft.com/windows/desktop/api/dxgicommon/ne-dxgicommon-dxgi_color_space_type">DXGI_COLOR_SPACE_TYPE</a> enumeration specifying the source-decoded color space before conversion.</summary>
  </comment>
  <comment id="ID3D12Device::CheckFeatureSupport">
    <summary>
      <para>Gets information about the features that are supported by the current graphics driver.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-checkfeaturesupport" /></para>
      <param name="Feature">A constant from the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_feature">D3D12_FEATURE</a> enumeration describing the feature(s) that you want to query for support.</param>
      <param name="pFeatureSupportData">A pointer to a data structure that corresponds to the value of the <i>Feature</i> parameter. To determine the corresponding data structure for each constant, see <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_feature">D3D12_FEATURE</a>.</param>
      <param name="FeatureSupportDataSize">The size of the structure pointed to by the <i>pFeatureSupportData</i> parameter.</param>
    </summary>
  </comment>
  <comment id="D3D12_META_COMMAND_PARAMETER_DESC">
    <summary>
      <para>Describes a parameter to a meta command.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_meta_command_parameter_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_META_COMMAND_PARAMETER_DESC::Name">
    <summary>The parameter name.</summary>
  </comment>
  <comment id="D3D12_META_COMMAND_PARAMETER_DESC::Type">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_meta_command_parameter_type">D3D12_META_COMMAND_PARAMETER_TYPE</a> specifying the parameter type.</summary>
  </comment>
  <comment id="D3D12_META_COMMAND_PARAMETER_DESC::Flags">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_meta_command_parameter_flags">D3D12_META_COMMAND_PARAMETER_FLAGS</a> specifying the parameter flags.</summary>
  </comment>
  <comment id="D3D12_META_COMMAND_PARAMETER_DESC::RequiredResourceState">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_states">D3D12_RESOURCE_STATES</a> specifying the expected state of a resource parameter.</summary>
  </comment>
  <comment id="D3D12_META_COMMAND_PARAMETER_DESC::StructureOffset">
    <summary>The 4-byte aligned offset for this parameter, within the structure containing the parameter values, which you pass when creating/initializing/executing the meta command, as appropriate.</summary>
  </comment>
  <comment id="D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC">
    <summary>
      <para>Describes a ID3D12VideoMotionEstimatorHeap. Pass this structure into ID3D12VideoDevice1::CreateVideoMotionEstimatorHeap to create an instance of ID3D12VideoMotionEstimatorHeap.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_video_motion_vector_heap_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC::NodeMask">
    <summary>The node mask specifying the physical adapter on which the video processor will be used. For single GPU operation, set this to zero. If there are multiple GPU nodes, set a bit to identify the node, i.e. the device's physical adapter, to which the command queue applies. Each bit in the mask corresponds to a single node. Only 1 bit may be set.</summary>
  </comment>
  <comment id="D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC::InputFormat">
    <summary>A value from the <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a> enumeration specifying the format of the input and reference frames.</summary>
  </comment>
  <comment id="D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC::BlockSize">
    <summary>A value from the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_motion_estimator_search_block_size.md">D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE</a> enumeration specifying the search block size the video motion estimator will use.</summary>
  </comment>
  <comment id="D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC::Precision">
    <summary>A value from the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_motion_estimator_vector_precision.md">D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION</a> enumeration specifying the vector precision the video motion estimator will use.</summary>
  </comment>
  <comment id="D3D12_VIDEO_MOTION_VECTOR_HEAP_DESC::SizeRange">
    <summary>A <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_size_range.md">D3D12_VIDEO_SIZE_RANGE</a> structure representing the minimum and maximum input and reference frame size, in pixels, that the motion estimator will accept.</summary>
  </comment>
  <comment id="ID3D12VideoMotionVectorHeap">
    <summary>
      <para>Represents a heap in which estimated motion vectors are stored.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/nn-d3d12video-id3d12videomotionvectorheap" /></para>
    </summary>
  </comment>
  <comment id="D3D12_SUBRESOURCE_FOOTPRINT">
    <summary>
      <para>Describes the format, width, height, depth, and row-pitch of the subresource into the parent resource.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_subresource_footprint" /></para>
    </summary>
  </comment>
  <comment id="D3D12_SUBRESOURCE_FOOTPRINT::Format">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>-typed value that  specifies the viewing format.</summary>
  </comment>
  <comment id="D3D12_SUBRESOURCE_FOOTPRINT::Width">
    <summary>The width of the subresource.</summary>
  </comment>
  <comment id="D3D12_SUBRESOURCE_FOOTPRINT::Height">
    <summary>The height of the subresource.</summary>
  </comment>
  <comment id="D3D12_SUBRESOURCE_FOOTPRINT::Depth">
    <summary>The depth of the subresource.</summary>
  </comment>
  <comment id="D3D12_SUBRESOURCE_FOOTPRINT::RowPitch">
    <summary>The row pitch, or width, or physical size, in bytes, of the subresource data.
            This must be a multiple of D3D12_TEXTURE_DATA_PITCH_ALIGNMENT (256), and must be greater than or equal to the size of the data within a row.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList2::WriteBufferImmediate">
    <summary>
      <para>Writes a number of 32-bit immediate values to the specified buffer locations directly from the command stream.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist2-writebufferimmediate" /></para>
      <param name="Count">The number of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_writebufferimmediate_parameter">D3D12_WRITEBUFFERIMMEDIATE_PARAMETER</a> structures that are pointed to by <i>pParams</i> and <i>pModes</i>.</param>
      <param name="pParams">The address of an array containing a number of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_writebufferimmediate_parameter">D3D12_WRITEBUFFERIMMEDIATE_PARAMETER</a> structures equal to <i>Count</i>.</param>
      <param name="pModes">The address of an array containing a number of  <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_writebufferimmediate_mode">D3D12_WRITEBUFFERIMMEDIATE_MODE</a> structures equal to <i>Count</i>. The default value is <b>null</b>; passing <b>null</b> causes the system to write all immediate values using <b>D3D12_WRITEBUFFERIMMEDIATE_MODE_DEFAULT</b>.</param>
    </summary>
  </comment>
  <comment id="D3D12_ROOT_CONSTANTS">
    <summary>
      <para>Describes constants inline in the root signature that appear in shaders as one constant buffer.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_root_constants" /></para>
    </summary>
  </comment>
  <comment id="D3D12_ROOT_CONSTANTS::ShaderRegister">
    <summary>The shader register.</summary>
  </comment>
  <comment id="D3D12_ROOT_CONSTANTS::RegisterSpace">
    <summary>The register space.</summary>
  </comment>
  <comment id="D3D12_ROOT_CONSTANTS::Num32BitValues">
    <summary>The number of constants that occupy a single shader slot (these constants appear like a single constant buffer). 
            All constants occupy a single root signature bind slot.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS">
    <summary>
      <para>Retrieves the list of supported formats.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_feature_data_video_decode_formats" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS::NodeIndex">
    <summary>For single GPU operation, set this to zero. If there are multiple GPU nodes, set a bit to identify the node (the device's physical adapter) to which the command queue applies. Each bit in the mask corresponds to a single node. Only 1 bit may be set.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS::Configuration">
    <summary>A <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_decode_configuration.md">D3D12\_VIDEO\_DECODE\_CONFIGURATION</a> structure describing the decode configuration for the list of formats.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS::FormatCount">
    <summary>The number of formats to retrieve.  This number must match the value returned from a call [ID3D12VideoDevice::CheckFeatureSupport](nf-d3d12video-id3d12videodevice-checkfeaturesupport.md) when the feature specified is <a href="https://docs.microsoft.comne-d3d12video-d3d12_feature_video.md">D3D12\_FEATURE\_VIDEO\_DECODE\_FORMAT\_COUNT</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODE_FORMATS::pOutputFormats">
    <summary>A list of <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a> structures representing the supported formats.</summary>
  </comment>
  <comment id="D3D12_TILE_COPY_FLAGS">
    <summary>
      <para>Specifies how to copy a tile.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_tile_copy_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TILE_COPY_FLAGS::D3D12_TILE_COPY_FLAG_NONE">
    <summary>No tile-copy flags are specified.</summary>
  </comment>
  <comment id="D3D12_TILE_COPY_FLAGS::D3D12_TILE_COPY_FLAG_NO_HAZARD">
    <summary>Indicates that the GPU isn't currently referencing any of the
            portions of destination memory being written.</summary>
  </comment>
  <comment id="D3D12_TILE_COPY_FLAGS::D3D12_TILE_COPY_FLAG_LINEAR_BUFFER_TO_SWIZZLED_TILED_RESOURCE">
    <summary>Indicates that the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12graphicscommandlist-copytiles">ID3D12GraphicsCommandList::CopyTiles</a> operation involves copying a linear buffer to a swizzled tiled resource. This means to copy tile data from the
            specified buffer location, reading tiles sequentially,
            to the specified tile region (in x,y,z order if the region is a box), swizzling to optimal hardware memory layout as needed.
            In this <b>ID3D12GraphicsCommandList::CopyTiles</b> call, you specify the source data with the  <i>pBuffer</i> parameter and the destination with the <i>pTiledResource</i> parameter.</summary>
  </comment>
  <comment id="D3D12_TILE_COPY_FLAGS::D3D12_TILE_COPY_FLAG_SWIZZLED_TILED_RESOURCE_TO_LINEAR_BUFFER">
    <summary>Indicates that the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12graphicscommandlist-copytiles">ID3D12GraphicsCommandList::CopyTiles</a> operation involves copying a swizzled tiled resource to a linear buffer. This means to copy tile data from the tile region, reading tiles sequentially (in x,y,z order if the region is a box),
            to the specified buffer location, deswizzling to linear memory layout as needed.
            In this <b>ID3D12GraphicsCommandList::CopyTiles</b> call, you specify the source data with the <i>pTiledResource</i> parameter and the destination with the  <i>pBuffer</i> parameter.</summary>
  </comment>
  <comment id="D3D12_DEPTH_STENCIL_VIEW_DESC">
    <summary>
      <para>Describes the subresources of a texture that are accessible from a depth-stencil view.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_depth_stencil_view_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DEPTH_STENCIL_VIEW_DESC::Format">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>-typed value that specifies the viewing format.  For allowable formats, see Remarks.</summary>
  </comment>
  <comment id="D3D12_DEPTH_STENCIL_VIEW_DESC::ViewDimension">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_dsv_dimension">D3D12_DSV_DIMENSION</a>-typed value that specifies how the depth-stencil resource will be accessed. This member also determines which _DSV to use in the following union.</summary>
  </comment>
  <comment id="D3D12_DEPTH_STENCIL_VIEW_DESC::Flags">
    <summary>A combination of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_dsv_flags">D3D12_DSV_FLAGS</a> enumeration constants that are combined by using a bitwise OR operation. 
            The resulting value specifies whether the texture is read only.  
            Pass 0 to specify that it isn't read only; otherwise, pass one or more of the members of the <b>D3D12_DSV_FLAGS</b> enumerated type.</summary>
  </comment>
  <comment id="D3D12_DEPTH_STENCIL_VIEW_DESC::Texture1D">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tex1d_dsv">D3D12_TEX1D_DSV</a> structure that specifies a 1D texture subresource.</summary>
  </comment>
  <comment id="D3D12_DEPTH_STENCIL_VIEW_DESC::Texture1DArray">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tex1d_array_dsv">D3D12_TEX1D_ARRAY_DSV</a> structure that specifies an array of 1D texture subresources.</summary>
  </comment>
  <comment id="D3D12_DEPTH_STENCIL_VIEW_DESC::Texture2D">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tex2d_dsv">D3D12_TEX2D_DSV</a> structure that specifies a 2D texture subresource.</summary>
  </comment>
  <comment id="D3D12_DEPTH_STENCIL_VIEW_DESC::Texture2DArray">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tex2d_array_dsv">D3D12_TEX2D_ARRAY_DSV</a> structure that specifies an array of 2D texture subresources.</summary>
  </comment>
  <comment id="D3D12_DEPTH_STENCIL_VIEW_DESC::Texture2DMS">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tex2dms_dsv">D3D12_TEX2DMS_DSV</a> structure that specifies a multisampled 2D texture.</summary>
  </comment>
  <comment id="D3D12_DEPTH_STENCIL_VIEW_DESC::Texture2DMSArray">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_tex2dms_array_dsv">D3D12_TEX2DMS_ARRAY_DSV</a> structure that specifies an array of multisampled 2D textures.</summary>
  </comment>
  <comment id="D3D12_DRED_ALLOCATION_NODE">
    <summary>
      <para>Describes, as a node in a linked list, data about an allocation tracked by Device Removed Extended Data (DRED).</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_dred_allocation_node" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DRED_ALLOCATION_NODE::ObjectNameA">
    <summary>A pointer to the ANSI debug name of the allocated runtime object.</summary>
  </comment>
  <comment id="D3D12_DRED_ALLOCATION_NODE::ObjectNameW">
    <summary>A pointer to the wide debug name of the allocated runtime object.</summary>
  </comment>
  <comment id="D3D12_DRED_ALLOCATION_NODE::AllocationType">
    <summary>A <a href="https://docs.microsoft.comne-d3d12-d3d12_dred_allocation_type.md">D3D12_DRED_ALLOCATION_TYPE</a> value representing the runtime object's allocation type.</summary>
  </comment>
  <comment id="D3D12_DRED_ALLOCATION_NODE::pNext">
    <summary>A pointer to a constant <b>D3D12_DRED_ALLOCATION_NODE</b> representing the next allocation node in the list, or <c>nullptr</c> if this is the last node.</summary>
  </comment>
  <comment id="ID3D12InfoQueue::PushCopyOfStorageFilter">
    <summary>
      <para>Push a copy of storage filter currently on the top of the storage-filter stack onto the storage-filter stack.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-pushcopyofstoragefilter" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FILTER_TYPE">
    <summary>
      <para>Specifies the type of magnification or minification sampler filters.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_filter_type" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FILTER_TYPE::D3D12_FILTER_TYPE_POINT">
    <summary>Point filtering is used as a texture magnification or minification filter. The texel with coordinates nearest to the desired pixel value is used. The texture filter to be used between mipmap levels is nearest-point mipmap filtering. The rasterizer uses the color from the texel of the nearest mipmap texture.</summary>
  </comment>
  <comment id="D3D12_FILTER_TYPE::D3D12_FILTER_TYPE_LINEAR">
    <summary>Bilinear interpolation filtering is used as a texture magnification or minification filter. A weighted average of a 2 x 2 area of texels surrounding the desired pixel is used. The texture filter to use between mipmap levels is trilinear mipmap interpolation. The rasterizer linearly interpolates pixel color, using the texels of the two nearest mipmap textures.</summary>
  </comment>
  <comment id="D3D12_VIEW_INSTANCING_DESC">
    <summary>
      <para>Specifies parameters used during view instancing configuration.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_view_instancing_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIEW_INSTANCING_DESC::ViewInstanceCount">
    <summary>Specifies the number of views to be used, up to D3D12_MAX_VIEW_INSTANCE_COUNT.</summary>
  </comment>
  <comment id="D3D12_VIEW_INSTANCING_DESC::pViewInstanceLocations">
    <summary>The address of a memory location that contains <b>ViewInstanceCount</b> view instance location structures that specify the location of viewport/scissor and render target details of each view instance.</summary>
  </comment>
  <comment id="D3D12_VIEW_INSTANCING_DESC::Flags">
    <summary>Configures view instancing with additional options.</summary>
  </comment>
  <comment id="ID3D12VideoProcessCommandList1">
    <summary>
      <para>Encapsulates a list of graphics commands for video processing.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/nn-d3d12video-id3d12videoprocesscommandlist1" /></para>
    </summary>
  </comment>
  <comment id="ID3D12VideoProcessor1">
    <summary>
      <para>Inherits from ID3D12VideoProcessor and provides support for protected resources.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/nn-d3d12video-id3d12videoprocessor1" /></para>
    </summary>
  </comment>
  <comment id="D3D12_INDEX_BUFFER_VIEW">
    <summary>
      <para>Describes the index buffer to view.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_index_buffer_view" /></para>
    </summary>
  </comment>
  <comment id="D3D12_INDEX_BUFFER_VIEW::BufferLocation">
    <summary>The GPU virtual address of the index buffer.  
            D3D12_GPU_VIRTUAL_ADDRESS is a typedef'd synonym of UINT64.</summary>
  </comment>
  <comment id="D3D12_INDEX_BUFFER_VIEW::SizeInBytes">
    <summary>The size in bytes of the index buffer.</summary>
  </comment>
  <comment id="D3D12_INDEX_BUFFER_VIEW::Format">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>-typed value for the index-buffer format.</summary>
  </comment>
  <comment id="ID3D12ShaderReflection::GetVariableByName">
    <summary>
      <para>Gets a variable by name.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getvariablebyname" /></para>
      <param name="Name">A pointer to a string containing the variable name.</param>
    </summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE">
    <summary>
      <para>Specifies the type of acceleration structure post-build info that can be retrieved with calls to EmitRaytracingAccelerationStructurePostbuildInfo and BuildRaytracingAccelerationStructure.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_raytracing_acceleration_structure_postbuild_info_type" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE">
    <summary>The post-build info is space requirements for an acceleration structure after compaction. For more information, see <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_raytracing_acceleration_structure_postbuild_info_compacted_size_desc">D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE_DESC</a>.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION">
    <summary>The post-build info is space requirements for generating tools visualization for an acceleration structure. For more information, see <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_raytracing_acceleration_structure_postbuild_info_tools_visualization_desc">D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TOOLS_VISUALIZATION_DESC</a>.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION">
    <summary>The post-build info is space requirements for serializing an acceleration structure. For more information, see <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_raytracing_acceleration_structure_postbuild_info_serialization_desc">D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC</a>.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_TYPE::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE">
    <summary>The post-build info is size of the current acceleration structure. For more information, see <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_raytracing_acceleration_structure_postbuild_info_current_size_desc">D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC</a>.</summary>
  </comment>
  <comment id="ID3D12CommandAllocator::Reset">
    <summary>
      <para>Indicates to re-use the memory that is associated with the command allocator.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12commandallocator-reset" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE">
    <summary>
      <para>Specifies the type of access that an application is given to the specified resource(s) at the transition into a render pass.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_render_pass_beginning_access_type" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE::D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_DISCARD">
    <summary>Indicates that your application doesn't have any dependency on the prior contents of the resource(s). You also shouldn't have any expectations about those contents, because a display driver may return the previously-written contents, or it may return uninitialized data. You can be assured that reading from the resource(s) won't hang the GPU, even if you do get undefined data back.
A read is defined as a traditional read from an unordered access view (UAV), a shader resource view (SRV), a constant buffer view (CBV), a vertex buffer view (VBV), an index buffer view (IBV), an IndirectArg binding/read, or a blend/depth-testing-induced read.</summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE::D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_PRESERVE">
    <summary>Indicates that your application has a dependency on the prior contents of the resource(s), so the contents must be loaded from main memory.</summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE::D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_CLEAR">
    <summary>Indicates that your application needs the resource(s) to be cleared to a specific value (a value that your application specifies). This clear occurs whether or not you interact with the resource(s) during the render pass. You specify the clear value at 
<a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12graphicscommandlist4-beginrenderpass">BeginRenderPass</a> time, in the <b>Clear</b> member of your <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_render_pass_beginning_access">D3D12_RENDER_PASS_BEGINNING_ACCESS</a> structure.</summary>
  </comment>
  <comment id="D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE::D3D12_RENDER_PASS_BEGINNING_ACCESS_TYPE_NO_ACCESS">
    <summary>Indicates that your application will neither read from nor write  to the resource(s) during the render pass. You would most likely use this value to indicate that you won't be accessing the depth/stencil plane for a depth/stencil view (DSV). You must pair this value with <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_render_pass_ending_access_type">D3D12_RENDER_PASS_ENDING_ACCESS_TYPE_NO_ACCESS</a> in the corresponding <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_render_pass_ending_access">D3D12_RENDER_PASS_ENDING_ACCESS</a> structure.</summary>
  </comment>
  <comment id="D3D12_MEMORY_POOL">
    <summary>
      <para>Specifies the memory pool for the heap.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_memory_pool" /></para>
    </summary>
  </comment>
  <comment id="D3D12_MEMORY_POOL::D3D12_MEMORY_POOL_UNKNOWN">
    <summary>The memory pool is unknown.</summary>
  </comment>
  <comment id="D3D12_MEMORY_POOL::D3D12_MEMORY_POOL_L0">
    <summary>The memory pool is L0.
            L0 is the physical system memory pool.
            When the adapter is discrete/NUMA, this pool has greater bandwidth for the CPU and less bandwidth for the GPU.
            When the adapter is UMA, this pool is the only one which is valid.</summary>
  </comment>
  <comment id="D3D12_MEMORY_POOL::D3D12_MEMORY_POOL_L1">
    <summary>The memory pool is L1.
            L1 is typically known as the physical video memory pool.
            L1 is only available when the adapter is discrete/NUMA, and has greater bandwidth for the GPU and cannot even be accessed by the CPU.
            When the adapter is UMA, this pool is not available.</summary>
  </comment>
  <comment id="ID3D12VersionedRootSignatureDeserializer">
    <summary>
      <para>Contains methods to return the deserialized D3D12_ROOT_SIGNATURE_DESC1 data structure, of any version of a serialized root signature.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12versionedrootsignaturedeserializer" /></para>
    </summary>
  </comment>
  <comment id="ID3D12Resource">
    <summary>
      <para>Encapsulates a generalized ability of the CPU and GPU to read and write to physical memory, or heaps. It contains abstractions for organizing and manipulating simple arrays of data as well as multidimensional data optimized for shader sampling.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12resource" /></para>
    </summary>
  </comment>
  <comment id="ID3D12InfoQueue::SetMessageCountLimit">
    <summary>
      <para>Set the maximum number of messages that can be added to the message queue.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-setmessagecountlimit" /></para>
      <param name="MessageCountLimit">Maximum number of messages that can be added to the message queue. -1 means no limit.

When the number of messages in the message queue has reached the maximum limit, new messages coming in will push old messages out.</param>
    </summary>
  </comment>
  <comment id="ID3D12InfoQueue::PushStorageFilter">
    <summary>
      <para>Push a storage filter onto the storage-filter stack.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-pushstoragefilter" /></para>
      <param name="pFilter">Pointer to a storage filter.</param>
    </summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::SetComputeRootConstantBufferView">
    <summary>
      <para>Sets a CPU descriptor handle for the constant buffer in the compute root signature.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setcomputerootconstantbufferview" /></para>
      <param name="RootParameterIndex">The slot number for binding.</param>
      <param name="BufferLocation">Specifies the D3D12_GPU_VIRTUAL_ADDRESS of the constant buffer.</param>
    </summary>
  </comment>
  <comment id="ID3D12ShaderReflection::GetResourceBindingDescByName">
    <summary>
      <para>Gets a description of how a resource is bound to a shader.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getresourcebindingdescbyname" /></para>
      <param name="Name">The constant-buffer name of the resource.</param>
      <param name="pDesc">A pointer to an input-binding description. See <a href="https://docs.microsoft.com/windows/win32/api/d3d12shader/ns-d3d12shader-d3d12_shader_input_bind_desc">D3D12_SHADER_INPUT_BIND_DESC</a>.</param>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_LUMA_KEY">
    <summary>
      <para>Specifies the settings used for luma keying.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_video_process_luma_key" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_LUMA_KEY::Enable">
    <summary>A boolean value specifying whether luma keying is enabled.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_LUMA_KEY::Lower">
    <summary>The lower bound for the luma key. The valid range is [0…1]. If <i>Enable</i> is FALSE, this parameter is ignored.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_LUMA_KEY::Upper">
    <summary>The upper bound for the luma key. The valid range is [0…1]. If <i>Enable</i> is FALSE, this parameter is ignored.</summary>
  </comment>
  <comment id="D3D12_TEX1D_ARRAY_DSV">
    <summary>
      <para>Describes the subresources from an array of 1D textures to use in a depth-stencil view.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_tex1d_array_dsv" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TEX1D_ARRAY_DSV::MipSlice">
    <summary>The index of the first mipmap level to use.</summary>
  </comment>
  <comment id="D3D12_TEX1D_ARRAY_DSV::FirstArraySlice">
    <summary>The index of the first texture to use in an array of textures.</summary>
  </comment>
  <comment id="D3D12_TEX1D_ARRAY_DSV::ArraySize">
    <summary>Number of textures to use.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::Reset">
    <summary>
      <para>Resets a command list back to its initial state as if a new command list was just created.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-reset" /></para>
      <param name="pAllocator">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12commandallocator">ID3D12CommandAllocator</a> object that the device creates command lists from.</param>
      <param name="pInitialState">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12pipelinestate">ID3D12PipelineState</a> object that contains the initial pipeline state for the command list.  This is optional and can be NULL.  If NULL, the runtime sets a dummy initial pipeline state so that drivers don't have to deal with undefined state.  The overhead for this is low, particularly for a command list, for which the overall cost of recording the command list likely dwarfs the cost of one initial state setting.  So there is little cost in  not setting the initial pipeline state parameter if it isn't convenient.  

For bundles on the other hand, it might make more sense to try to set the initial state parameter since bundles are likely smaller overall and can be reused frequently.</param>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION">
    <summary>
      <para>Defines vector precision values for video motion estimation.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ne-d3d12video-d3d12_video_motion_estimator_vector_precision" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION::D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION_QUARTER_PEL">
    <summary>The vector precision is quarter-pixel motion.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList4::InitializeMetaCommand">
    <summary>
      <para>Initializes the specified meta command.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist4-initializemetacommand" /></para>
      <param name="pMetaCommand">A pointer to an <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12metacommand">ID3D12MetaCommand</a> representing the meta command to initialize.</param>
      <param name="pInitializationParametersData">An optional pointer to a constant structure containing the values of the parameters for initializing the meta command.</param>
      <param name="InitializationParametersDataSizeInBytes">A <a href="https://docs.microsoft.com/windows/desktop/WinProg/windows-data-types">SIZE_T</a> containing the size of the structure pointed to by <i>pInitializationParametersData</i>, if set, otherwise 0.</param>
    </summary>
  </comment>
  <comment id="ID3D12Device::CreateHeap">
    <summary>
      <para>Creates a heap that can be used with placed resources and reserved resources.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createheap" /></para>
      <param name="pDesc">A pointer to a constant <b>D3D12_HEAP_DESC</b> structure that describes the heap.</param>
      <param name="riid">A reference to the globally unique identifier (<b>GUID</b>) of the heap interface to return in <i>ppvHeap</i>.

While <i>riidResource</i> is most commonly the <b>GUID</b> of <a href="https://docs.microsoft.com./nn-d3d12-id3d12heap.md">ID3D12Heap</a>, it may be the <b>GUID</b> of any interface. If the resource object doesn't support the interface for this <b>GUID</b>, then creation fails with <b>E_NOINTERFACE</b>.</param>
      <param name="ppvHeap">An optional pointer to a memory block that receives the requested interface pointer to the created heap object.

<i>ppvHeap</i> can be <c>nullptr</c>, to enable capability testing. When <i>ppvHeap</i> is <c>nullptr</c>, no object is created, and <b>S_FALSE</b> is returned when <i>pDesc</i> is valid.</param>
    </summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC">
    <summary>
      <para>Describes the space currently used by an acceleration structure..</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_raytracing_acceleration_structure_postbuild_info_current_size_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_CURRENT_SIZE_DESC::CurrentSizeInBytes">
    <summary>Space currently used by an acceleration structure.  If the acceleration structure hasn’t had a compaction operation performed on it, this size is the same one reported by <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12device5-getraytracingaccelerationstructureprebuildinfo">GetRaytracingAccelerationStructurePrebuildInfo</a>, and if it has been compacted this size is the same reported for post-build info with <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_raytracing_acceleration_structure_postbuild_info_type">D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_COMPACTED_SIZE</a>.</summary>
  </comment>
  <comment id="D3D12_BLEND">
    <summary>
      <para>Specifies blend factors, which modulate values for the pixel shader and render target.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_blend" /></para>
    </summary>
  </comment>
  <comment id="D3D12_BLEND::D3D12_BLEND_ZERO">
    <summary>The blend factor is (0, 0, 0, 0). No pre-blend operation.</summary>
  </comment>
  <comment id="D3D12_BLEND::D3D12_BLEND_ONE">
    <summary>The blend factor is (1, 1, 1, 1). No pre-blend operation.</summary>
  </comment>
  <comment id="D3D12_BLEND::D3D12_BLEND_SRC_COLOR">
    <summary>The blend factor is (Rₛ, Gₛ, Bₛ, Aₛ), that is color data (RGB) from a pixel shader. No pre-blend operation.</summary>
  </comment>
  <comment id="D3D12_BLEND::D3D12_BLEND_INV_SRC_COLOR">
    <summary>The blend factor is (1 - Rₛ, 1 - Gₛ, 1 - Bₛ, 1 - Aₛ), that is color data (RGB) from a pixel shader. The pre-blend operation inverts the data, generating 1 - RGB.</summary>
  </comment>
  <comment id="D3D12_BLEND::D3D12_BLEND_SRC_ALPHA">
    <summary>The blend factor is (Aₛ, Aₛ, Aₛ, Aₛ), that is alpha data (A) from a pixel shader. No pre-blend operation.</summary>
  </comment>
  <comment id="D3D12_BLEND::D3D12_BLEND_INV_SRC_ALPHA">
    <summary>The blend factor is ( 1 - Aₛ, 1 - Aₛ, 1 - Aₛ, 1 - Aₛ), that is alpha data (A) from a pixel shader. The pre-blend operation inverts the data, generating 1 - A.</summary>
  </comment>
  <comment id="D3D12_BLEND::D3D12_BLEND_DEST_ALPHA">
    <summary>The blend factor is (A<sub>d</sub> A<sub>d</sub> A<sub>d</sub> A<sub>d</sub>), that is alpha data from a render target. No pre-blend operation.</summary>
  </comment>
  <comment id="D3D12_BLEND::D3D12_BLEND_INV_DEST_ALPHA">
    <summary>The blend factor is (1 - A<sub>d</sub> 1 - A<sub>d</sub> 1 - A<sub>d</sub> 1 - A<sub>d</sub>), that is alpha data from a render target. The pre-blend operation inverts the data, generating 1 - A.</summary>
  </comment>
  <comment id="D3D12_BLEND::D3D12_BLEND_DEST_COLOR">
    <summary>The blend factor is (R<sub>d</sub>, G<sub>d</sub>, B<sub>d</sub>, A<sub>d</sub>), that is color data from a render target. No pre-blend operation.</summary>
  </comment>
  <comment id="D3D12_BLEND::D3D12_BLEND_INV_DEST_COLOR">
    <summary>The blend factor is (1 - R<sub>d</sub>, 1 - G<sub>d</sub>, 1 - B<sub>d</sub>, 1 - A<sub>d</sub>), that is color data from a render target. The pre-blend operation inverts the data, generating 1 - RGB.</summary>
  </comment>
  <comment id="D3D12_BLEND::D3D12_BLEND_SRC_ALPHA_SAT">
    <summary>The blend factor is (f, f, f, 1); where f = min(Aₛ, 1
    - A<sub>d</sub>). The pre-blend operation clamps the data to 1 or less.</summary>
  </comment>
  <comment id="D3D12_BLEND::D3D12_BLEND_BLEND_FACTOR">
    <summary>The blend factor is the blend factor set with <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12graphicscommandlist-omsetblendfactor">ID3D12GraphicsCommandList::OMSetBlendFactor</a>. No pre-blend operation.</summary>
  </comment>
  <comment id="D3D12_BLEND::D3D12_BLEND_INV_BLEND_FACTOR">
    <summary>The blend factor is the blend factor set with <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12graphicscommandlist-omsetblendfactor">ID3D12GraphicsCommandList::OMSetBlendFactor</a>. The pre-blend operation inverts the blend factor, generating 1 - blend_factor.</summary>
  </comment>
  <comment id="D3D12_BLEND::D3D12_BLEND_SRC1_COLOR">
    <summary>The blend factor is data sources both as color data output by a pixel shader. There is no pre-blend operation. This blend factor supports dual-source color blending.</summary>
  </comment>
  <comment id="D3D12_BLEND::D3D12_BLEND_INV_SRC1_COLOR">
    <summary>The blend factor is data sources both as color data output by a pixel shader. The pre-blend operation inverts the data, generating 1 - RGB. This blend factor supports dual-source color blending.</summary>
  </comment>
  <comment id="D3D12_BLEND::D3D12_BLEND_SRC1_ALPHA">
    <summary>The blend factor is data sources as alpha data output by a pixel shader. There is no pre-blend operation. This blend factor supports dual-source color blending.</summary>
  </comment>
  <comment id="D3D12_BLEND::D3D12_BLEND_INV_SRC1_ALPHA">
    <summary>The blend factor is data sources as alpha data output by a pixel shader. The pre-blend operation inverts the data, generating 1 - A. This blend factor supports dual-source color blending.</summary>
  </comment>
  <comment id="D3D12_ROOT_SIGNATURE_FLAGS">
    <summary>
      <para>Specifies options for root signature layout.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_root_signature_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_ROOT_SIGNATURE_FLAGS::D3D12_ROOT_SIGNATURE_FLAG_NONE">
    <summary>Indicates default behavior.</summary>
  </comment>
  <comment id="D3D12_ROOT_SIGNATURE_FLAGS::D3D12_ROOT_SIGNATURE_FLAG_ALLOW_INPUT_ASSEMBLER_INPUT_LAYOUT">
    <summary>The app is opting in to using the Input Assembler (requiring an input layout that defines a set of vertex buffer bindings). Omitting this flag can result in one root argument space being saved on some hardware. Omit this flag if the Input Assembler is not required, though the optimization is minor.</summary>
  </comment>
  <comment id="D3D12_ROOT_SIGNATURE_FLAGS::D3D12_ROOT_SIGNATURE_FLAG_DENY_VERTEX_SHADER_ROOT_ACCESS">
    <summary>Denies the vertex shader access to the root signature.</summary>
  </comment>
  <comment id="D3D12_ROOT_SIGNATURE_FLAGS::D3D12_ROOT_SIGNATURE_FLAG_DENY_HULL_SHADER_ROOT_ACCESS">
    <summary>Denies the hull shader access to the root signature.</summary>
  </comment>
  <comment id="D3D12_ROOT_SIGNATURE_FLAGS::D3D12_ROOT_SIGNATURE_FLAG_DENY_DOMAIN_SHADER_ROOT_ACCESS">
    <summary>Denies the domain shader access to the root signature.</summary>
  </comment>
  <comment id="D3D12_ROOT_SIGNATURE_FLAGS::D3D12_ROOT_SIGNATURE_FLAG_DENY_GEOMETRY_SHADER_ROOT_ACCESS">
    <summary>Denies the geometry shader access to the root signature.</summary>
  </comment>
  <comment id="D3D12_ROOT_SIGNATURE_FLAGS::D3D12_ROOT_SIGNATURE_FLAG_DENY_PIXEL_SHADER_ROOT_ACCESS">
    <summary>Denies the pixel shader access to the root signature.</summary>
  </comment>
  <comment id="D3D12_ROOT_SIGNATURE_FLAGS::D3D12_ROOT_SIGNATURE_FLAG_ALLOW_STREAM_OUTPUT">
    <summary>The app is opting in to using Stream Output. Omitting this flag can result in one root argument space being saved on some hardware. Omit this flag if Stream Output is not required, though the optimization is minor.</summary>
  </comment>
  <comment id="D3D12_ROOT_SIGNATURE_FLAGS::D3D12_ROOT_SIGNATURE_FLAG_LOCAL_ROOT_SIGNATURE">
    <summary>The root signature is to be used with raytracing shaders to define resource bindings sourced from shader records in shader tables.  This flag cannot be combined with any other root signature flags, which are all related to the graphics pipeline.  The absence of the flag means the root signature can be used with graphics or compute, where the compute version is also shared with raytracing’s global root signature.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_TIER">
    <summary>
      <para>Specifies the decoding tier of a hardware video decoder, which determines the required format of application-defined textures and buffers.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ne-d3d12video-d3d12_video_decode_tier" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_TIER::D3D12_VIDEO_DECODE_TIER_NOT_SUPPORTED">
    <summary>Video decoding is not supported.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_TIER::D3D12_VIDEO_DECODE_TIER_1">
    <summary>In tier 1, the hardware decoder requires that the application allocate reference textures as a texture array. This is to accomodate hardware requirements that the textures be "close" in address space because the hardware doesn't support a full size pointer for each individual picture buffer.  Instead it has one pointer and a more limited bit offset. For more information on texture arrays, see [Introduction To Textures in Direct3D 11](/windows/win32/direct3d11/overviews-direct3d-11-resources-textures-intro).

If the decoder hardware requires a unique memory layout that is not supported for operations on other engines or different video operations, the decoder may set the <a href="ne-d3d12video-d3d12_video_decode_configuration_flags.md">D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_REFERENCE_ONLY_ALLOCATIONS_REQUIRED</a> configuration flag in the <a href="ns-d3d12video-d3d12_feature_data_video_decode_support.md">D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT</a> structure when queried for profile support. This flag indicates that the application must allocate references with the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_flags">D3D12_RESOURCE_FLAG_VIDEO_DECODE_REFERENCE_ONLY</a> flag.  The application should use the <a href="ns-d3d12video-d3d12_video_decode_conversion_arguments.md">D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS</a> structure to set a reference-only output if the output is needed as a future reference frame.  The output frame passed to <a href="nf-d3d12video-id3d12videodecodecommandlist-decodeframe.md">ID3D12VideoCommandList::DecodeFrame</a> is a D3D12 resource that can be consumed by other portions of the pipeline and must not have the D3D12_RESOURCE_FLAG_VIDEO_DECODE_REFERENCE_ONLY flag.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_TIER::D3D12_VIDEO_DECODE_TIER_2">
    <summary>In decode tier 2, textures can be referenced as a texture array or as an array of separate texture 2D resources (each resource having array size of 1). This is more flexible for the caller and is important in scenarios where the resolution changes frequently such as in streaming video, because a texture array can only be allocated and deallocated as an single unit, but separate texture 2D resources can be allocated and deallocated individually.  

If decode hardware requires a unique tiling format that is not supported for operations on other engines or different video operations, the decoder may set the <a href="ne-d3d12video-d3d12_video_decode_configuration_flags.md">D3D12_VIDEO_DECODE_CONFIGURATION_FLAG_REFERENCE_ONLY_ALLOCATIONS_REQUIRED</a> configuration flag in the <a href="ns-d3d12video-d3d12_feature_data_video_decode_support.md">D3D12_FEATURE_DATA_VIDEO_DECODE_SUPPORT</a> structure when queried for profile support. This flag indicates that the application must allocate references with the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_flags">D3D12_RESOURCE_FLAG_VIDEO_DECODE_REFERENCE_ONLY</a> flag.  The application should use the <a href="ns-d3d12video-d3d12_video_decode_conversion_arguments.md">D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS</a> structure to set a reference only output if the output is needed as a future reference frame.  The output frame passed to <a href="nf-d3d12video-id3d12videodecodecommandlist-decodeframe.md">ID3D12VideoCommandList::DecodeFrame</a> is a D3D12 resource that can be consumed by other portions of the pipeline and must not have the D3D12_RESOURCE_FLAG_VIDEO_DECODE_REFERENCE_ONLY flag.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_TIER::D3D12_VIDEO_DECODE_TIER_3">
    <summary>This field is reserved.</summary>
  </comment>
  <comment id="ID3D12Device::CreateQueryHeap">
    <summary>
      <para>Creates a query heap. A query heap contains an array of queries.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createqueryheap" /></para>
      <param name="pDesc">Specifies the query heap in a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_query_heap_desc">D3D12_QUERY_HEAP_DESC</a> structure.</param>
      <param name="riid">Specifies a REFIID that uniquely identifies the heap.</param>
      <param name="ppvHeap">Specifies a pointer to the heap, that will be returned on successful completion of the method.
            <i>ppvHeap</i> can be NULL, to enable capability testing.
            When <i>ppvHeap</i> is NULL, no object will be created and S_FALSE will be returned when <i>pDesc</i> is valid.</param>
    </summary>
  </comment>
  <comment id="D3D12_VERTEX_BUFFER_VIEW">
    <summary>
      <para>Describes a vertex buffer view.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_vertex_buffer_view" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VERTEX_BUFFER_VIEW::BufferLocation">
    <summary>Specifies a D3D12_GPU_VIRTUAL_ADDRESS that identifies the address of the buffer.</summary>
  </comment>
  <comment id="D3D12_VERTEX_BUFFER_VIEW::SizeInBytes">
    <summary>Specifies the size in bytes of the buffer.</summary>
  </comment>
  <comment id="D3D12_VERTEX_BUFFER_VIEW::StrideInBytes">
    <summary>Specifies the size in bytes of each vertex entry.</summary>
  </comment>
  <comment id="ID3D12DebugCommandList::SetFeatureMask">
    <summary>
      <para>Turns the debug features for a command list on or off.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12debugcommandlist-setfeaturemask" /></para>
      <param name="Mask">A combination of feature-mask flags that are combined by using a bitwise OR operation. If a flag is present, that feature will be set to on, otherwise the feature will be set to off.</param>
    </summary>
  </comment>
  <comment id="D3D12SerializeVersionedRootSignature">
    <summary>
      <para>Serializes a root signature of any version that can be passed to ID3D12Device::CreateRootSignature.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-d3d12serializeversionedrootsignature" /></para>
      <param name="pRootSignature">Specifies a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_versioned_root_signature_desc">D3D12_VERSIONED_ROOT_SIGNATURE_DESC</a> that contains a description of any version of a root signature.</param>
      <param name="ppBlob">A pointer to a memory block that receives a pointer to the <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a> interface that you can use to access the serialized root signature.</param>
      <param name="ppErrorBlob">A pointer to a memory block that receives a pointer to the <a href="https://docs.microsoft.com/previous-versions/windows/desktop/legacy/ff728743(v=vs.85)">ID3DBlob</a> interface that you can use to access serializer error messages, or <b>NULL</b> if there are no errors.</param>
    </summary>
  </comment>
  <comment id="D3D12_GLOBAL_ROOT_SIGNATURE">
    <summary>
      <para>Defines a global root signature state suboject that will be used with associated shaders.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_global_root_signature" /></para>
    </summary>
  </comment>
  <comment id="D3D12_GLOBAL_ROOT_SIGNATURE::pGlobalRootSignature">
    <summary>The root signature that will function as a global root signature.  A state object holds a reference to this signature.</summary>
  </comment>
  <comment id="ID3D12ProtectedSession::GetStatusFence">
    <summary>
      <para>Retrieves the fence for the protected session. From the fence, you can retrieve the current uniqueness validity value (using ID3D12Fence::GetCompletedValue), and add monitors for changes to its value. This is a read-only fence.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12protectedsession-getstatusfence" /></para>
      <param name="riid">The GUID of the interface to a fence. Most commonly, <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12fence">ID3D12Fence</a>, although it may be any GUID for any interface. If the protected session object doesn’t support the interface for this GUID, the function returns <b>E_NOINTERFACE</b>.</param>
      <param name="ppFence">A pointer to a memory block that receives a pointer to the fence for the given protected session.</param>
    </summary>
  </comment>
  <comment id="D3D12_TEX2D_UAV">
    <summary>
      <para>Describes a unordered-access 2D texture resource.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_tex2d_uav" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TEX2D_UAV::MipSlice">
    <summary>The mipmap slice index.</summary>
  </comment>
  <comment id="D3D12_TEX2D_UAV::PlaneSlice">
    <summary>The index (plane slice number) of the plane to use in the texture.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO">
    <summary>
      <para>Retrieves the number of past and future reference frames required for the specified deinterlace mode, filter, rate conversion, or auto processing features.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_feature_data_video_process_reference_info" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO::NodeIndex">
    <summary>An integer indicating which physical adapter of the device the operation applies to, in a multi-adapter operation.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO::DeinterlaceMode">
    <summary>A member of the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_process_deinterlace_flags.md">D3D12\_VIDEO\_PROCESS\_DEINTERLACE\_FLAGS</a> enumeration specifying the deinterlacing mode for which the required past and future reference frame counts are retrieved.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO::Filters">
    <summary>A bitwise OR combination of values from the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_process_filter_flags.md">D3D12\_VIDEO\_PROCESS\_FILTER\_FLAGS</a> enumeration specifying the filters for which the required past and future reference frame counts are retrieved.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO::FeatureSupport">
    <summary>A bitwise OR combination of values from the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_process_feature_flags.md">D3D12\_VIDEO\_PROCESS\_FEATURE\_FLAGS</a> enumeration specifying the features for which the required past and future reference frame counts are retrieved.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO::InputFrameRate">
    <summary>The input frame rate of the stream for which the required past and future reference frame counts are retrieved.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO::OutputFrameRate">
    <summary>The output frame rate of the stream for which the required past and future reference frame counts are retrieved.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO::EnableAutoProcessing">
    <summary>True if autoprocessing will be used; otherwise, false.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO::PastFrames">
    <summary>The number of past frames required to support the specified processing features.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_PROCESS_REFERENCE_INFO::FutureFrames">
    <summary>The number of future frames required to support the specified processing features.</summary>
  </comment>
  <comment id="ID3D12Device1::SetResidencyPriority">
    <summary>
      <para>This method sets residency priorities of a specified list of objects.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device1-setresidencypriority" /></para>
      <param name="NumObjects">Specifies the number of objects in the <i>ppObjects</i> and <i>pPriorities</i> arrays.</param>
      <param name="ppObjects">Specifies an array, of length <i>NumObjects</i>, containing references to <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12pageable">ID3D12Pageable</a> objects.</param>
      <param name="pPriorities">Specifies an array, of length <i>NumObjects</i>, of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_residency_priority">D3D12_RESIDENCY_PRIORITY</a> values for the list of objects.</param>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_FORMAT">
    <summary>
      <para>Defines the combination of a pixel format and color space for a resource content description.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_video_format" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_FORMAT::Format">
    <summary>A value from the <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a> enumeration, specifying the DXGI format of the data.</summary>
  </comment>
  <comment id="D3D12_VIDEO_FORMAT::ColorSpace">
    <summary>A value from the <a href="https://docs.microsoft.com/windows/desktop/api/dxgicommon/ne-dxgicommon-dxgi_color_space_type">DXGI_COLOR_SPACE_TYPE</a> enumeration, specifying the color space of the data.</summary>
  </comment>
  <comment id="D3D12_META_COMMAND_PARAMETER_STAGE">
    <summary>
      <para>Defines constants that specify the stage of a parameter to a meta command.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_meta_command_parameter_stage" /></para>
    </summary>
  </comment>
  <comment id="D3D12_META_COMMAND_PARAMETER_STAGE::D3D12_META_COMMAND_PARAMETER_STAGE_CREATION">
    <summary>Specifies that the parameter is used at the meta command creation stage.</summary>
  </comment>
  <comment id="D3D12_META_COMMAND_PARAMETER_STAGE::D3D12_META_COMMAND_PARAMETER_STAGE_INITIALIZATION">
    <summary>Specifies that the parameter is used at the meta command initialization stage.</summary>
  </comment>
  <comment id="D3D12_META_COMMAND_PARAMETER_STAGE::D3D12_META_COMMAND_PARAMETER_STAGE_EXECUTION">
    <summary>Specifies that the parameter is used at the meta command execution stage.</summary>
  </comment>
  <comment id="D3D12_PLACED_SUBRESOURCE_FOOTPRINT">
    <summary>
      <para>Describes the footprint of a placed subresource, including the offset and the D3D12_SUBRESOURCE_FOOTPRINT.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_placed_subresource_footprint" /></para>
    </summary>
  </comment>
  <comment id="D3D12_PLACED_SUBRESOURCE_FOOTPRINT::Offset">
    <summary>The offset of the subresource within the parent resource, in bytes.
            The offset between the start of the parent resource and this subresource.</summary>
  </comment>
  <comment id="D3D12_PLACED_SUBRESOURCE_FOOTPRINT::Footprint">
    <summary>The format, width, height, depth, and row-pitch of the subresource,
            as a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_subresource_footprint">D3D12_SUBRESOURCE_FOOTPRINT</a> structure.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE">
    <summary>
      <para>Describes the allocation size of a video decoder heap.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_feature_data_video_processor_size" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE::NodeMask">
    <summary>For single GPU operation, set this to zero. If there are multiple GPU nodes, set a bit to identify the node (the device's physical adapter) to which the command queue applies. Each bit in the mask corresponds to a single node. Only 1 bit may be set.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE::pOutputStreamDesc">
    <summary>A pointer to a D3D12\_VIDEO\_PROCESS\_OUTPUT\_STREAM\_DESC(ns-d3d12video-d3d12_video_process_output_stream_desc) structure describing the output stream.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE::NumInputStreamDescs">
    <summary>The number of input streams provided in the <i>pInputStreamDescs</i> parameter.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE::pInputStreamDescs">
    <summary>A pointer to a list of D3D12\_VIDEO\_PROCESS\_INPUT\_STREAM\_DESC(ns-d3d12video-d3d12_video_process_input_stream_desc) structures the input streams.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE::MemoryPoolL0Size">
    <summary>The allocation size of the video processor in the L0 memory pool. L0 is the physical system memory pool. When the adapter is discrete/NUMA, this pool has greater bandwidth for the CPU and less bandwidth for the GPU. When the adapter is UMA, this pool is the only one which is valid. For more information, see <a href="https://docs.microsoft.com/windows/win32/direct3d12/residency">Residency</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_PROCESSOR_SIZE::MemoryPoolL1Size">
    <summary>The allocation size of the video processor in the L1 memory pool. L1 is typically known as the physical video memory pool. L1 is only available when the adapter is discrete/NUMA, and has greater bandwidth for the GPU and cannot even be accessed by the CPU. When the adapter is UMA, this pool is not available. For more information, see <a href="https://docs.microsoft.com/windows/win32/direct3d12/residency">Residency</a>.</summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_HEAP_FLAGS">
    <summary>
      <para>Specifies options for a heap.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_descriptor_heap_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_HEAP_FLAGS::D3D12_DESCRIPTOR_HEAP_FLAG_NONE">
    <summary>Indicates default usage of a heap.</summary>
  </comment>
  <comment id="D3D12_DESCRIPTOR_HEAP_FLAGS::D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE">
    <summary>The flag <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_descriptor_heap_flags">D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE</a> can optionally be set on a descriptor heap to indicate it is be bound on a command list for reference by shaders. Descriptor heaps created <i>without</i> this flag allow applications the option to stage descriptors in CPU memory before copying them to a shader visible descriptor heap, as a convenience. But it is also fine for applications to directly create descriptors into shader visible descriptor heaps with no requirement to stage anything on the CPU.

Descriptor heaps bound via [ID3D12GraphicsCommandList::SetDescriptorHeaps](/windows/win32/api/d3d12/nf-d3d12-id3d12graphicscommandlist-setdescriptorheaps) must have the <b>D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE</b> flag set, else the debug layer will produce an error.

Descriptor heaps with the <b>D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE</b> flag can't be used as the source heaps in calls to [ID3D12Device::CopyDescriptors](/windows/win32/api/d3d12/nf-d3d12-id3d12device-copydescriptors) or [ID3D12Device::CopyDescriptorsSimple](/windows/win32/api/d3d12/nf-d3d12-id3d12device-copydescriptorssimple), because they could be resident in <b>WRITE_COMBINE</b> memory or GPU-local memory, which is very inefficient to read from.

This flag only applies to CBV/SRV/UAV descriptor heaps, and sampler descriptor heaps. It does not apply to other descriptor heap types since shaders do not directly reference the other types. Attempting to create an RTV/DSV heap with <b>D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE</b> results in a debug layer error.</summary>
  </comment>
  <comment id="D3D12_PROTECTED_RESOURCE_SESSION_DESC1">
    <summary>
      <para>Describes flags and protection type for a protected resource session, per adapter.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_protected_resource_session_desc1" /></para>
    </summary>
  </comment>
  <comment id="D3D12_PROTECTED_RESOURCE_SESSION_DESC1::NodeMask">
    <summary>The node mask. For single GPU operation, set this to zero. If there are multiple GPU nodes, then set a bit to identify the node (the device's physical adapter) to which the protected session applies. Each bit in the mask corresponds to a single node. Only 1 bit may be set.</summary>
  </comment>
  <comment id="D3D12_PROTECTED_RESOURCE_SESSION_DESC1::Flags">
    <summary>Specifies the supported crypto sessions options.</summary>
  </comment>
  <comment id="D3D12_PROTECTED_RESOURCE_SESSION_DESC1::ProtectionType">
    <summary>The GUID that represents the protection type. Microsoft defines <b>D3D12_PROTECTED_RESOURCES_SESSION_HARDWARE_PROTECTED</b>.

Using the <b>D3D12_PROTECTED_RESOURCES_SESSION_HARDWARE_PROTECTED</b> GUID is equivalent to calling [<b>ID3D12Device4::CreateProtectedResourceSession</b>](./nf-d3d12-id3d12device4-createprotectedresourcesession.md).</summary>
  </comment>
  <comment id="ID3D12PipelineLibrary">
    <summary>
      <para>Manages a pipeline library, in particular loading and retrieving individual PSOs.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12pipelinelibrary" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TILE_MAPPING_FLAGS">
    <summary>
      <para>Specifies how to perform a tile-mapping operation.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_tile_mapping_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TILE_MAPPING_FLAGS::D3D12_TILE_MAPPING_FLAG_NONE">
    <summary>No tile-mapping flags are specified.</summary>
  </comment>
  <comment id="D3D12_TILE_MAPPING_FLAGS::D3D12_TILE_MAPPING_FLAG_NO_HAZARD">
    <summary>Unsupported, do not use.</summary>
  </comment>
  <comment id="ID3D12Debug3::SetEnableGPUBasedValidation">
    <summary>
      <para>This method enables or disables GPU-based validation (GBV) before creating a device with the debug layer enabled.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12debug3-setenablegpubasedvalidation" /></para>
      <param name="Enable">TRUE to enable GPU-based validation, otherwise FALSE.</param>
    </summary>
  </comment>
  <comment id="D3D12_FILL_MODE">
    <summary>
      <para>Specifies the fill mode to use when rendering triangles.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_fill_mode" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FILL_MODE::D3D12_FILL_MODE_WIREFRAME">
    <summary>Draw lines connecting the vertices. Adjacent vertices are not drawn.</summary>
  </comment>
  <comment id="D3D12_FILL_MODE::D3D12_FILL_MODE_SOLID">
    <summary>Fill the triangles formed by the vertices. Adjacent vertices are not drawn.</summary>
  </comment>
  <comment id="ID3D12ShaderReflectionType::GetSubType">
    <summary>
      <para>Gets the base class of a class.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflectiontype-getsubtype" /></para>
    </summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList4::BeginRenderPass">
    <summary>
      <para>Marks the beginning of a render pass by binding a set of output resources for the duration of the render pass. These bindings are to one or more render target views (RTVs), and/or to a depth stencil view (DSV).</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist4-beginrenderpass" /></para>
      <param name="NumRenderTargets">A <b>UINT</b>. The number of render targets being bound.</param>
      <param name="pRenderTargets">A pointer to a constant <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_render_pass_render_target_desc">D3D12_RENDER_PASS_RENDER_TARGET_DESC</a>, which describes bindings (fixed for the duration of the render pass) to one or more render target views (RTVs), as well as their beginning and ending access characteristics.</param>
      <param name="pDepthStencil">A pointer to a constant <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_render_pass_depth_stencil_desc">D3D12_RENDER_PASS_DEPTH_STENCIL_DESC</a>, which describes a binding (fixed for the duration of the render pass) to a depth stencil view (DSV), as well as its beginning and ending access characteristics.</param>
      <param name="Flags">A <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_render_pass_flags">D3D12_RENDER_PASS_FLAGS</a>. The nature/requirements of the render pass; for example, whether it is a suspending or a resuming render pass, or whether it wants to write to unordered access view(s).</param>
    </summary>
  </comment>
  <comment id="ID3D12Device8">
    <summary>
      <para>Represents a virtual adapter. This interface extends <a href="https://docs.microsoft.com../d3d12/nn-d3d12-id3d12device7.md">ID3D12Device7</a>.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12device8" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT">
    <summary>
      <para>Retrieves the list of supported profiles.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_feature_data_video_decode_conversion_support" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT::NodeIndex">
    <summary>For single GPU operation, set this to zero. If there are multiple GPU nodes, set a bit to identify the node (the device's physical adapter) to which the command queue applies. Each bit in the mask corresponds to a single node. Only 1 bit may be set.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT::Configuration">
    <summary>A <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_decode_configuration.md">D3D12\_VIDEO\_DECODE\_CONFIGURATION</a> structure describing the decode configuration.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT::DecodeSample">
    <summary>A <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_sample.md">D3D12\_VIDEO\_SAMPLE</a> structure representing the source decoded as sample description.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT::OutputFormat">
    <summary>A <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_format.md">D3D12\_VIDEO\_FORMAT</a> structure containing the output sample description.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT::FrameRate">
    <summary>The frame rate of the video content. This is used by the driver to determine whether the video can be decoded in real-time.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT::BitRate">
    <summary>The average bits per second data compression rate for the compressed video stream.  This is used by the driver to determine whether the video can be decoded in real-time.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT::SupportFlags">
    <summary>A combination of values from the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_decode_conversion_support_flags.md">D3D12\_VIDEO\_DECODE\_CONVERSION\_SUPPORT\_FLAGS</a> indicating the support for the specified conversion.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_DECODE_CONVERSION_SUPPORT::ScaleSupport">
    <summary>A <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_scale_support.md">D3D12\_VIDEO\_SCALE\_SUPPORT</a> structure representing the output size range for decode conversion.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::ClearDepthStencilView">
    <summary>
      <para>Clears the depth-stencil resource.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-cleardepthstencilview" /></para>
      <param name="DepthStencilView">Describes the CPU descriptor handle that represents the start of the heap for the depth stencil to be cleared.</param>
      <param name="ClearFlags">A combination of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_clear_flags">D3D12_CLEAR_FLAGS</a> values that are combined by using a bitwise OR operation. The resulting value identifies the type of data to clear (depth buffer, stencil buffer, or both).</param>
      <param name="Depth">A value to clear the depth buffer with. This value will be clamped between 0 and 1.</param>
      <param name="Stencil">A value to clear the stencil buffer with.</param>
      <param name="NumRects">The number of rectangles in the array that the <i>pRects</i> parameter specifies.</param>
      <param name="pRects">An array of <b>D3D12_RECT</b> structures for the rectangles in the resource view to clear. If <b>NULL</b>, <b>ClearDepthStencilView</b> clears the entire resource view.</param>
    </summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::IASetPrimitiveTopology">
    <summary>
      <para>Bind information about the primitive type, and data order that describes input data for the input assembler stage.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-iasetprimitivetopology" /></para>
      <param name="PrimitiveTopology">The type of primitive and ordering of the primitive data (see <a href="https://docs.microsoft.com/windows/desktop/api/d3dcommon/ne-d3dcommon-d3d_primitive_topology">D3D_PRIMITIVE_TOPOLOGY</a>).</param>
    </summary>
  </comment>
  <comment id="D3D12_INDEX_BUFFER_STRIP_CUT_VALUE">
    <summary>
      <para>When using triangle strip primitive topology, vertex positions are interpreted as vertices of a continuous triangle “strip”.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_index_buffer_strip_cut_value" /></para>
    </summary>
  </comment>
  <comment id="D3D12_INDEX_BUFFER_STRIP_CUT_VALUE::D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_DISABLED">
    <summary>Indicates that there is no cut value.</summary>
  </comment>
  <comment id="D3D12_INDEX_BUFFER_STRIP_CUT_VALUE::D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFF">
    <summary>Indicates that 0xFFFF should be used as the cut value.</summary>
  </comment>
  <comment id="D3D12_INDEX_BUFFER_STRIP_CUT_VALUE::D3D12_INDEX_BUFFER_STRIP_CUT_VALUE_0xFFFFFFFF">
    <summary>Indicates that 0xFFFFFFFF should be used as the cut value.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_BARRIER">
    <summary>
      <para>Describes a resource barrier (transition in resource use).</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_resource_barrier" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RESOURCE_BARRIER::Type">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_barrier_type">D3D12_RESOURCE_BARRIER_TYPE</a>-typed value that specifies the type of resource barrier. 
            This member determines which type to use in the union below.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_BARRIER::Flags">
    <summary>Specifies a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_barrier_flags">D3D12_RESOURCE_BARRIER_FLAGS</a> enumeration constant such as for "begin only" or "end only".</summary>
  </comment>
  <comment id="D3D12_RESOURCE_BARRIER::Transition">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_resource_transition_barrier">D3D12_RESOURCE_TRANSITION_BARRIER</a> structure that describes the transition of subresources between different usages.  
              Members specify the before and after usages of the subresources.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_BARRIER::Aliasing">
    <summary>A 
              <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_resource_aliasing_barrier">D3D12_RESOURCE_ALIASING_BARRIER</a>structure that describes the transition between usages of two different resources that have mappings into the same heap.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_BARRIER::UAV">
    <summary>A 
              <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_resource_uav_barrier">D3D12_RESOURCE_UAV_BARRIER</a>structure that describes a resource in which all UAV accesses (reads or writes) must complete before any future UAV accesses (read or write) can begin.</summary>
  </comment>
  <comment id="ID3D12fence1::GetCreationFlags">
    <summary>
      <para>Gets the flags used to create the fence represented by the current instance.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12fence1-getcreationflags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_SHADING_RATE_COMBINER">
    <summary>
      <para>Defines constants that specify a shading rate combiner (for variable-rate shading, or VRS).</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_shading_rate_combiner" /></para>
    </summary>
  </comment>
  <comment id="D3D12_SHADING_RATE_COMBINER::D3D12_SHADING_RATE_COMBINER_PASSTHROUGH">
    <summary>Specifies the combiner <c>C.xy = A.xy</c>, for combiner (C) and inputs (A and B).</summary>
  </comment>
  <comment id="D3D12_SHADING_RATE_COMBINER::D3D12_SHADING_RATE_COMBINER_OVERRIDE">
    <summary>Specifies the combiner <c>C.xy = B.xy</c>, for combiner (C) and inputs (A and B).</summary>
  </comment>
  <comment id="D3D12_SHADING_RATE_COMBINER::D3D12_SHADING_RATE_COMBINER_MIN">
    <summary>Specifies the combiner <c>C.xy = max(A.xy, B.xy)</c>, for combiner (C) and inputs (A and B).</summary>
  </comment>
  <comment id="D3D12_SHADING_RATE_COMBINER::D3D12_SHADING_RATE_COMBINER_MAX">
    <summary>Specifies the combiner <c>C.xy = min(A.xy, B.xy)</c>, for combiner (C) and inputs (A and B).</summary>
  </comment>
  <comment id="D3D12_SHADING_RATE_COMBINER::D3D12_SHADING_RATE_COMBINER_SUM">
    <summary>Specifies the combiner C.xy = min(maxRate, A.xy + B.xy)`, for combiner (C) and inputs (A and B).</summary>
  </comment>
  <comment id="D3D12_TEX2D_ARRAY_DSV">
    <summary>
      <para>Describes the subresources from an array of 2D textures that are accessible to a depth-stencil view.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_tex2d_array_dsv" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TEX2D_ARRAY_DSV::MipSlice">
    <summary>The index of the first mipmap level to use.</summary>
  </comment>
  <comment id="D3D12_TEX2D_ARRAY_DSV::FirstArraySlice">
    <summary>The index of the first texture to use in an array of textures.</summary>
  </comment>
  <comment id="D3D12_TEX2D_ARRAY_DSV::ArraySize">
    <summary>Number of textures to use.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_BINDING_TIER">
    <summary>
      <para>Identifies the tier of resource binding being used.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_resource_binding_tier" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RESOURCE_BINDING_TIER::D3D12_RESOURCE_BINDING_TIER_1">
    <summary>Tier 1.
            See <a href="https://docs.microsoft.com/windows/desktop/direct3d12/hardware-support">Hardware Tiers</a>.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_BINDING_TIER::D3D12_RESOURCE_BINDING_TIER_2">
    <summary>Tier 2.
            See <a href="https://docs.microsoft.com/windows/desktop/direct3d12/hardware-support">Hardware Tiers</a>.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_BINDING_TIER::D3D12_RESOURCE_BINDING_TIER_3">
    <summary>Tier 3.
            See <a href="https://docs.microsoft.com/windows/desktop/direct3d12/hardware-support">Hardware Tiers</a>.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::SetComputeRoot32BitConstants">
    <summary>
      <para>Sets a group of constants in the compute root signature.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setcomputeroot32bitconstants" /></para>
      <param name="RootParameterIndex">The slot number for binding.</param>
      <param name="Num32BitValuesToSet">The number of constants to set in the root signature.</param>
      <param name="pSrcData">The source data for the group of constants to set.</param>
      <param name="DestOffsetIn32BitValues">The offset, in 32-bit values, to set the first constant of the group in the root signature.</param>
    </summary>
  </comment>
  <comment id="ID3D12FunctionParameterReflection::GetDesc">
    <summary>
      <para>Fills the parameter descriptor structure for the function's parameter.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12functionparameterreflection-getdesc" /></para>
      <param name="pDesc">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12shader/ns-d3d12shader-d3d12_parameter_desc">D3D12_PARAMETER_DESC</a> structure that receives a description of the function's parameter.</param>
    </summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::SetComputeRootShaderResourceView">
    <summary>
      <para>Sets a CPU descriptor handle for the shader resource in the compute root signature.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setcomputerootshaderresourceview" /></para>
      <param name="RootParameterIndex">The slot number for binding.</param>
      <param name="BufferLocation">The GPU virtual address of the buffer.
            D3D12_GPU_VIRTUAL_ADDRESS is a typedef'd alias of UINT64.</param>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS">
    <summary>
      <para>Describes the multi-sampling image quality levels for a given format and sample count.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_feature_data_multisample_quality_levels" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS::Format">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>-typed value for the format to return info about.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS::SampleCount">
    <summary>The number of multi-samples per pixel to return info about.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS::Flags">
    <summary>Flags to control quality levels, as a bitwise-OR'd combination of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_multisample_quality_level_flags">D3D12_MULTISAMPLE_QUALITY_LEVEL_FLAGS</a> enumeration constants.
            The resulting value specifies options for determining quality levels.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_MULTISAMPLE_QUALITY_LEVELS::NumQualityLevels">
    <summary>The number of quality levels.</summary>
  </comment>
  <comment id="ID3D12DebugDevice1::GetDebugParameter">
    <summary>
      <para>Gets optional device-wide Debug Layer settings.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12debugdevice1-getdebugparameter" /></para>
      <param name="Type">Specifies a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ne-d3d12sdklayers-d3d12_debug_device_parameter_type">D3D12_DEBUG_DEVICE_PARAMETER_TYPE</a> value that indicates which debug parameter data to set.</param>
      <param name="pData">Points to the memory that will be filled with a copy of the debug parameter data. The interpretation of this data depends on the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12sdklayers/ne-d3d12sdklayers-d3d12_debug_device_parameter_type">D3D12_DEBUG_DEVICE_PARAMETER_TYPE</a> given in the <i>Type</i> parameter.</param>
      <param name="DataSize">Size in bytes of the memory buffer pointed to by <i>pData</i>.</param>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE">
    <summary>
      <para>Checks the allocation size of a video extension command.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_feature_data_video_extension_command_size" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE::NodeIndex">
    <summary>For single GPU operation, set this to zero. If there are multiple GPU nodes, set a bit to identify the node (the device's physical adapter) to which the command queue applies. Each bit in the mask corresponds to a single node. Only 1 bit may be set.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE::CommandId">
    <summary>The unique identifier for the video extension command for which size is queried.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE::pCreationParameters">
    <summary>A pointer to the creation parameters structure, which is defined by the command.  The parameters structure must match the parameters enumerated by a call to [ID3D12VideoDevice::CheckFeatureSupport](nf-d3d12video-id3d12videodevice-checkfeaturesupport.md) with the feature value of <a href="https://docs.microsoft.comne-d3d12video-d3d12_feature_video.md">D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_PARAMETERS</a> and a parameter stage value of <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_extension_command_parameter_stage.md">D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE_CREATION</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE::CreationParametersSizeInBytes">
    <summary>The size of the <i>pCreationParameters</i> parameter structure, in bytes.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE::MemoryPoolL0Size">
    <summary>The allocation size of the video extension command in the L0 memory pool. L0 is the physical system memory pool. When the adapter is discrete/NUMA, this pool has greater bandwidth for the CPU and less bandwidth for the GPU. When the adapter is UMA, this pool is the only one which is valid. For more information, see <a href="https://docs.microsoft.com/windows/win32/direct3d12/residency">Residency</a>.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_SIZE::MemoryPoolL1Size">
    <summary>The allocation size of the video extension command heap in the L1 memory pool. L1 is typically known as the physical video memory pool. L1 is only available when the adapter is discrete/NUMA, and has greater bandwidth for the GPU and cannot even be accessed by the CPU. When the adapter is UMA, this pool is not available. For more information, see <a href="https://docs.microsoft.com/windows/win32/direct3d12/residency">Residency</a>.</summary>
  </comment>
  <comment id="ID3D12DebugCommandQueue">
    <summary>
      <para>Provides methods to monitor and debug a command queue.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nn-d3d12sdklayers-id3d12debugcommandqueue" /></para>
    </summary>
  </comment>
  <comment id="D3D12_ROOT_SIGNATURE_DESC">
    <summary>
      <para>Describes the layout of a root signature version 1.0.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_root_signature_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_ROOT_SIGNATURE_DESC::NumParameters">
    <summary>The number of slots in the root signature. This number is also the number of elements in the <i>pParameters</i> array.</summary>
  </comment>
  <comment id="D3D12_ROOT_SIGNATURE_DESC::pParameters">
    <summary>An array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_root_parameter">D3D12_ROOT_PARAMETER</a> structures for the slots in the root signature.</summary>
  </comment>
  <comment id="D3D12_ROOT_SIGNATURE_DESC::NumStaticSamplers">
    <summary>Specifies the number of static samplers.</summary>
  </comment>
  <comment id="D3D12_ROOT_SIGNATURE_DESC::pStaticSamplers">
    <summary>Pointer to one or more <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_static_sampler_desc">D3D12_STATIC_SAMPLER_DESC</a> structures.</summary>
  </comment>
  <comment id="D3D12_ROOT_SIGNATURE_DESC::Flags">
    <summary>A combination of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_root_signature_flags">D3D12_ROOT_SIGNATURE_FLAGS</a>-typed values that are combined by using a bitwise OR operation.
            The resulting value specifies options for the root signature layout.</summary>
  </comment>
  <comment id="D3D12_ROOT_PARAMETER">
    <summary>
      <para>Describes the slot of a root signature version 1.0.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_root_parameter" /></para>
    </summary>
  </comment>
  <comment id="D3D12_ROOT_PARAMETER::ParameterType">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_root_parameter_type">D3D12_ROOT_PARAMETER_TYPE</a>-typed value that  specifies the type of root signature slot. This member determines which type to use in the union below.</summary>
  </comment>
  <comment id="D3D12_ROOT_PARAMETER::DescriptorTable">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_root_descriptor_table">D3D12_ROOT_DESCRIPTOR_TABLE</a> structure that describes the layout of a descriptor table as a collection of descriptor ranges that appear one after the other in a descriptor heap.</summary>
  </comment>
  <comment id="D3D12_ROOT_PARAMETER::Constants">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_root_constants">D3D12_ROOT_CONSTANTS</a> structure that describes constants inline in the root signature that appear in shaders as one constant buffer.</summary>
  </comment>
  <comment id="D3D12_ROOT_PARAMETER::Descriptor">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_root_descriptor">D3D12_ROOT_DESCRIPTOR</a> structure that describes descriptors inline in the root signature that appear in shaders.</summary>
  </comment>
  <comment id="D3D12_ROOT_PARAMETER::ShaderVisibility">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_shader_visibility">D3D12_SHADER_VISIBILITY</a>-typed value that  specifies the shaders that can access the contents of the root signature slot.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::ClearState">
    <summary>
      <para>Resets the state of a direct command list back to the state it was in when the command list was created.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-clearstate" /></para>
      <param name="pPipelineState">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12pipelinestate">ID3D12PipelineState</a> object that contains the initial pipeline state for the command list.</param>
    </summary>
  </comment>
  <comment id="ID3D12Device::CreateGraphicsPipelineState">
    <summary>
      <para>Creates a graphics pipeline state object.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-creategraphicspipelinestate" /></para>
      <param name="pDesc">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_graphics_pipeline_state_desc">D3D12_GRAPHICS_PIPELINE_STATE_DESC</a> structure that describes graphics pipeline state.</param>
      <param name="riid">The globally unique identifier (<b>GUID</b>) for the pipeline state interface (<a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12pipelinestate">ID3D12PipelineState</a>).
            The <b>REFIID</b>, or <b>GUID</b>, of the interface to the pipeline state can be obtained by using the __uuidof() macro.
            For example, __uuidof(ID3D12PipelineState) will get the <b>GUID</b> of the interface to a pipeline state.</param>
      <param name="ppPipelineState">A pointer to a memory block that receives a pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12pipelinestate">ID3D12PipelineState</a> interface for the pipeline state object.
            The pipeline state object is an immutable state object.  It contains no methods.</param>
    </summary>
  </comment>
  <comment id="ID3D12Device::GetNodeCount">
    <summary>
      <para>Reports the number of physical adapters (nodes) that are associated with this device.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-getnodecount" /></para>
    </summary>
  </comment>
  <comment id="ID3D12Device::GetAdapterLuid">
    <summary>
      <para>Gets a locally unique identifier for the current device (adapter).</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-getadapterluid" /></para>
    </summary>
  </comment>
  <comment id="ID3D12Device::CreateCommandAllocator">
    <summary>
      <para>Creates a command allocator object.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createcommandallocator" /></para>
      <param name="type">A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_command_list_type">D3D12_COMMAND_LIST_TYPE</a>-typed value that specifies the type of command allocator to create.
            The type of command allocator can be the type that records either direct command lists or bundles.</param>
      <param name="riid">The globally unique identifier (<b>GUID</b>) for the command allocator interface (<a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12commandallocator">ID3D12CommandAllocator</a>).
            The <b>REFIID</b>, or <b>GUID</b>, of the interface to the command allocator can be obtained by using the __uuidof() macro.
            For example, __uuidof(ID3D12CommandAllocator) will get the <b>GUID</b> of the interface to a command allocator.</param>
      <param name="ppCommandAllocator">A pointer to a memory block that receives a pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12commandallocator">ID3D12CommandAllocator</a> interface for the command allocator.</param>
    </summary>
  </comment>
  <comment id="D3D12_HIT_GROUP_DESC">
    <summary>
      <para>Describes a raytracing hit group state subobject that can be included in a state object.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_hit_group_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_HIT_GROUP_DESC::HitGroupExport">
    <summary>The name of the hit group.</summary>
  </comment>
  <comment id="D3D12_HIT_GROUP_DESC::Type">
    <summary>A value from the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_hit_group_type">D3D12_HIT_GROUP_TYPE</a> enumeration specifying the type of the hit group.</summary>
  </comment>
  <comment id="D3D12_HIT_GROUP_DESC::AnyHitShaderImport">
    <summary>Optional name of the any-hit shader associated with the hit group. This field can be used with all hit group types.</summary>
  </comment>
  <comment id="D3D12_HIT_GROUP_DESC::ClosestHitShaderImport">
    <summary>Optional name of the closest-hit shader associated with the hit group. This field can be used with all hit group types.</summary>
  </comment>
  <comment id="D3D12_HIT_GROUP_DESC::IntersectionShaderImport">
    <summary>Optional name of the intersection shader associated with the hit group.  This field can only be used with hit groups of type procedural primitive.</summary>
  </comment>
  <comment id="ID3D12ShaderReflectionConstantBuffer::GetDesc">
    <summary>
      <para>Gets a constant-buffer description.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflectionconstantbuffer-getdesc" /></para>
      <param name="pDesc">A shader-buffer description, as a pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12shader/ns-d3d12shader-d3d12_shader_buffer_desc">D3D12_SHADER_BUFFER_DESC</a> structure.</param>
    </summary>
  </comment>
  <comment id="ID3D12ShaderReflection::GetGSInputPrimitive">
    <summary>
      <para>Gets the geometry-shader input-primitive description.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getgsinputprimitive" /></para>
    </summary>
  </comment>
  <comment id="ID3D12InfoQueue::ClearStorageFilter">
    <summary>
      <para>Remove a storage filter from the top of the storage-filter stack.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-clearstoragefilter" /></para>
    </summary>
  </comment>
  <comment id="ID3D12DebugDevice::GetFeatureMask">
    <summary>
      <para>Gets a bit field of flags that indicates which debug features are on or off.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12debugdevice-getfeaturemask" /></para>
    </summary>
  </comment>
  <comment id="D3D12_BUFFER_SRV">
    <summary>
      <para>Describes the elements in a buffer resource to use in a shader-resource view.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_buffer_srv" /></para>
    </summary>
  </comment>
  <comment id="D3D12_BUFFER_SRV::FirstElement">
    <summary>The index of the first element to be accessed by the view.</summary>
  </comment>
  <comment id="D3D12_BUFFER_SRV::NumElements">
    <summary>The number of elements in the resource.</summary>
  </comment>
  <comment id="D3D12_BUFFER_SRV::StructureByteStride">
    <summary>The size of each element in the buffer structure (in bytes) when the buffer represents a structured buffer.</summary>
  </comment>
  <comment id="D3D12_BUFFER_SRV::Flags">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_buffer_srv_flags">D3D12_BUFFER_SRV_FLAGS</a>-typed value that identifies view options for the buffer. Currently, the only option is to identify a raw view of the buffer. For more info about raw viewing of buffers, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/overviews-direct3d-11-resources-intro">Raw Views of Buffers</a>.</summary>
  </comment>
  <comment id="D3D12_TEX2D_RTV">
    <summary>
      <para>Describes the subresource from a 2D texture to use in a render-target view.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_tex2d_rtv" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TEX2D_RTV::MipSlice">
    <summary>The index of the mipmap level to use.</summary>
  </comment>
  <comment id="D3D12_TEX2D_RTV::PlaneSlice">
    <summary>The index (plane slice number) of the plane to use in the texture.</summary>
  </comment>
  <comment id="D3D12_COMMAND_QUEUE_DESC">
    <summary>
      <para>Describes a command queue.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_command_queue_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_COMMAND_QUEUE_DESC::Type">
    <summary>Specifies one member of <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_command_list_type">D3D12_COMMAND_LIST_TYPE</a>.</summary>
  </comment>
  <comment id="D3D12_COMMAND_QUEUE_DESC::Priority">
    <summary>The priority for the command queue, as a 
            <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_command_queue_priority">D3D12_COMMAND_QUEUE_PRIORITY</a>enumeration constant to select normal or high priority.</summary>
  </comment>
  <comment id="D3D12_COMMAND_QUEUE_DESC::Flags">
    <summary>Specifies any flags from the <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_command_queue_flags">D3D12_COMMAND_QUEUE_FLAGS</a> enumeration.</summary>
  </comment>
  <comment id="D3D12_COMMAND_QUEUE_DESC::NodeMask">
    <summary>For single GPU operation, set this to zero. If there are multiple GPU nodes, set a bit to identify the node (the  device's physical adapter) to which the command queue applies.
            Each bit in the mask corresponds to a single node.
            Only 1 bit must be set.
          Refer to <a href="https://docs.microsoft.com/windows/win32/direct3d12/multi-engine">Multi-adapter systems</a>.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::SetPredication">
    <summary>
      <para>Sets a rendering predicate.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setpredication" /></para>
      <param name="pBuffer">The buffer, as an <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a>, which must be in the [<b>D3D12_RESOURCE_STATE_PREDICATION</b>](/windows/win32/api/d3d12/ne-d3d12-d3d12_resource_states) or [<b>D3D21_RESOURCE_STATE_INDIRECT_ARGUMENT</b>](/windows/win32/api/d3d12/ne-d3d12-d3d12_resource_states) state (both values are identical, and provided as aliases for clarity), or <b>NULL</b> to disable predication.</param>
      <param name="AlignedBufferOffset">The aligned buffer offset, as a UINT64.</param>
      <param name="Operation">Specifies a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_predication_op">D3D12_PREDICATION_OP</a>, such as D3D12_PREDICATION_OP_EQUAL_ZERO or D3D12_PREDICATION_OP_NOT_EQUAL_ZERO.</param>
    </summary>
  </comment>
  <comment id="ID3D12InfoQueue::AddRetrievalFilterEntries">
    <summary>
      <para>Add storage filters to the top of the retrieval-filter stack.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-addretrievalfilterentries" /></para>
      <param name="pFilter">Array of retrieval filters.</param>
    </summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList4::BuildRaytracingAccelerationStructure">
    <summary>
      <para>Performs a raytracing acceleration structure build on the GPU and optionally outputs post-build information immediately after the build.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist4-buildraytracingaccelerationstructure" /></para>
      <param name="pDesc">Description of the acceleration structure to build.</param>
      <param name="NumPostbuildInfoDescs">Size of the <i>pPostbuildInfoDescs</i> array.  Set to 0 if no post-build info is needed.</param>
      <param name="pPostbuildInfoDescs">Optional array of descriptions for post-build info to generate describing properties of the acceleration structure that was built.</param>
    </summary>
  </comment>
  <comment id="D3D12_RAYTRACING_GEOMETRY_DESC">
    <summary>
      <para>Describes a set of geometry that is used in the D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_INPUTS structure to provide input data to a raytracing acceleration structure build operation.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_raytracing_geometry_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RAYTRACING_GEOMETRY_DESC::Type">
    <summary>The type of geometry.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_GEOMETRY_DESC::Flags">
    <summary>The geometry flags</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_GEOMETRY_DESC::Triangles">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_raytracing_geometry_triangles_desc">D3D12_RAYTRACING_GEOMETRY_TRIANGLES_DESC</a> describing triangle geometry, if <i>Type</i> is  <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_raytracing_geometry_type">D3D12_RAYTRACING_GEOMETRY_TYPE_TRIANGLES</a>.  Otherwise this parameter is unused.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_GEOMETRY_DESC::AABBs">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_raytracing_geometry_aabbs_desc">D3D12_RAYTRACING_GEOMETRY_AABBS_DESC</a> describing triangle geometry, if <i>Type</i> is  <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_raytracing_geometry_type">D3D12_RAYTRACING_GEOMETRY_TYPE_PROCEDURAL_PRIMITIVE_AABBS</a>.  Otherwise this parameter is unused.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList1::SetViewInstanceMask">
    <summary>
      <para>Set a mask that controls which view instances are enabled for subsequent draws.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist1-setviewinstancemask" /></para>
      <param name="Mask">A mask that specifies which views are enabled or disabled. If bit <i>i</i> starting from the least-significant bit is set, view instance <i>i</i> is enabled.</param>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS">
    <summary>
      <para>Specifies the parameters for the output stream for a video decode operation.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_video_decode_output_stream_arguments" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS::pOutputTexture2D">
    <summary>An <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a> representing the output texture.  If decode conversion is enabled, this texture will contain the post-conversion output.  If decode conversion is not enabled, this texture will contain the decode output.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS::OutputSubresource">
    <summary>The index of the output subresource of <i>pOutputTexture2D</i> to use.  This allows you to specify array indices if the output is an array.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS::ConversionArguments">
    <summary>An optional <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_decode_conversion_arguments.md">D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS</a> structure containing output conversion parameters.</summary>
  </comment>
  <comment id="D3D12_VIDEO_MOTION_ESTIMATOR_INPUT">
    <summary>
      <para>Specifies the input parameters for calls to ID3D12VideoEncodeCommandList::EstimateMotion.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_video_motion_estimator_input" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_MOTION_ESTIMATOR_INPUT::pInputTexture2D">
    <summary>An <a href="https://docs.microsoft.com../d3d12/nn-d3d12-id3d12resource.md">ID3D12Resource</a> representing the current frame. The motion estimation operation applies to the entire frame.</summary>
  </comment>
  <comment id="D3D12_VIDEO_MOTION_ESTIMATOR_INPUT::InputSubresourceIndex">
    <summary>The base plane of the MIP and array slice to use for the input.</summary>
  </comment>
  <comment id="D3D12_VIDEO_MOTION_ESTIMATOR_INPUT::pReferenceTexture2D">
    <summary>An <a href="https://docs.microsoft.com../d3d12/nn-d3d12-id3d12resource.md">ID3D12Resource</a> representing the reference frame, or past frame, used for motion estimation.</summary>
  </comment>
  <comment id="D3D12_VIDEO_MOTION_ESTIMATOR_INPUT::ReferenceSubresourceIndex">
    <summary>The base plane of the MIP and array slice to use for the reference.</summary>
  </comment>
  <comment id="D3D12_VIDEO_MOTION_ESTIMATOR_INPUT::pHintMotionVectorHeap">
    <summary>An <a href="https://docs.microsoft.comnn-d3d12video-id3d12videomotionvectorheap.md">ID3D12VideoMotionVectorHeap</a> representing the buffer containing the hardware-dependent output of the previous motion estimator operation which may be used for hinting the current operation. This parameter may be NULL, indicating that previous motion estimator output should not be considered for the current operation.</summary>
  </comment>
  <comment id="ID3D12Device6">
    <summary>
      <para>Represents a virtual adapter. This interface extends <a href="https://docs.microsoft.com../d3d12/nn-d3d12-id3d12device5.md">ID3D12Device5</a>.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12device6" /></para>
    </summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::SetGraphicsRoot32BitConstants">
    <summary>
      <para>Sets a group of constants in the graphics root signature.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setgraphicsroot32bitconstants" /></para>
      <param name="RootParameterIndex">The slot number for binding.</param>
      <param name="Num32BitValuesToSet">The number of constants to set in the root signature.</param>
      <param name="pSrcData">The source data for the group of constants to set.</param>
      <param name="DestOffsetIn32BitValues">The offset, in 32-bit values, to set the first constant of the group in the root signature.</param>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT">
    <summary>
      <para>Specifies the output parameters for calls to ID3D12VideoEncodeCommandList::EstimateMotion.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_video_motion_estimator_output" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_MOTION_ESTIMATOR_OUTPUT::pMotionVectorHeap">
    <summary>An <a href="https://docs.microsoft.comnn-d3d12video-id3d12videomotionvectorheap.md">ID3D12VideoMotionVectorHeap</a> containing the resolved motion estimation vectors. Motion vectors are resolved to a <a href="https://docs.microsoft.com../dxgiformat/ne-dxgiformat-dxgi_format.md">DXGI_FORMAT_R16G16_SINT</a> 2D texture. The resolved data is a signed 16-byte integer with quarter PEL units with the X vector component stored in the R component and the Y vector component stored in the G component. Motion vectors are stored in a 2D layout that corresponds to the pixel layout of the original input textures.</summary>
  </comment>
  <comment id="ID3D12Device::CreatePlacedResource">
    <summary>
      <para>Creates a resource that is placed in a specific heap. Placed resources are the lightest weight resource objects available, and are the fastest to create and destroy.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-createplacedresource" /></para>
      <param name="pHeap">A pointer to the <b>ID3D12Heap</b> interface that represents the heap in which the resource is placed.</param>
      <param name="HeapOffset">The offset, in bytes, to the resource. The <i>HeapOffset</i> must be a multiple of the resource's alignment, and <i>HeapOffset</i> plus the resource size must be smaller than or equal to the heap size. <a href="https://docs.microsoft.com/windows/win32/api/d3d12/nf-d3d12-id3d12device-getresourceallocationinfo"><b>GetResourceAllocationInfo</b></a> must be used to understand the sizes of texture resources.</param>
      <param name="pDesc">A pointer to a <b>D3D12_RESOURCE_DESC</b> structure that describes the resource.</param>
      <param name="InitialState">The initial state of the resource, as a bitwise-OR'd combination of <b>D3D12_RESOURCE_STATES</b> enumeration constants.

When a resource is created together with a <b>D3D12_HEAP_TYPE_UPLOAD</b> heap, <i>InitialState</i> must be <b>D3D12_RESOURCE_STATE_GENERIC_READ</b>. When a resource is created together with a <b>D3D12_HEAP_TYPE_READBACK</b> heap, <i>InitialState</i> must be <b>D3D12_RESOURCE_STATE_COPY_DEST</b>.</param>
      <param name="pOptimizedClearValue">Specifies a <b>D3D12_CLEAR_VALUE</b> that describes the default value for a clear color.

<i>pOptimizedClearValue</i> specifies a value for which clear operations are most optimal. When the created resource is a texture with either the <b>D3D12_RESOURCE_FLAG_ALLOW_RENDER_TARGET</b> or <b>D3D12_RESOURCE_FLAG_ALLOW_DEPTH_STENCIL</b> flags, your application should choose the value that the clear operation will most commonly be called with.

Clear operations can be called with other values, but those operations will not be as efficient as when the value matches the one passed into resource creation.

<i>pOptimizedClearValue</i> must be NULL when used with <b>D3D12_RESOURCE_DIMENSION_BUFFER</b>.</param>
      <param name="riid">The globally unique identifier (<b>GUID</b>) for the resource interface. This is an input parameter.

The <b>REFIID</b>, or <b>GUID</b>, of the interface to the resource can be obtained by using the <c>__uuidof</c> macro. For example, <c>__uuidof(ID3D12Resource)</c> gets the <b>GUID</b> of the interface to a resource. Although <b>riid</b> is, most commonly, the GUID for <a href="https://docs.microsoft.com/windows/win32/api/d3d12/nn-d3d12-id3d12resource"><b>ID3D12Resource</b></a>, it may be any <b>GUID</b> for any interface. If the resource object doesn't support the interface for this <b>GUID</b>, then creation fails with <b>E_NOINTERFACE</b>.</param>
      <param name="ppvResource">A pointer to a memory block that receives a pointer to the resource. <i>ppvResource</i> can be NULL, to enable capability testing. When <i>ppvResource</i> is NULL, no object will be created and S_FALSE will be returned when <i>pResourceDesc</i> and other parameters are valid.</param>
    </summary>
  </comment>
  <comment id="D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE">
    <summary>
      <para>Specifies the type of shader patching used by GPU-Based Validation at either the device or command list level.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/ne-d3d12sdklayers-d3d12_gpu_based_validation_shader_patch_mode" /></para>
    </summary>
  </comment>
  <comment id="D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE::D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_NONE">
    <summary>No shader patching is to be done.  This will retain the original shader bytecode.  Can lead to errors in some of the GPU-Based Validation state tracking as the unpatched shader may still change resource state (see <a href="https://docs.microsoft.com/windows/desktop/direct3d12/using-resource-barriers-to-synchronize-resource-states-in-direct3d-12">Common state promotion</a>) but the promotion will be untracked without patching the shader.  This can improve performance but no validation will be performed and may also lead to misleading GPU-Based Validation errors. Use this mode very carefully.</summary>
  </comment>
  <comment id="D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE::D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_STATE_TRACKING_ONLY">
    <summary>Shaders can be patched with resource state tracking code but no validation.  This may improve performance but no validation will be performed.</summary>
  </comment>
  <comment id="D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE::D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_UNGUARDED_VALIDATION">
    <summary>The default. Shaders are patched with validation code but erroneous instructions will still be executed.</summary>
  </comment>
  <comment id="D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE::D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE_GUARDED_VALIDATION">
    <summary>Shaders are patched with validation code and erroneous instructions are skipped in execution.  This can help avoid crashes or device removal.</summary>
  </comment>
  <comment id="D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODE::NUM_D3D12_GPU_BASED_VALIDATION_SHADER_PATCH_MODES">
    <summary>Unused, simply the count of the number of modes.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::SetComputeRootDescriptorTable">
    <summary>
      <para>Sets a descriptor table into the compute root signature.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-setcomputerootdescriptortable" /></para>
      <param name="RootParameterIndex">The slot number for binding.</param>
      <param name="BaseDescriptor">A GPU_descriptor_handle object for the base descriptor to set.</param>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_MOTION_ESTIMATOR_DESC">
    <summary>
      <para>Describes a ID3D12VideoMotionEstimator. Pass this structure into ID3D12VideoDevice1::CreateVideoMotionEstimator to create an instance of ID3D12VideoMotionEstimator.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_video_motion_estimator_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_MOTION_ESTIMATOR_DESC::NodeMask">
    <summary>The node mask specifying the physical adapter on which the video processor will be used. For single GPU operation, set this to zero. If there are multiple GPU nodes, set a bit to identify the node, i.e. the device's physical adapter, to which the command queue applies. Each bit in the mask corresponds to a single node. Only 1 bit may be set.</summary>
  </comment>
  <comment id="D3D12_VIDEO_MOTION_ESTIMATOR_DESC::InputFormat">
    <summary>A value from the <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a> enumeration specifying the format of the input and reference frames.</summary>
  </comment>
  <comment id="D3D12_VIDEO_MOTION_ESTIMATOR_DESC::BlockSize">
    <summary>A value from the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_motion_estimator_search_block_size.md">D3D12_VIDEO_MOTION_ESTIMATOR_SEARCH_BLOCK_SIZE</a> enumeration specifying the search block size the video motion estimator will use.</summary>
  </comment>
  <comment id="D3D12_VIDEO_MOTION_ESTIMATOR_DESC::Precision">
    <summary>A value from the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_motion_estimator_vector_precision.md">D3D12_VIDEO_MOTION_ESTIMATOR_VECTOR_PRECISION</a> enumeration specifying the vector precision the video motion estimator will use.</summary>
  </comment>
  <comment id="D3D12_VIDEO_MOTION_ESTIMATOR_DESC::SizeRange">
    <summary>A <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_size_range.md">D3D12_VIDEO_SIZE_RANGE</a> structure representing the minimum and maximum input and reference frame size, in pixels, that the motion estimator will accept.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::EndQuery">
    <summary>
      <para>Ends a running query.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-endquery" /></para>
      <param name="pQueryHeap">Specifies the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12queryheap">ID3D12QueryHeap</a> containing the query.</param>
      <param name="Type">Specifies one member of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_query_type">D3D12_QUERY_TYPE</a>.</param>
      <param name="Index">Specifies the index of the query in the query heap.</param>
    </summary>
  </comment>
  <comment id="D3D12_CONSERVATIVE_RASTERIZATION_MODE">
    <summary>
      <para>Identifies whether conservative rasterization is on or off.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_conservative_rasterization_mode" /></para>
    </summary>
  </comment>
  <comment id="D3D12_CONSERVATIVE_RASTERIZATION_MODE::D3D12_CONSERVATIVE_RASTERIZATION_MODE_OFF">
    <summary>Conservative rasterization is off.</summary>
  </comment>
  <comment id="D3D12_CONSERVATIVE_RASTERIZATION_MODE::D3D12_CONSERVATIVE_RASTERIZATION_MODE_ON">
    <summary>Conservative rasterization is on.</summary>
  </comment>
  <comment id="ID3D12FunctionParameterReflection">
    <summary>
      <para>A function-parameter-reflection interface accesses function-parameter info.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nn-d3d12shader-id3d12functionparameterreflection" /></para>
    </summary>
  </comment>
  <comment id="ID3D12Resource::GetHeapProperties">
    <summary>
      <para>Retrieves the properties of the resource heap, for placed and committed resources.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12resource-getheapproperties" /></para>
      <param name="pHeapProperties">Pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_heap_properties">D3D12_HEAP_PROPERTIES</a> structure, that on successful completion of the method will contain the resource heap properties.</param>
      <param name="pHeapFlags">Specifies a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_heap_flags">D3D12_HEAP_FLAGS</a> variable, that on successful completion of the method will contain any miscellaneous heap flags.</param>
    </summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE">
    <summary>
      <para>Specifies the type of copy operation performed when calling CopyRaytracingAccelerationStructure.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_raytracing_acceleration_structure_copy_mode" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_CLONE">
    <summary>Copy an acceleration structure while fixing any self-referential pointers that may be present so that the destination is a self-contained copy of the source.  Any external pointers to other acceleration structures remain unchanged from source to destination in the copy.  The size of the destination is identical to the size of the source.

&gt; [!IMPORTANT]
&gt; The source memory must be in state [<b>D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE</b>](/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_states).
&gt; The destination memory must be in state [<b>D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE</b>](/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_states).</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_COMPACT">
    <summary>Produces a functionally equivalent acceleration structure to source in the destination, similar to the clone mode, but also fits the destination into a potentially smaller, and certainly not larger, memory footprint.  The size required for the destination can be retrieved beforehand from <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12graphicscommandlist4-emitraytracingaccelerationstructurepostbuildinfo">EmitRaytracingAccelerationStructurePostbuildInfo</a>.

This mode is only valid if the source acceleration structure was originally built with the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_raytracing_acceleration_structure_build_flags">D3D12_RAYTRACING_ACCELERATION_STRUCTURE_BUILD_FLAG_ALLOW_COMPACTION</a>  flag, otherwise results are undefined.

Compacting geometry requires the entire acceleration structure to be constructed, which is why you must first build and then compact the structure.

&gt; [!IMPORTANT]
&gt; The source memory must be in state [<b>D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE</b>](/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_states).
&gt; The destination memory must be in state [<b>D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE</b>](/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_states).</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_VISUALIZATION_DECODE_FOR_TOOLS">
    <summary>The destination is takes  the layout described in <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_build_raytracing_acceleration_structure_tools_visualization_header">D3D12_BUILD_RAYTRACING_ACCELERATION_STRUCTURE_TOOLS_VISUALIZATION_HEADER</a>.  The size required for the destination can be retrieved beforehand from <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12graphicscommandlist4-emitraytracingaccelerationstructurepostbuildinfo">EmitRaytracingAccelerationStructurePostbuildInfo</a>.

This mode is only intended for tools such as PIX, though nothing stops any app from using it.  The output is essentially the inverse of an acceleration structure build.  This overall structure with is sufficient for tools/PIX to be able to give the application some visual sense of the acceleration structure the driver made out of the app’s input.  Visualization can help reveal driver bugs in acceleration structures if what is shown grossly mismatches the data the application used to create the acceleration structure, beyond allowed tolerances.

For top-level acceleration structures, the output includes a set of instance descriptions that are identical to the data used in the original build and in the same order.  For bottom-level acceleration structures, the output includes a set of geometry descriptions roughly matching the data used in the original build.  The output is only a rough match for the original in part because of the tolerances allowed in the specification for acceleration structures and in part due to the inherent complexity of reporting exactly the same structure as is conceptually encoded.  For example. axis-aligned bounding boxes (AABBs) returned for procedural primitives could be more conservative (larger) in volume and even different in number than what is actually in the acceleration structure representation.  Geometries, each with its own geometry description, appear in the same order as in the original acceleration, as shader table indexing calculations depend on this.


&gt; [!IMPORTANT]
&gt; The source memory must be in state [<b>D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE</b>](/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_states).
&gt; The destination memory must be in state [<b>D3D12_RESOURCE_STATE_UNORDERED_ACCESS</b>](/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_states).

This mode is only permitted when developer mode is enabled in the OS.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_SERIALIZE">
    <summary>Destination takes the layout and size described in the documentation for <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_raytracing_acceleration_structure_postbuild_info_serialization_desc">D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC</a>, itself a structure generated with a call to <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12graphicscommandlist4-emitraytracingaccelerationstructurepostbuildinfo">EmitRaytracingAccelerationStructurePostbuildInfo</a>. 

This mode serializes an acceleration structure so that an app or tools can store it to a file for later reuse, typically on a different device instance, via deserialization.

When serializing a top-level acceleration structure, the bottom-level acceleration structures it refers to do not have to still be present or intact in memory.  Likewise, bottom-level acceleration structures can be serialized independent of whether any top-level acceleration structures are pointing to them.  In other words, the order of serialization of acceleration structures doesn’t matter.

&gt; [!IMPORTANT]
&gt; The source memory must be in state [<b>D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE</b>](/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_states).
&gt; The destination memory must be in state [<b>D3D12_RESOURCE_STATE_UNORDERED_ACCESS</b>](/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_states).</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE::D3D12_RAYTRACING_ACCELERATION_STRUCTURE_COPY_MODE_DESERIALIZE">
    <summary>The source must be a serialized acceleration structure, with any pointers, directly after the header, fixed to point to their new locations. For more information, see  <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_raytracing_acceleration_structure_postbuild_info_serialization_desc">D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC</a>.

The destination gets an acceleration structure that is functionally equivalent to the acceleration structure that was originally serialized.  It does not matter what order top-level and bottom-level acceleration structures are deserialized, as long as by the time a top-level acceleration structure is used for raytracing or acceleration structure updates the bottom-level acceleration structures it references are present.

Deserialization can only be performed on the same device and driver version on which the data was serialized. Otherwise, the results are undefined.  

This mode is only intended for tools such as PIX, though nothing stops any app from using it, but this mode is only permitted when developer mode is enabled in the OS.   This copy operation is not intended to be used for caching acceleration structures, because running a full acceleration structure build is likely to be faster than loading one from disk.  


&gt; [!IMPORTANT]
&gt; The source memory must be in state [<b>D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE</b>](/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_states).
&gt; The destination memory must be in state [<b>D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE</b>](/windows/desktop/api/d3d12/ne-d3d12-d3d12_resource_states).</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT">
    <summary>
      <para>Retrieves the supported number of parameters for the specified parameter stage.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_feature_data_video_extension_command_parameter_count" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT::CommandId">
    <summary>The unique identifier for the video extension command for which the parameter count is queried.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT::Stage">
    <summary>A member of the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_extension_command_parameter_stage.md">D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE</a> enumeration specifying the parameter stage for which the parameter count is retrieved.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT::ParameterCount">
    <summary>Receives the number of parameters in the parameter stage.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT::ParameterPacking">
    <summary>Receives the parameter packing for the parameter stage.</summary>
  </comment>
  <comment id="ID3D12InfoQueue::SetBreakOnCategory">
    <summary>
      <para>Set a message category to break on when a message with that category passes through the storage filter.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-setbreakoncategory" /></para>
      <param name="Category">Message category to break on.</param>
      <param name="bEnable">Turns this breaking condition on or off (true for on, false for off).</param>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1">
    <summary>
      <para>Specifies the parameters for the output stream for a video decode operation.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_video_decode_output_stream_arguments1" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1::pOutputTexture2D">
    <summary>An <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a> representing the output texture.  If decode conversion is enabled, this texture will contain the post-conversion output.  If decode conversion is not enabled, this texture will contain the decode output.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1::OutputSubresource">
    <summary>The index of the output subresource of <i>pOutputTexture2D</i> to use.  This allows you to specify array indices if the output is an array.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1::ConversionArguments">
    <summary>An optional <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_decode_conversion_arguments.md">D3D12_VIDEO_DECODE_CONVERSION_ARGUMENTS</a> structure containing output conversion parameters.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_OUTPUT_STREAM_ARGUMENTS1::Histograms">
    <summary>An array of <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_decode_output_histogram.md">D3D12_VIDEO_DECODE_OUTPUT_HISTOGRAM</a> structures that are populated with histogram data. The maximum size of the array is 4.</summary>
  </comment>
  <comment id="ID3D12ShaderReflection::GetBitwiseInstructionCount">
    <summary>
      <para>Gets the number of bitwise instructions.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getbitwiseinstructioncount" /></para>
    </summary>
  </comment>
  <comment id="ID3D12Device::GetResourceAllocationInfo">
    <summary>
      <para>Gets the size and alignment of memory required for a collection of resources on this adapter.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-getresourceallocationinfo" /></para>
      <param name="visibleMask">For single-GPU operation, set this to zero. If there are multiple GPU nodes, then set bits to identify the nodes (the device's physical adapters). Each bit in the mask corresponds to a single node. Also see [Multi-adapter systems](/windows/win32/direct3d12/multi-engine).</param>
      <param name="numResourceDescs">The number of resource descriptors in the <i>pResourceDescs</i> array.</param>
      <param name="pResourceDescs">An array of <b>D3D12_RESOURCE_DESC</b> structures that described the resources to get info about.</param>
    </summary>
  </comment>
  <comment id="ID3D12VideoExtensionCommand">
    <summary>
      <para>A reference counted object representing the video extension command.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/nn-d3d12video-id3d12videoextensioncommand" /></para>
    </summary>
  </comment>
  <comment id="ID3D12ProtectedResourceSession1">
    <summary>
      <para>Monitors the validity of a protected resource session.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12protectedresourcesession1" /></para>
    </summary>
  </comment>
  <comment id="D3D12_COMMAND_LIST_SUPPORT_FLAGS">
    <summary>
      <para>Used to determine which kinds of command lists are capable of supporting various operations.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_command_list_support_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_COMMAND_LIST_SUPPORT_FLAGS::D3D12_COMMAND_LIST_SUPPORT_FLAG_NONE">
    <summary>Specifies that no command list supports the operation in question.</summary>
  </comment>
  <comment id="D3D12_COMMAND_LIST_SUPPORT_FLAGS::D3D12_COMMAND_LIST_SUPPORT_FLAG_DIRECT">
    <summary>Specifies that direct command lists can support the operation in question.</summary>
  </comment>
  <comment id="D3D12_COMMAND_LIST_SUPPORT_FLAGS::D3D12_COMMAND_LIST_SUPPORT_FLAG_BUNDLE">
    <summary>Specifies that command list bundles can support the operation in question.</summary>
  </comment>
  <comment id="D3D12_COMMAND_LIST_SUPPORT_FLAGS::D3D12_COMMAND_LIST_SUPPORT_FLAG_COMPUTE">
    <summary>Specifies that compute command lists can support the operation in question.</summary>
  </comment>
  <comment id="D3D12_COMMAND_LIST_SUPPORT_FLAGS::D3D12_COMMAND_LIST_SUPPORT_FLAG_COPY">
    <summary>Specifies that copy command lists can support the operation in question.</summary>
  </comment>
  <comment id="D3D12_COMMAND_LIST_SUPPORT_FLAGS::D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_DECODE">
    <summary>Specifies that video-decode command lists can support the operation in question.</summary>
  </comment>
  <comment id="D3D12_COMMAND_LIST_SUPPORT_FLAGS::D3D12_COMMAND_LIST_SUPPORT_FLAG_VIDEO_PROCESS">
    <summary>Specifies that video-processing command lists can support the operation is question.</summary>
  </comment>
  <comment id="ID3D12Pageable">
    <summary>
      <para>An interface from which many other core interfaces inherit from. It indicates that the object type encapsulates some amount of GPU-accessible memory; but does not strongly indicate whether the application can manipulate the object's residency.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nn-d3d12-id3d12pageable" /></para>
    </summary>
  </comment>
  <comment id="ID3D12InfoQueue::GetNumStoredMessagesAllowedByRetrievalFilter">
    <summary>
      <para>Get the number of messages that are able to pass through a retrieval filter.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getnumstoredmessagesallowedbyretrievalfilter" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC">
    <summary>
      <para>Specifies the parameters for the input stream for a video process operation.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_video_process_input_stream_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC::Format">
    <summary>A value from the <a href="https://docs.microsoft.com/windows/desktop/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a> enumeration specifying the format of the input stream. In the case of stereo, this format is the format of both inputs.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC::ColorSpace">
    <summary>A value from the <a href="https://docs.microsoft.com/windows/desktop/api/dxgicommon/ne-dxgicommon-dxgi_color_space_type">DXGI_COLOR_SPACE_TYPE</a> enumeration specifying the color space of the video processor input and reference surfaces.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC::SourceAspectRatio">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/dxgicommon/ns-dxgicommon-dxgi_rational">DXGI_RATIONAL</a> structure specifying the source aspect ratio.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC::DestinationAspectRatio">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/dxgicommon/ns-dxgicommon-dxgi_rational">DXGI_RATIONAL</a> structure specifying the destination aspect ratio.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC::FrameRate">
    <summary>A <a href="https://docs.microsoft.com/windows/desktop/api/dxgicommon/ns-dxgicommon-dxgi_rational">DXGI_RATIONAL</a> structure specifying the frame rate of the input video stream.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC::SourceSizeRange">
    <summary>A <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_size_range.md">D3D12_VIDEO_SIZE_RANGE</a> structure representing the size of the source rectangle. This argument specifies the input range size this video processor must support for <a href="https://docs.microsoft.comnf-d3d12video-id3d12videoprocesscommandlist-processframes.md">ProcessFrames</a>.  If a source size exceeds the range, the video processor must be recreated.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC::DestinationSizeRange">
    <summary>A <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_size_range.md">D3D12_VIDEO_SIZE_RANGE</a> structure representing the size of the destination rectangle. This argument specifies the destination range size this video processor must support for <a href="https://docs.microsoft.comnf-d3d12video-id3d12videoprocesscommandlist-processframes.md">ProcessFrames</a>.  If a source size exceeds the range, the video processor must be recreated.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC::EnableOrientation">
    <summary>A boolean value specifying whether the video processor should support all <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_process_orientation.md">D3D12_VIDEO_PROCESS_ORIENTATION</a> for <a href="https://docs.microsoft.comnf-d3d12video-id3d12videoprocesscommandlist-processframes.md">ProcessFrames</a>.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC::FilterFlags">
    <summary>A bitwise OR combination of one or more flags from the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_process_filter_flags.md">D3D12_VIDEO_PROCESS_FILTER_FLAGS</a> enumeration specifying the filters to enable.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC::StereoFormat">
    <summary>A value from the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_frame_stereo_format.md">D3D12_VIDEO_FRAME_STEREO_FORMAT</a> enumeration specifies whether the stream is stereo or not. A value of <b>D3D12_VIDEO_PROCESS_STEREO_FORMAT_SEPARATE</b> indicates that there will be two sets of input textures, and two sets of references for the stereo interlaced case.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC::FieldType">
    <summary>A value from the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_field_type.md">D3D12_VIDEO_FIELD_TYPE</a> enumeration specfying the interlaced field type of the input source. When working with mixed content, use [ID3D12VideoProcessCommandList1::ProcessFrames1](nf-d3d12video-id3d12videoprocesscommandlist1-processframes1.md) which supports changing the field type for each call.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC::DeinterlaceMode">
    <summary>A value from the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_process_deinterlace_flags.md">D3D12_VIDEO_PROCESS_DEINTERLACE_FLAGS</a> enumeration specifying the deinterlace mode to use.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC::EnableAlphaBlending">
    <summary>A boolean value specifying whether alpha blending is enabled. Alpha blending settings are provided to <a href="https://docs.microsoft.comnf-d3d12video-id3d12videoprocesscommandlist-processframes.md">ProcessFrames</a> with <i>AlphaBlending</i> the field of the <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_process_input_stream_arguments.md">D3D12_VIDEO_PROCESS_INPUT_STREAM_ARGUMENTS</a> structure.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC::LumaKey">
    <summary>A <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_process_luma_key.md">D3D12_VIDEO_PROCESS_LUMA_KEY</a> structure specifying the luma key for an input stream on the video processor.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC::NumPastFrames">
    <summary>An integer specifying the number of past reference frames.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC::NumFutureFrames">
    <summary>An integer specifying the number of future reference frames.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_INPUT_STREAM_DESC::EnableAutoProcessing">
    <summary>A boolean value specifying wither automatic processing features are enabled for the video processor.</summary>
  </comment>
  <comment id="ID3D12Device::GetDescriptorHandleIncrementSize">
    <summary>
      <para>Gets the size of the handle increment for the given type of descriptor heap. This value is typically used to increment a handle into a descriptor array by the correct amount.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12device-getdescriptorhandleincrementsize" /></para>
      <param name="DescriptorHeapType">The <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_descriptor_heap_type">D3D12_DESCRIPTOR_HEAP_TYPE</a>-typed value that specifies the type of descriptor heap to get the size of the handle increment for.</param>
    </summary>
  </comment>
  <comment id="ID3D12RootSignatureDeserializer::GetRootSignatureDesc">
    <summary>
      <para>Gets the layout of the root signature.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12rootsignaturedeserializer-getrootsignaturedesc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS">
    <summary>
      <para>Specifies whether a video decode conversion operation is supported.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ne-d3d12video-d3d12_video_decode_conversion_support_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS::D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAG_NONE">
    <summary>The video decode conversion operation isn't supported.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAGS::D3D12_VIDEO_DECODE_CONVERSION_SUPPORT_FLAG_SUPPORTED">
    <summary>The video decode conversion operation is supported.</summary>
  </comment>
  <comment id="ID3D12ShaderReflectionVariable::GetInterfaceSlot">
    <summary>
      <para>Gets the corresponding interface slot for a variable that represents an interface pointer.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflectionvariable-getinterfaceslot" /></para>
      <param name="uArrayIndex">The index of the array element to get the slot number for.
            For a non-array variable this value will be zero.</param>
    </summary>
  </comment>
  <comment id="ID3D12Debug3">
    <summary>
      <para>Adds configurable levels of GPU-based validation to the debug layer.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nn-d3d12sdklayers-id3d12debug3" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_FILTER_RANGE">
    <summary>
      <para>Defines the range of supported values for an image filter.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_video_process_filter_range" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_FILTER_RANGE::Minimum">
    <summary>The minimum value of the filter.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_FILTER_RANGE::Maximum">
    <summary>The maximum value of the filter.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_FILTER_RANGE::Default">
    <summary>The default value of the filter.</summary>
  </comment>
  <comment id="D3D12_VIDEO_PROCESS_FILTER_RANGE::Multiplier">
    <summary>A multiplier. Use the following formula to translate the filter setting into the actual filter value: 

<c>Actual Value = Set Value × Multiplier.</c></summary>
  </comment>
  <comment id="ID3D12InfoQueue::GetBreakOnSeverity">
    <summary>
      <para>Get a message severity level to break on when a message with that severity level passes through the storage filter.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-getbreakonseverity" /></para>
      <param name="Severity">Message severity level to break on.</param>
    </summary>
  </comment>
  <comment id="D3D12_RESIDENCY_FLAGS">
    <summary>
      <para>Used with the EnqueuMakeResident function to choose how residency operations proceed when the memory budget is exceeded.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_residency_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RESIDENCY_FLAGS::D3D12_RESIDENCY_FLAG_NONE">
    <summary>Specifies the default residency policy, which allows residency operations to succeed regardless of the application's current memory budget. EnqueueMakeResident returns E_OUTOFMEMORY only when there is no memory available.</summary>
  </comment>
  <comment id="D3D12_RESIDENCY_FLAGS::D3D12_RESIDENCY_FLAG_DENY_OVERBUDGET">
    <summary>Specifies that the EnqueueMakeResident function should return E_OUTOFMEMORY when the residency operation would exceed the application's current memory budget.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_STATES">
    <summary>
      <para>Defines constants that specify the state of a resource regarding how the resource is being used.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_resource_states" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_COMMON">
    <summary>Your application should transition to this state only for accessing a resource across different graphics engine types.

Specifically, a resource must be in the COMMON state before being used on a COPY queue (when previous used on DIRECT/COMPUTE), and before being used on DIRECT/COMPUTE (when previously used on COPY). This restriction does not exist when accessing data between DIRECT and COMPUTE queues.

The COMMON state can be used for all usages on a Copy queue using the implicit state transitions. For more info, in <a href="https://docs.microsoft.com/windows/win32/direct3d12/user-mode-heap-synchronization">Multi-engine synchronization</a>, find "common".          

Additionally, textures must be in the COMMON state for CPU access to be legal, assuming the texture was created in a CPU-visible heap in the first place.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_VERTEX_AND_CONSTANT_BUFFER">
    <summary>A subresource must be in this state when it is accessed by the GPU as a vertex buffer or constant buffer. This is a read-only state.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_INDEX_BUFFER">
    <summary>A subresource must be in this state when it is accessed by the 3D pipeline as an index buffer. This is a read-only state.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_RENDER_TARGET">
    <summary>The resource is used as a render target. A subresource must be in this state when it is rendered to or when it is cleared with <a href="https://docs.microsoft.com/windows/win32/api/d3d12/nf-d3d12-id3d12graphicscommandlist-clearrendertargetview">ID3D12GraphicsCommandList::ClearRenderTargetView</a>.

This is a write-only state. To read from a render target as a shader resource the resource must be in either  D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE or D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_UNORDERED_ACCESS">
    <summary>The resource is used for unordered access. A subresource must be in this state when it is accessed by the GPU via an unordered access view. A subresource must also be in this state when it is cleared with <a href="https://docs.microsoft.com/windows/win32/api/d3d12/nf-d3d12-id3d12graphicscommandlist-clearunorderedaccessviewuint">ID3D12GraphicsCommandList::ClearUnorderedAccessViewInt</a> or <a href="https://docs.microsoft.com/windows/win32/api/d3d12/nf-d3d12-id3d12graphicscommandlist-clearunorderedaccessviewfloat">ID3D12GraphicsCommandList::ClearUnorderedAccessViewFloat</a>. This is a read/write state.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_DEPTH_WRITE">
    <summary><b>D3D12_RESOURCE_STATE_DEPTH_WRITE</b> is a state that is mutually exclusive with other states. You should use it for <a href="https://docs.microsoft.com/windows/win32/api/d3d12/nf-d3d12-id3d12graphicscommandlist-cleardepthstencilview">ID3D12GraphicsCommandList::ClearDepthStencilView</a> when the flags (see <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_clear_flags">D3D12_CLEAR_FLAGS</a>) indicate a given subresource should be cleared (otherwise the subresource state doesn't matter), or when using it in a writable depth stencil view (see <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_dsv_flags">D3D12_DSV_FLAGS</a>) when the PSO has depth write enabled (see <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_depth_stencil_desc">D3D12_DEPTH_STENCIL_DESC</a>).</summary>
  </comment>
  <comment id="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_DEPTH_READ">
    <summary>DEPTH_READ is a state which can be combined with other states. It should be used when the subresource is in a read-only depth stencil view, or when the <i>DepthEnable</i> parameter of <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ns-d3d12-d3d12_depth_stencil_desc">D3D12_DEPTH_STENCIL_DESC</a> is false. It can be combined with other read states (for example, D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE), such that the resource can be used for the depth or stencil test, and accessed by a shader within the same draw call. Using it when depth will be written by a draw call or clear command is invalid.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_NON_PIXEL_SHADER_RESOURCE">
    <summary>The resource is used with a shader other than the pixel shader. A subresource must be in this state before being read by any stage (except for the pixel shader stage) via a shader resource view. You can still use the resource in a pixel shader with this flag as long as it also has the flag D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE set. This is a read-only state.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE">
    <summary>The resource is used with a pixel shader. A subresource must be in this state before being read by the pixel shader via a shader resource view. This is a read-only state.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_STREAM_OUT">
    <summary>The resource is used with stream output. A subresource must be in this state when it is accessed by the 3D pipeline as a stream-out target. This is a write-only state.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_INDIRECT_ARGUMENT">
    <summary>The resource is used as an indirect argument.
            Subresources must be in this state when they are used as the argument buffer passed to the indirect drawing method <a href="https://docs.microsoft.com/windows/win32/api/d3d12/nf-d3d12-id3d12graphicscommandlist-executeindirect">ID3D12GraphicsCommandList::ExecuteIndirect</a>.
            This is a read-only state.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_COPY_DEST">
    <summary>The resource is used as the destination in a copy operation.
            Subresources must be in this state when they are used as the destination of copy operation, or a blt operation.
            This is a write-only state.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_COPY_SOURCE">
    <summary>The resource is used as the source in a copy operation.
            Subresources must be in this state when they are used as the source of copy operation, or a blt operation.
            This is a read-only state.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_RESOLVE_DEST">
    <summary>The resource is used as the destination in a resolve operation.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_RESOLVE_SOURCE">
    <summary>The resource is used as the source in a resolve operation.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_RAYTRACING_ACCELERATION_STRUCTURE">
    <summary>When a buffer is created with this as its initial state, it indicates that the resource is a raytracing acceleration structure, for use in <a href="nf-d3d12-id3d12graphicscommandlist4-buildraytracingaccelerationstructure.md">ID3D12GraphicsCommandList4::BuildRaytracingAccelerationStructure</a>, <a href="nf-d3d12-id3d12graphicscommandlist4-copyraytracingaccelerationstructure.md">ID3D12GraphicsCommandList4::CopyRaytracingAccelerationStructure</a>, or <a href="nf-d3d12-id3d12device-createshaderresourceview.md">ID3D12Device::CreateShaderResourceView</a> for the <a href="ne-d3d12-d3d12_srv_dimension.md">D3D12_SRV_DIMENSION_RAYTRACING_ACCELERATION_STRUCTURE</a> dimension.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_SHADING_RATE_SOURCE">
    <summary>Starting with Windows 10, version 1903 (10.0; Build 18362), indicates that the resource is a screen-space shading-rate image for variable-rate shading (VRS). For more info, see <a href="https://docs.microsoft.com/windows/win32/direct3d12/vrs">Variable-rate shading (VRS)</a>.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_GENERIC_READ">
    <summary>D3D12_RESOURCE_STATE_GENERIC_READ is a logically OR'd combination of other read-state bits. This is the required starting state for an upload heap. Your application should generally avoid transitioning to D3D12_RESOURCE_STATE_GENERIC_READ when possible, since that can result in premature cache flushes, or resource layout changes (for example, compress/decompress), causing unnecessary pipeline stalls. You should instead transition resources only to the actually-used states.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_PRESENT">
    <summary>Synonymous with D3D12_RESOURCE_STATE_COMMON.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_PREDICATION">
    <summary>The resource is used for <a href="https://docs.microsoft.com/windows/win32/direct3d12/predication">Predication</a>.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_VIDEO_DECODE_READ">
    <summary>The resource is used as a source in a decode operation. Examples include reading the compressed bitstream and reading from decode references,</summary>
  </comment>
  <comment id="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_VIDEO_DECODE_WRITE">
    <summary>The resource is used as a destination in the decode operation. This state is used for decode output and histograms.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_VIDEO_PROCESS_READ">
    <summary>The resource is used to read video data during video processing; that is, the resource is used as the source in a processing operation such as video encoding (compression).</summary>
  </comment>
  <comment id="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_VIDEO_PROCESS_WRITE">
    <summary>The resource is used to write video data during video processing; that is, the resource is used as the destination in a processing operation such as video encoding (compression).</summary>
  </comment>
  <comment id="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_VIDEO_ENCODE_READ">
    <summary>The resource is used as the source in an encode operation. This state is used for the input and reference of motion estimation.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_STATES::D3D12_RESOURCE_STATE_VIDEO_ENCODE_WRITE">
    <summary>This resource is used as the destination in an encode operation. This state is used for the destination texture of a resolve motion vector heap operation.</summary>
  </comment>
  <comment id="ID3D12Tools::EnableShaderInstrumentation">
    <summary>
      <para>This method enables tools such as PIX to instrument shaders.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12tools-enableshaderinstrumentation" /></para>
      <param name="bEnable">TRUE to enable shader instrumentation; otherwise, FALSE.</param>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_CROSS_NODE">
    <summary>
      <para>Indicates the level of support for the sharing of resources between different adapters—for example, multiple GPUs.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_feature_data_cross_node" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_CROSS_NODE::SharingTier">
    <summary>Indicates the tier of cross-adapter sharing support.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_CROSS_NODE::AtomicShaderInstructions">
    <summary>Indicates there is support for shader instructions which operate across adapters.</summary>
  </comment>
  <comment id="ID3D12ShaderReflectionType::GetNumInterfaces">
    <summary>
      <para>Gets the number of interfaces.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflectiontype-getnuminterfaces" /></para>
    </summary>
  </comment>
  <comment id="ID3D12ShaderReflection::GetMovInstructionCount">
    <summary>
      <para>Gets the number of Mov instructions.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12shaderreflection-getmovinstructioncount" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS">
    <summary>
      <para>Retrieves the list of video extension command parameters for the specified parameter stage.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_feature_data_video_extension_command_parameters" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS::CommandId">
    <summary>The unique identifier for the video extension command for which parameters are retrieved.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS::Stage">
    <summary>A member of the <a href="https://docs.microsoft.comne-d3d12video-d3d12_video_extension_command_parameter_stage.md">D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_STAGE</a> enumeration specifying the parameter stage for which the parameters are retrieved.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS::ParameterCount">
    <summary>The supported number of video extension command parameters. This value must be the count returned by a call to[ID3D12VideoDevice::CheckFeatureSupport](nf-d3d12video-id3d12videodevice-checkfeaturesupport.md) with  <a href="https://docs.microsoft.comne-d3d12video-d3d12_feature_video.md">D3D12_FEATURE_VIDEO_EXTENSION_COMMAND_PARAMETER_COUNT</a> specified as the feature.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_VIDEO_EXTENSION_COMMAND_PARAMETERS::pParameterInfos">
    <summary>Receives a list of <a href="https://docs.microsoft.comns-d3d12video-d3d12_video_extension_command_parameter_info.md">D3D12_VIDEO_EXTENSION_COMMAND_PARAMETER_INFO</a> structures describing video extension command parameters.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS1">
    <summary>
      <para>Describes the level of support for HLSL 6.0 wave operations.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_feature_data_d3d12_options1" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS1::WaveOps">
    <summary>True if the driver supports HLSL 6.0 wave operations.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS1::WaveLaneCountMin">
    <summary>Specifies the baseline number of lanes in the SIMD wave that this implementation can support. This term is sometimes known as "wavefront size" or "warp width". Currently apps should rely only on this minimum value for sizing workloads.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS1::WaveLaneCountMax">
    <summary>Specifies the maximum number of lanes in the SIMD wave that this implementation can support. This capability is reserved for future expansion, and is not expected to be used by current applications.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS1::TotalLaneCount">
    <summary>Specifies the total number of SIMD lanes on the hardware.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS1::ExpandedComputeResourceStates">
    <summary>Indicates transitions are possible  in and out of the CBV, and indirect argument states, on compute command lists. If <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12device-checkfeaturesupport">CheckFeatureSupport</a> succeeds this value will always be true.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_D3D12_OPTIONS1::Int64ShaderOps">
    <summary>Indicates that 64bit integer operations are supported.</summary>
  </comment>
  <comment id="ID3D12VideoDecoder1">
    <summary>
      <para>Represents a Direct3D 12 video decoder that contains resolution-independent resources and state for performing the decode operation. Adds support for protected resources.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/nn-d3d12video-id3d12videodecoder1" /></para>
    </summary>
  </comment>
  <comment id="D3D12_CROSS_NODE_SHARING_TIER">
    <summary>
      <para>Specifies the level of sharing across nodes of an adapter, such as Tier 1 Emulated, Tier 1, or Tier 2.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_cross_node_sharing_tier" /></para>
    </summary>
  </comment>
  <comment id="D3D12_CROSS_NODE_SHARING_TIER::D3D12_CROSS_NODE_SHARING_TIER_NOT_SUPPORTED">
    <summary>If an adapter has only 1 node, then cross-node sharing doesn't apply, so the <b>CrossNodeSharingTier</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_feature_data_d3d12_options">D3D12_FEATURE_DATA_D3D12_OPTIONS</a> structure is set to D3D12_CROSS_NODE_SHARING_NOT_SUPPORTED.</summary>
  </comment>
  <comment id="D3D12_CROSS_NODE_SHARING_TIER::D3D12_CROSS_NODE_SHARING_TIER_1_EMULATED">
    <summary>Tier 1 Emulated. Devices that set the <b>CrossNodeSharingTier</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_feature_data_d3d12_options">D3D12_FEATURE_DATA_D3D12_OPTIONS</a> structure to D3D12_CROSS_NODE_SHARING_TIER_1_EMULATED have Tier 1 support.
However, drivers stage these copy operations through a driver-internal system memory allocation. This will cause these copy operations to consume time on the destination GPU as well as the source.</summary>
  </comment>
  <comment id="D3D12_CROSS_NODE_SHARING_TIER::D3D12_CROSS_NODE_SHARING_TIER_1">
    <summary>Tier 1. Devices that set the <b>CrossNodeSharingTier</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_feature_data_d3d12_options">D3D12_FEATURE_DATA_D3D12_OPTIONS</a> structure to D3D12_CROSS_NODE_SHARING_TIER_1 only support the following cross-node copy operations:

<ul>
<li><a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12graphicscommandlist-copybufferregion">ID3D12CommandList::CopyBufferRegion</a></li>
<li><a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12graphicscommandlist-copytextureregion">ID3D12CommandList::CopyTextureRegion</a></li>
<li><a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12graphicscommandlist-copyresource">ID3D12CommandList::CopyResource</a></li>
</ul>

Additionally, the cross-node resource must be the destination of the copy operation.</summary>
  </comment>
  <comment id="D3D12_CROSS_NODE_SHARING_TIER::D3D12_CROSS_NODE_SHARING_TIER_2">
    <summary>Tier 2. Devices that set the <b>CrossNodeSharingTier</b> member of the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_feature_data_d3d12_options">D3D12_FEATURE_DATA_D3D12_OPTIONS</a> structure to D3D12_CROSS_NODE_SHARING_TIER_2 support all operations across nodes, except for the following:

<ul>
<li>Render target views.</li>
<li>Depth stencil views.</li>
<li>UAV atomic operations. Similar to CPU/GPU interop, shaders may perform UAV atomic operations; however, no atomicity across adapters is guaranteed.</li>
</ul>
Applications can retrieve the node where a resource/heap exists from the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_heap_desc">D3D12_HEAP_DESC</a> structure. These values are retrievable for opened resources. The runtime performs the appropriate re-mapping in case the 2 devices are using different UMD-specified node re-mappings.</summary>
  </comment>
  <comment id="D3D12_CROSS_NODE_SHARING_TIER::D3D12_CROSS_NODE_SHARING_TIER_3">
    <summary>Indicates support for [<b>D3D12_HEAP_FLAG_ALLOW_SHADER_ATOMICS</b>](./ne-d3d12-d3d12_heap_flags.md) on heaps that are visible to multiple nodes.</summary>
  </comment>
  <comment id="ID3D12DebugCommandList1">
    <summary>
      <para>This interface enables modification of additional command list debug layer settings.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nn-d3d12sdklayers-id3d12debugcommandlist1" /></para>
    </summary>
  </comment>
  <comment id="D3D12_STATE_OBJECT_CONFIG">
    <summary>
      <para>Defines general properties of a state object.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_state_object_config" /></para>
    </summary>
  </comment>
  <comment id="D3D12_STATE_OBJECT_CONFIG::Flags">
    <summary>A value from the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ne-d3d12-d3d12_state_object_flags">D3D12_STATE_OBJECT_FLAGS</a> flags enumeration that specifies the requirements for the state object.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_QUERY_META_COMMAND">
    <summary>
      <para>Indicates the level of support that the adapter provides for metacommands.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_feature_data_query_meta_command" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_QUERY_META_COMMAND::CommandId">
    <summary>The fixed GUID that identfies the metacommand to query about.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_QUERY_META_COMMAND::NodeMask">
    <summary>For single GPU operation, this is zero. If there are multiple GPU nodes, a bit is set to identify a node (the device's physical adapter). Each bit in the mask corresponds to a single node. Only 1 bit must be set. Refer to [Multi-adapter systems](/windows/win32/direct3d12/multi-engine).</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_QUERY_META_COMMAND::pQueryInputData">
    <summary>A pointer to a buffer containing the query input data. Allocate <i>QueryInputDataSizeInBytes</i> bytes.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_QUERY_META_COMMAND::QueryInputDataSizeInBytes">
    <summary>The size of the buffer pointed to by <i>pQueryInputData</i>, in bytes.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_QUERY_META_COMMAND::pQueryOutputData">
    <summary>A pointer to a buffer containing the query output data.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_QUERY_META_COMMAND::QueryOutputDataSizeInBytes">
    <summary>The size of the buffer pointed to by <i>pQueryOutputData</i>, in bytes.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_DESC1">
    <summary>
      <para>Describes a resource, such as a texture, including a mip region. This structure is used in several methods.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_resource_desc1" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RESOURCE_DESC1::Dimension">
    <summary>One member of <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_resource_dimension">D3D12_RESOURCE_DIMENSION</a>, specifying the dimensions of the resource (for example, D3D12_RESOURCE_DIMENSION_TEXTURE1D), or whether it is a buffer ((D3D12_RESOURCE_DIMENSION_BUFFER).</summary>
  </comment>
  <comment id="D3D12_RESOURCE_DESC1::Alignment">
    <summary>Specifies the alignment.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_DESC1::Width">
    <summary>Specifies the width of the resource.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_DESC1::Height">
    <summary>Specifies the height of the resource.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_DESC1::DepthOrArraySize">
    <summary>Specifies the depth of the resource, if it is 3D, or the array size if it is an array of 1D or 2D resources.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_DESC1::MipLevels">
    <summary>Specifies the number of MIP levels.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_DESC1::Format">
    <summary>Specifies one member of <a href="https://docs.microsoft.com/windows/win32/api/dxgiformat/ne-dxgiformat-dxgi_format">DXGI_FORMAT</a>.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_DESC1::SampleDesc">
    <summary>Specifies a <a href="https://docs.microsoft.com/windows/win32/api/dxgicommon/ns-dxgicommon-dxgi_sample_desc">DXGI_SAMPLE_DESC</a> structure.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_DESC1::Layout">
    <summary>Specifies one member of <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_texture_layout">D3D12_TEXTURE_LAYOUT</a>.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_DESC1::Flags">
    <summary>Bitwise-OR'd flags, as <a href="https://docs.microsoft.com/windows/win32/api/d3d12/ne-d3d12-d3d12_resource_flags">D3D12_RESOURCE_FLAGS</a> enumeration constants.</summary>
  </comment>
  <comment id="D3D12_RESOURCE_DESC1::SamplerFeedbackMipRegion">
    <summary>A <a href="https://docs.microsoft.com./ns-d3d12-d3d12_mip_region.md">D3D12_MIP_REGION</a> struct.</summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList1::OMSetDepthBounds">
    <summary>
      <para>This method enables you to change the depth bounds dynamically.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist1-omsetdepthbounds" /></para>
      <param name="Min"><a href="https://docs.microsoft.com/visualstudio/code-quality/annotating-function-parameters-and-return-values?view=vs-2015">SAL</a>: <c>_In_</c>

Specifies the minimum depth bounds. The default value is 0. NaN values silently convert to 0.</param>
      <param name="Max"><a href="https://docs.microsoft.com/visualstudio/code-quality/annotating-function-parameters-and-return-values?view=vs-2015">SAL</a>: <c>_In_</c>

Specifies the maximum depth bounds. The default value is 1. NaN values silently convert to 0.</param>
    </summary>
  </comment>
  <comment id="D3D12_BLEND_DESC">
    <summary>
      <para>Describes the blend state.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_blend_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_BLEND_DESC::AlphaToCoverageEnable">
    <summary>Specifies whether to use alpha-to-coverage as a multisampling technique when setting a pixel to a render target. For more info about using alpha-to-coverage, see <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d10-graphics-programming-guide-blend-state">Alpha-To-Coverage</a>.</summary>
  </comment>
  <comment id="D3D12_BLEND_DESC::IndependentBlendEnable">
    <summary>Specifies whether to enable independent blending in simultaneous render targets. Set to <b>TRUE</b> to enable independent blending. If set to <b>FALSE</b>, only the <b>RenderTarget</b>[0] members are used; <b>RenderTarget</b>[1..7] are ignored.

See the <b>Remarks</b> section for restrictions.</summary>
  </comment>
  <comment id="D3D12_BLEND_DESC::RenderTarget">
    <summary>An array of <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_render_target_blend_desc">D3D12_RENDER_TARGET_BLEND_DESC</a> structures that describe the blend states for render targets; these correspond to the eight render targets that can be bound to the <a href="https://docs.microsoft.com/windows/desktop/direct3d11/d3d10-graphics-programming-guide-output-merger-stage">output-merger stage</a> at one time.</summary>
  </comment>
  <comment id="ID3D12ShaderReflection">
    <summary>
      <para>A shader-reflection interface accesses shader information.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nn-d3d12shader-id3d12shaderreflection" /></para>
    </summary>
  </comment>
  <comment id="ID3D12FunctionReflection::GetConstantBufferByName">
    <summary>
      <para>Gets a constant buffer by name for a function.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12shader/nf-d3d12shader-id3d12functionreflection-getconstantbufferbyname" /></para>
      <param name="Name">The constant-buffer name.</param>
    </summary>
  </comment>
  <comment id="D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT">
    <summary>
      <para>Provides input data for calls to ID3D12VideoEncodeCommandList::ResolveMotionVectorHeap.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_resolve_video_motion_vector_heap_input" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT::pMotionVectorHeap">
    <summary>The <a href="https://docs.microsoft.comnn-d3d12video-id3d12videomotionvectorheap.md">ID3D12VideoMotionVectorHeap</a> containing the hardware-dependent data layout of the motion search.</summary>
  </comment>
  <comment id="D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT::PixelWidth">
    <summary>The pixel width of the texture that the motion estimation operation was performed on. The motion estimator heap may be allocated to support a size range, this parameter informs the size of the last motion estimation operation.</summary>
  </comment>
  <comment id="D3D12_RESOLVE_VIDEO_MOTION_VECTOR_HEAP_INPUT::PixelHeight">
    <summary>The pixel height of the texture that the motion estimation operation was performed on. The motion estimator heap may be allocated to support a size range, this parameter informs the size of the last motion estimation operation.</summary>
  </comment>
  <comment id="ID3D12InfoQueue::PopStorageFilter">
    <summary>
      <para>Pop a storage filter from the top of the storage-filter stack.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-popstoragefilter" /></para>
    </summary>
  </comment>
  <comment id="D3D12_MESSAGE_ID">
    <summary>
      <para>Specifies debug message IDs for setting up an info-queue filter (see D3D12_INFO_QUEUE_FILTER); use these messages to allow or deny message categories to pass through the storage and retrieval filters.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/ne-d3d12sdklayers-d3d12_message_id" /></para>
    </summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::DiscardResource">
    <summary>
      <para>Discards a resource.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-discardresource" /></para>
      <param name="pResource">A pointer to the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nn-d3d12-id3d12resource">ID3D12Resource</a> interface for the resource to discard.</param>
      <param name="pRegion">A pointer to a <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_discard_region">D3D12_DISCARD_REGION</a> structure that describes details for the discard-resource operation.</param>
    </summary>
  </comment>
  <comment id="D3D12_COMMAND_QUEUE_PRIORITY">
    <summary>
      <para>Defines priority levels for a command queue.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_command_queue_priority" /></para>
    </summary>
  </comment>
  <comment id="D3D12_COMMAND_QUEUE_PRIORITY::D3D12_COMMAND_QUEUE_PRIORITY_NORMAL">
    <summary>Normal priority.</summary>
  </comment>
  <comment id="D3D12_COMMAND_QUEUE_PRIORITY::D3D12_COMMAND_QUEUE_PRIORITY_HIGH">
    <summary>High priority.</summary>
  </comment>
  <comment id="D3D12_COMMAND_QUEUE_PRIORITY::D3D12_COMMAND_QUEUE_PRIORITY_GLOBAL_REALTIME">
    <summary>Global realtime priority.</summary>
  </comment>
  <comment id="ID3D12StateObjectProperties::SetPipelineStackSize">
    <summary>
      <para>Set the current pipeline stack size.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12stateobjectproperties-setpipelinestacksize" /></para>
      <param name="PipelineStackSizeInBytes">Stack size in bytes to use during pipeline execution for each shader thread. There can be many thousands of threads in flight at once on the GPU.

If the value is greater than 0xffffffff (the maximum value of a 32-bit UINT) the runtime will drop the call, and the debug layer will print an error, as this is likely the result of summing up invalid stack sizes returned from <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12stateobjectproperties-getshaderstacksize">GetShaderStackSize</a> called with invalid parameters, which return 0xffffffff.  In this case, the previously set stack size, or the default, remains.</param>
    </summary>
  </comment>
  <comment id="D3D12_STREAM_OUTPUT_BUFFER_VIEW">
    <summary>
      <para>Describes a stream output buffer.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_stream_output_buffer_view" /></para>
    </summary>
  </comment>
  <comment id="D3D12_STREAM_OUTPUT_BUFFER_VIEW::BufferLocation">
    <summary>A D3D12_GPU_VIRTUAL_ADDRESS (a UINT64) that points to the stream output buffer.
            If <b>SizeInBytes</b> is 0, this member isn't used and can be any value.</summary>
  </comment>
  <comment id="D3D12_STREAM_OUTPUT_BUFFER_VIEW::SizeInBytes">
    <summary>The size of the stream output buffer in bytes.</summary>
  </comment>
  <comment id="D3D12_STREAM_OUTPUT_BUFFER_VIEW::BufferFilledSizeLocation">
    <summary>The location of the value of how much data has been filled into the buffer, as a D3D12_GPU_VIRTUAL_ADDRESS (a UINT64).
            This member can't be NULL; a filled size location must be supplied (which the hardware will increment as data is output).
            If <b>SizeInBytes</b> is 0, this member isn't used and can be any value.</summary>
  </comment>
  <comment id="D3D12_WRITEBUFFERIMMEDIATE_MODE">
    <summary>
      <para>Specifies the mode used by a WriteBufferImmediate operation.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_writebufferimmediate_mode" /></para>
    </summary>
  </comment>
  <comment id="D3D12_WRITEBUFFERIMMEDIATE_MODE::D3D12_WRITEBUFFERIMMEDIATE_MODE_DEFAULT">
    <summary>The write operation behaves the same as normal copy-write operations.</summary>
  </comment>
  <comment id="D3D12_WRITEBUFFERIMMEDIATE_MODE::D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_IN">
    <summary>The write operation is guaranteed to occur after all preceding commands in the command stream have started, including previous <b>WriteBufferImmediate</b> operations.</summary>
  </comment>
  <comment id="D3D12_WRITEBUFFERIMMEDIATE_MODE::D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_OUT">
    <summary>The write operation is deferred until all previous commands in the command stream have completed through the GPU pipeline, including previous <b>WriteBufferImmediate</b> operations. Write operations that specify <b>D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_OUT</b> don't block subsequent operations from starting. If there are no previous operations in the command stream, then the write operation behaves as if <b>D3D12_WRITEBUFFERIMMEDIATE_MODE_MARKER_IN</b> was specified.</summary>
  </comment>
  <comment id="D3D12_PACKED_MIP_INFO">
    <summary>
      <para>Describes the tile structure of a tiled resource with mipmaps.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_packed_mip_info" /></para>
    </summary>
  </comment>
  <comment id="D3D12_PACKED_MIP_INFO::NumStandardMips">
    <summary>The number of standard mipmaps in the tiled resource.</summary>
  </comment>
  <comment id="D3D12_PACKED_MIP_INFO::NumPackedMips">
    <summary>The number of packed mipmaps in the tiled resource.
          

This number starts from the least detailed mipmap (either sharing tiles or using non standard tile layout).
            This number is 0 if no such packing is in the resource.
            For array surfaces, this value is the number of mipmaps that are packed for a given array slice where each array slice repeats the same packing.
          

On Tier_2 tiled resources hardware, mipmaps that fill at least one standard shaped tile in all dimensions are not allowed to be included in the set of packed mipmaps.
            On Tier_1 hardware, mipmaps that are an integer multiple of one standard shaped tile in all dimensions are not allowed to be included in the set of packed mipmaps.
            Mipmaps with at least one dimension less than the standard tile shape may or may not be packed.
            When a given mipmap needs to be packed, all coarser mipmaps for a given array slice are considered packed as well.</summary>
  </comment>
  <comment id="D3D12_PACKED_MIP_INFO::NumTilesForPackedMips">
    <summary>The number of tiles for the packed mipmaps in the tiled resource.
          

If there is no packing, this value is meaningless and is set to 0.
            Otherwise, it is set to the number of tiles that are needed to represent the set of packed mipmaps.
            The pixel layout within the packed mipmaps is hardware specific.
            If apps define only partial mappings for the set of tiles in packed mipmaps, read and write behavior is vendor specific and undefined.
            For arrays, this value is only the count of packed mipmaps within the subresources for each array slice.</summary>
  </comment>
  <comment id="D3D12_PACKED_MIP_INFO::StartTileIndexInOverallResource">
    <summary>The offset of the first packed tile for the resource in the overall range of tiles.
            If <b>NumPackedMips</b> is 0, this value is meaningless and is 0.
            Otherwise, it is the offset of the first packed tile for the resource in the overall range of tiles for the resource.
            A value of 0 for <b>StartTileIndexInOverallResource</b> means the entire resource is packed.
            For array surfaces, this is the offset for the tiles that contain the packed mipmaps for the first array slice.
            Packed mipmaps for each array slice in arrayed surfaces are at this offset past the beginning of the tiles for each array slice.
            

<div class="alert"><b>Note</b>  The number of overall tiles, packed or not, for a given array slice is simply the total number of tiles for the resource divided by the resource's array size, 
              so it is easy to locate the range of tiles for any given array slice, out of which <b>StartTileIndexInOverallResource</b> identifies which of those are packed.
            </div>
<div> </div></summary>
  </comment>
  <comment id="D3D12_STATIC_BORDER_COLOR">
    <summary>
      <para>Specifies the border color for a static sampler.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_static_border_color" /></para>
    </summary>
  </comment>
  <comment id="D3D12_STATIC_BORDER_COLOR::D3D12_STATIC_BORDER_COLOR_TRANSPARENT_BLACK">
    <summary>Indicates black, with the alpha component as fully transparent.</summary>
  </comment>
  <comment id="D3D12_STATIC_BORDER_COLOR::D3D12_STATIC_BORDER_COLOR_OPAQUE_BLACK">
    <summary>Indicates black, with the alpha component as fully opaque.</summary>
  </comment>
  <comment id="D3D12_STATIC_BORDER_COLOR::D3D12_STATIC_BORDER_COLOR_OPAQUE_WHITE">
    <summary>Indicates white, with the alpha component as fully opaque.</summary>
  </comment>
  <comment id="ID3D12VideoDevice2">
    <summary>
      <para>Adds support for protected resources.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/nn-d3d12video-id3d12videodevice2" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS">
    <summary>
      <para>Flags for indicating a subset of components used with video decode histogram.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ne-d3d12video-d3d12_video_decode_histogram_component_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS::D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_NONE">
    <summary>No associated component.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS::D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_Y">
    <summary>If the format is a YUV format, indicates the Y component.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS::D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_U">
    <summary>If the format is a YUV format, indicates the U component.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS::D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_V">
    <summary>If the format is a YUV format, indicates the V component.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS::D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_R">
    <summary>If the format is an RGB/BGR format, indicates the R component.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS::D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_G">
    <summary>If the format is an RGB/BGR format, indicates the G component.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS::D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_B">
    <summary>If the format is an RGB/BGR format, indicates the B component.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAGS::D3D12_VIDEO_DECODE_HISTOGRAM_COMPONENT_FLAG_A">
    <summary>If the format is an RGB/BGR format, indicates the A component.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_REFERENCE_FRAMES">
    <summary>
      <para>Contains the list of reference frames for the current decode operation.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ns-d3d12video-d3d12_video_decode_reference_frames" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_REFERENCE_FRAMES::NumTexture2Ds">
    <summary>The number of references specified in the <i>ppTexture2Ds</i> field.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_REFERENCE_FRAMES::ppTexture2Ds">
    <summary>A list of reference textures. When specifying texture arrays, each entry will be point to the same resource. When specifying an array of textures, each entry will point to a separate resource.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_REFERENCE_FRAMES::pSubresources">
    <summary>An array of subresource indices for the reference textures specified in <i>ppTexture2Ds</i>.  NULL indicates that subresource 0 should be assumed for each resource.

With texture arrays within a single resource, the subresource indices point to the array index of the first resource plane. With an array of textures in individual resources, the subresource index is typically zero.

The video device driver uses the "PicEntry" indices defined in the DXVA spec for the codec to dereference this array to find the subresource index to use with the corresponding resource. For example, in HEVC, the Driver uses [DXVA_PicEntry_HEVC::Index7Bits](/windows/win32/medfound/dxva-picentry-hevc) as an index for this array.</summary>
  </comment>
  <comment id="D3D12_VIDEO_DECODE_REFERENCE_FRAMES::ppHeaps">
    <summary>An array of <a href="https://docs.microsoft.comnn-d3d12video-id3d12videodecoderheap.md">ID3D12VideoDecoderHeap</a> objects. This field is used with formats that support non-key frame resolution changes, allowing the caller to pass in the previous resolution's heap, relative to the reference it's being used for, in addition to the current resolution heap.</summary>
  </comment>
  <comment id="D3D12_EXPORT_DESC">
    <summary>
      <para>Describes an export from a state subobject such as a DXIL library or a collection state object.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_export_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_EXPORT_DESC::Name">
    <summary>The name to be exported.  If the name refers to a function that is overloaded, a modified version of the name (e.g. encoding function parameter information  in name string) can be provided to disambiguate which overload to use.  The modified name for a function can be retrieved using HLSL compiler reflection.

If the <i>ExportToRename</i> field is non-null, <i>Name</i> refers to the new name to use for it when exported.  In this case <i>Name</i> must be the unmodified name, whereas <i>ExportToRename</i> can be either a modified or unmodified name.  A given internal name may be exported multiple times with different renames (and/or not renamed).</summary>
  </comment>
  <comment id="D3D12_EXPORT_DESC::ExportToRename">
    <summary>If non-null, this is the name of an export to use but then rename when exported.</summary>
  </comment>
  <comment id="D3D12_STATE_OBJECT_FLAGS">
    <summary>
      <para>Specifies constraints for state objects. Use values from this enumeration in the D3D12_STATE_OBJECT_CONFIG structure.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ne-d3d12-d3d12_state_object_flags" /></para>
    </summary>
  </comment>
  <comment id="D3D12_STATE_OBJECT_FLAGS::D3D12_STATE_OBJECT_FLAG_NONE">
    <summary>No state object constraints.</summary>
  </comment>
  <comment id="D3D12_STATE_OBJECT_FLAGS::D3D12_STATE_OBJECT_FLAG_ALLOW_LOCAL_DEPENDENCIES_ON_EXTERNAL_DEFINITIONS">
    <summary>This flag applies to state objects of type collection only. Otherwise this flag is ignored.  

The exports from this collection are allowed to have unresolved references (dependencies) that would have to be resolved (defined) when the collection is included in a containing state object, such as a raytracing pipeline state object (RTPSO).  This includes depending on externally defined subobject associations to associate an external subobject (e.g. root signature) to a local export.

In the absence of this flag, all exports in this collection must have their dependencies fully locally resolved, including any necessary subobject associations being defined locally.  Advanced implementations/drivers will have enough information to compile the code in the collection and not need to keep around any uncompiled code (unless the <b>D3D12_STATE_OBJECT_FLAG_ALLOW_EXTERNAL_DEPENDENCIES_ON_LOCAL_DEFINITIONS</b> flag is set), so that when the collection is used in a containing state object (e.g. RTPSO), minimal work needs to be done by the driver, ideally a “cheap” link at most.</summary>
  </comment>
  <comment id="D3D12_STATE_OBJECT_FLAGS::D3D12_STATE_OBJECT_FLAG_ALLOW_EXTERNAL_DEPENDENCIES_ON_LOCAL_DEFINITIONS">
    <summary>This flag applies to state objects of type collection only. Otherwise this flag is ignored.  

If this collection is included in another state object (e.g. RTPSO), shaders / functions in the rest of the containing state object are allowed to depend on (e.g. call) exports from this collection.

In the absence of this flag (default), exports from this collection cannot be directly referenced by other parts of containing state objects (e.g. RTPSO).  This can reduce memory footprint for the collection slightly since drivers don’t need to keep uncompiled code in the collection on the off chance that it may get called by some external function that would then compile all the code together.  That said, if not all necessary subobject associations have been locally defined for code in this collection, the driver may not be able to compile shader code yet and may still need to keep uncompiled code around.  

A subobject association defined externally that associates an external subobject to a local export does not count as an external dependency on a local definition, so the presence or absence of this flag does not affect whether the association is allowed or not. On the other hand if the current collection defines a subobject association for a locally defined subobject to an external export (e.g. shader), that counts as an external dependency on a local definition and this flag must be set.

Regardless of the presence or absence of this flag, shader entrypoints (such as hit groups or miss shaders) in the collection are visible as entrypoints to a containing state object (e.g. RTPSO) if exported by it.  In the case of an RTPSO, the exported entrypoints can be used in shader tables for raytracing.</summary>
  </comment>
  <comment id="ID3D12InfoQueue::AddStorageFilterEntries">
    <summary>
      <para>Add storage filters to the top of the storage-filter stack.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12sdklayers/nf-d3d12sdklayers-id3d12infoqueue-addstoragefilterentries" /></para>
      <param name="pFilter">Array of storage filters.</param>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE">
    <summary>
      <para>Specifies the interlace type of coded video frames.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12video/ne-d3d12video-d3d12_video_frame_coded_interlace_type" /></para>
    </summary>
  </comment>
  <comment id="D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE::D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE_NONE">
    <summary>The coded frames are not interlaced, often referred to as "progressive".</summary>
  </comment>
  <comment id="D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE::D3D12_VIDEO_FRAME_CODED_INTERLACE_TYPE_FIELD_BASED">
    <summary>The coded frames may be interlaced.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_ARCHITECTURE1">
    <summary>
      <para>Provides detail about each adapter's architectural details, so that your application can better optimize for certain adapter properties.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_feature_data_architecture1" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_ARCHITECTURE1::NodeIndex">
    <summary>In multi-adapter operation, this indicates which physical adapter of the device is relevant.
            See <a href="https://docs.microsoft.com/windows/win32/direct3d12/multi-engine">Multi-adapter systems</a>.
            <b>NodeIndex</b> is filled out by the application before calling <a href="https://docs.microsoft.com/windows/win32/api/d3d12/nf-d3d12-id3d12device-checkfeaturesupport">CheckFeatureSupport</a>, as the application can retrieve details about the architecture of each adapter.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_ARCHITECTURE1::TileBasedRenderer">
    <summary>Specifies whether the hardware and driver support a tile-based renderer.
            The runtime sets this member to <b>TRUE</b> if the hardware and driver support a tile-based renderer.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_ARCHITECTURE1::UMA">
    <summary>Specifies whether the hardware and driver support UMA.
            The runtime sets this member to <b>TRUE</b> if the hardware and driver support UMA.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_ARCHITECTURE1::CacheCoherentUMA">
    <summary>Specifies whether the hardware and driver support cache-coherent UMA.
            The runtime sets this member to <b>TRUE</b> if the hardware and driver support cache-coherent UMA.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_ARCHITECTURE1::IsolatedMMU">
    <summary><a href="https://docs.microsoft.com/visualstudio/code-quality/annotating-structs-and-classes?view=vs-2015">SAL</a>: <c>_Out_</c>

Specifies whether the hardware and driver support isolated Memory Management Unit (MMU).
            The runtime sets this member to <b>TRUE</b> if the GPU honors CPU page table properties like <b>MEM_WRITE_WATCH</b> (for more information, see <a href="https://docs.microsoft.com/windows/win32/api/memoryapi/nf-memoryapi-virtualalloc">VirtualAlloc</a>) and <b>PAGE_READONLY</b> (for more information, see <a href="https://docs.microsoft.com/windows/win32/Memory/memory-protection-constants">Memory Protection Constants</a>).

If <b>TRUE</b>, the application must take care to no use memory with these page table properties with the GPU, as the GPU might trigger these page table properties in unexpected ways. For example, GPU write operations might be coarser than the application expects, particularly writes from within shaders. Certain write-watch pages migth appear dirty, even when it isn't obvious how GPU writes may have affected them. GPU operations associated with upload and readback heap usage scenarios work well with write-watch pages, but might occasionally generate false positives that can be safely ignored.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC">
    <summary>
      <para>Describes the size and layout of the serialized acceleration structure and header.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_raytracing_acceleration_structure_postbuild_info_serialization_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC::SerializedSizeInBytes">
    <summary>The size of the serialized acceleration structure, including a header.  The header is <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_serialized_raytracing_acceleration_structure_header">D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER</a> followed by followed by a list of pointers to bottom-level acceleration structures.</summary>
  </comment>
  <comment id="D3D12_RAYTRACING_ACCELERATION_STRUCTURE_POSTBUILD_INFO_SERIALIZATION_DESC::NumBottomLevelAccelerationStructurePointers">
    <summary>The number of  64-bit GPU  virtual addresses that will be at the start of the serialized acceleration structure, after the <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_serialized_raytracing_acceleration_structure_header">D3D12_SERIALIZED_RAYTRACING_ACCELERATION_STRUCTURE_HEADER</a>.  For a bottom-level acceleration structure this will be 0.  For a top-level acceleration structure, the pointers indicate the acceleration structures being referred to.  

When deserialization occurs, these pointers to bottom-level pointers must be initialized by the app in the serialized data (just after the header) to the new locations where the bottom level acceleration structures will reside.  It is not required that these new locations to have already been populated with bottom-level acceleration structures at deserialization time, as long as they are initialized with the expected deserialized data structures before being used in raytracing.  During deserialization, the driver reads the new pointers, using them to produce an equivalent top-level acceleration structure to the original.</summary>
  </comment>
  <comment id="ID3D12PipelineLibrary::Serialize">
    <summary>
      <para>Writes the contents of the library to the provided memory, to be provided back to the runtime at a later time.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12pipelinelibrary-serialize" /></para>
      <param name="pData">Specifies a pointer to the data. This memory must be readable and writeable up to the input size. This data can be saved and provided to <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12device1-createpipelinelibrary">CreatePipelineLibrary</a> at a later time, including future instances of this or other processes. The data becomes invalidated if the runtime or driver is updated, and is not portable to other hardware or devices.</param>
      <param name="DataSizeInBytes">The size provided must be at least the size returned from <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12pipelinelibrary-getserializedsize">GetSerializedSize</a>.</param>
    </summary>
  </comment>
  <comment id="D3D12_TEX1D_SRV">
    <summary>
      <para>Specifies the subresource from a 1D texture to use in a shader-resource view.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_tex1d_srv" /></para>
    </summary>
  </comment>
  <comment id="D3D12_TEX1D_SRV::MostDetailedMip">
    <summary>Index of the most detailed mipmap level to use; this number is between 0 and <b>MipLevels</b> (from the original Texture1D for which <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/nf-d3d12-id3d12device-createshaderresourceview">ID3D12Device::CreateShaderResourceView</a> creates a view) -1.</summary>
  </comment>
  <comment id="D3D12_TEX1D_SRV::MipLevels">
    <summary>The maximum number of mipmap levels for the view  of the texture. See the remarks.

Set to -1 to indicate all the mipmap levels from <b>MostDetailedMip</b> on down to least detailed.</summary>
  </comment>
  <comment id="D3D12_TEX1D_SRV::ResourceMinLODClamp">
    <summary>A value to clamp sample LOD values to. For example, if you specify 2.0f for the clamp value, you ensure that no individual sample accesses a mip level less than 2.0f.</summary>
  </comment>
  <comment id="D3D12_EXISTING_COLLECTION_DESC">
    <summary>
      <para>A state subobject describing an existing collection that can be included in a state object.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_existing_collection_desc" /></para>
    </summary>
  </comment>
  <comment id="D3D12_EXISTING_COLLECTION_DESC::pExistingCollection">
    <summary>The collection to include in a state object.   The enclosing state object holds a reference to the existing collection.</summary>
  </comment>
  <comment id="D3D12_EXISTING_COLLECTION_DESC::NumExports">
    <summary>Size of the <i>pExports</i> array.  If 0, all of the collection’s exports get exported.</summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_EXISTING_HEAPS">
    <summary>
      <para>Provides detail about whether the adapter supports creating heaps from existing system memory.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/ns-d3d12-d3d12_feature_data_existing_heaps" /></para>
    </summary>
  </comment>
  <comment id="D3D12_FEATURE_DATA_EXISTING_HEAPS::Supported">
    <summary><b>TRUE</b> if the adapter can create a heap from existing system memory. Otherwise, <b>FALSE</b>.</summary>
  </comment>
  <comment id="ID3D12Object::GetPrivateData">
    <summary>
      <para>Gets application-defined data from a device object.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12object-getprivatedata" /></para>
      <param name="guid">The <b>GUID</b> that is associated with the data.</param>
      <param name="pDataSize">A pointer to a variable that on input contains the size, in bytes, of the buffer that <i>pData</i> points to, and on output contains the size, in bytes, of the amount of data that <b>GetPrivateData</b> retrieved.</param>
      <param name="pData">A pointer to a memory block that receives the data from the device object if <i>pDataSize</i> points to a value that specifies a buffer large enough to hold the data.</param>
    </summary>
  </comment>
  <comment id="ID3D12GraphicsCommandList::CopyTextureRegion">
    <summary>
      <para>This method uses the GPU to copy texture data between two locations. Both the source and the destination may reference texture data located within either a buffer resource or a texture resource.</para>
      <para>Microsoft Docs: <see href="https://docs.microsoft.com/windows/win32/api//d3d12/nf-d3d12-id3d12graphicscommandlist-copytextureregion" /></para>
      <param name="pDst">Specifies the destination <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_texture_copy_location">D3D12_TEXTURE_COPY_LOCATION</a>. The subresource referred to must be in the D3D12_RESOURCE_STATE_COPY_DEST state.</param>
      <param name="DstX">The x-coordinate of the upper left corner of the destination region.</param>
      <param name="DstY">The y-coordinate of the upper left corner of the destination region. For a 1D subresource, this must be zero.</param>
      <param name="DstZ">The z-coordinate of the upper left corner of the destination region. For a 1D or 2D subresource, this must be zero.</param>
      <param name="pSrc">Specifies the source <a href="https://docs.microsoft.com/windows/desktop/api/d3d12/ns-d3d12-d3d12_texture_copy_location">D3D12_TEXTURE_COPY_LOCATION</a>.
          The subresource referred to must be in the D3D12_RESOURCE_STATE_COPY_SOURCE state.</param>
      <param name="pSrcBox">Specifies an optional  D3D12_BOX that sets the size of the source texture to copy.</param>
    </summary>
  </comment>
</comments>