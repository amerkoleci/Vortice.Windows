<?xml version="1.0" encoding="utf-8"?>
<config id="vortice-media-foundation" xmlns="urn:SharpGen.Config">
  <namespace>Vortice.MediaFoundation</namespace>
  <depends>Vortice.DirectX</depends>
  <depends>Vortice.Multimedia</depends>

  <sdk name="WindowsSdk" version="10.0.20348.0" />
  <sdk name="StdLib" />

  <!--<include file="uuids.h" attach="true"/>-->
  <include file="propsys.h">
    <attach>INamedPropertyStore</attach>
  </include>
  <include file="wmcontainer.h" attach="true"/>
  <include file="mferror.h" attach="true"/>
  <include file="mfidl.h" attach="true"/>
  <include file="mfreadwrite.h" attach="true"/>
  <include file="mfobjects.h" attach="true"/>
  <include file="mftransform.h" attach="true"/>
  <include file="mmdeviceapi.h" attach="true"/>
  <include file="mfplay.h" attach="true"/>
  <include file="mfapi.h" attach="true">
    <pre>
      #undef DIRECT3D_VERSION
    </pre>
  </include>

  <include file="evr.h" attach="true">
    <pre>
      #define __AUDIODEFS_INCLUDED__
    </pre>
  </include>

  <extension>
    <create class="MediaFactory" visibility="public static" />
    <const from-macro="MF_VERSION" class="Vortice.MediaFoundation.MediaFactory" type="int" name="Version" />

    <create class="ResultCode" visibility="public"/>
    <const from-macro="MF_E_(.*)" cpp-type="int" name="$1" class="Vortice.MediaFoundation.ResultCode" result="true" />

    <define enum="Vortice.MediaFoundation.MediaEventTypes" sizeof="4" />
    <define enum="Vortice.MediaFoundation.DeviceStates" sizeof="4" />

    <create visibility="public static" class="AsfProfileAttributeKeys" />
    <create visibility="public static" class="AsfSplitterAttributeKeys" />
    <create visibility="public static" class="AsfStreamConfigAttributeKeys" />
    <create visibility="public static" class="AudioRendererAttributeKeys" />
    <create visibility="public static" class="ByteStreamAttributeKeys" />
    <create visibility="public static" class="CaptureDeviceAttributeKeys" />
    <create visibility="public static" class="TransformCategoryGuids" />
    
      <create visibility="public static" class="CaptureEngineAttributeKeys" />
      <create visibility="public static" class="DeviceStreamAttributeKeys" />
      <create visibility="public static" class="MediaAttributeKeys" />
      <create visibility="public static" class="MediaEngineAttributeKeys" />
      <create visibility="public static" class="Mpeg4MediaSinkAttributeKeys" />
      <create visibility="public static" class="NaluAttributeKeys" />
      <create visibility="public static" class="ProtectionAttributeKeys" />

      <const from-guid="MF_CAPTURE_ENGINE_D3D_MANAGER" class="Vortice.MediaFoundation.CaptureEngineAttributeKeys" type="MediaAttributeKey&lt;Vortice.MediaFoundation.DXGIDeviceManager&gt;" name="D3DManager">new MediaAttributeKey&lt;Vortice.MediaFoundation.DXGIDeviceManager&gt;("$1", "D3DManager")</const>
      <const from-guid="MF_CAPTURE_ENGINE_DECODER_MFT_FIELDOFUSE_UNLOCK_Attribute" class="Vortice.MediaFoundation.CaptureEngineAttributeKeys" type="MediaAttributeKey&lt;Vortice.ComObject&gt;" name="DecoderTransformFieldOfUseUnlockAttribute">new MediaAttributeKey&lt;Vortice.ComObject&gt;("$1", "DecoderTransformFieldOfUseUnlockAttribute")</const>
      <const from-guid="MF_CAPTURE_ENGINE_DISABLE_DXVA" class="Vortice.MediaFoundation.CaptureEngineAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="DisableDXVA">new MediaAttributeKey&lt;bool&gt;("$1", "DisableDXVA")</const>
      <const from-guid="MF_CAPTURE_ENGINE_DISABLE_HARDWARE_TRANSFORMS" class="Vortice.MediaFoundation.CaptureEngineAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="DisableHardwareTransforms">new MediaAttributeKey&lt;bool&gt;("$1", "DisableHardwareTransforms")</const>
      <const from-guid="MF_CAPTURE_ENGINE_DISABLE_LOW_LATENCY" class="Vortice.MediaFoundation.CaptureEngineAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="DisableLowLatency">new MediaAttributeKey&lt;bool&gt;("$1", "DisableLowLatency")</const>
      <const from-guid="MF_CAPTURE_ENGINE_ENCODER_MFT_FIELDOFUSE_UNLOCK_Attribute" class="Vortice.MediaFoundation.CaptureEngineAttributeKeys" type="MediaAttributeKey&lt;Vortice.ComObject&gt;" name="EncoderTransformFieldOfUseUnlockAttribute">new MediaAttributeKey&lt;Vortice.ComObject&gt;("$1", "EncoderTransformFieldOfUseUnlockAttribute")</const>
      <const from-guid="MF_CAPTURE_ENGINE_EVENT_GENERATOR_GUID" class="Vortice.MediaFoundation.CaptureEngineAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="EventGeneratorGuid">new MediaAttributeKey&lt;System.Guid&gt;("$1", "EventGeneratorGuid")</const>
      <const from-guid="MF_CAPTURE_ENGINE_EVENT_STREAM_INDEX" class="Vortice.MediaFoundation.CaptureEngineAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="EventStreamIndex">new MediaAttributeKey&lt;int&gt;("$1", "EventStreamIndex")</const>
      <const from-guid="MF_CAPTURE_ENGINE_MEDIASOURCE_CONFIG" class="Vortice.MediaFoundation.CaptureEngineAttributeKeys" type="MediaAttributeKey&lt;Vortice.ComObject&gt;" name="MediaSourceConfig">new MediaAttributeKey&lt;Vortice.ComObject&gt;("$1", "MediaSourceConfig")</const>
      <const from-guid="MF_CAPTURE_ENGINE_RECORD_SINK_AUDIO_MAX_PROCESSED_SAMPLES" class="Vortice.MediaFoundation.CaptureEngineAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="RecordSinkAudioMaxProcessedSamples">new MediaAttributeKey&lt;int&gt;("$1", "RecordSinkAudioMaxProcessedSamples")</const>
      <const from-guid="MF_CAPTURE_ENGINE_RECORD_SINK_AUDIO_MAX_UNPROCESSED_SAMPLES" class="Vortice.MediaFoundation.CaptureEngineAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="RecordSinkAudioMaxUnprocessedSamples">new MediaAttributeKey&lt;long&gt;("$1", "RecordSinkAudioMaxUnprocessedSamples")</const>
      <const from-guid="MF_CAPTURE_ENGINE_RECORD_SINK_VIDEO_MAX_PROCESSED_SAMPLES" class="Vortice.MediaFoundation.CaptureEngineAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="RecordSinkVideoMaxProcessedSamples">new MediaAttributeKey&lt;int&gt;("$1", "RecordSinkVideoMaxProcessedSamples")</const>
      <const from-guid="MF_CAPTURE_ENGINE_RECORD_SINK_VIDEO_MAX_UNPROCESSED_SAMPLES" class="Vortice.MediaFoundation.CaptureEngineAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="RecordSinkVideoMaxUnprocessedSamples">new MediaAttributeKey&lt;long&gt;("$1", "RecordSinkVideoMaxUnprocessedSamples")</const>
      <const from-guid="MF_CAPTURE_ENGINE_USE_AUDIO_DEVICE_ONLY" class="Vortice.MediaFoundation.CaptureEngineAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="UseAudioDeviceOnly">new MediaAttributeKey&lt;bool&gt;("$1", "UseAudioDeviceOnly")</const>
      <const from-guid="MF_CAPTURE_ENGINE_USE_VIDEO_DEVICE_ONLY" class="Vortice.MediaFoundation.CaptureEngineAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="UseVideoDeviceOnly">new MediaAttributeKey&lt;bool&gt;("$1", "UseVideoDeviceOnly")</const>
      <const from-guid="MF_DEVICESTREAM_EXTENSION_PLUGIN_CLSID" class="Vortice.MediaFoundation.DeviceStreamAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="ExtensionPluginClsid">new MediaAttributeKey&lt;System.Guid&gt;("$1", "ExtensionPluginClsid")</const>
      <const from-guid="MF_DEVICESTREAM_EXTENSION_PLUGIN_CONNECTION_POINT" class="Vortice.MediaFoundation.DeviceStreamAttributeKeys" type="MediaAttributeKey&lt;Vortice.ComObject&gt;" name="ExtensionPluginConnectionPoint">new MediaAttributeKey&lt;Vortice.ComObject&gt;("$1", "ExtensionPluginConnectionPoint")</const>
      <const from-guid="MF_DEVICESTREAM_IMAGE_STREAM" class="Vortice.MediaFoundation.DeviceStreamAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="ImageStream">new MediaAttributeKey&lt;bool&gt;("$1", "ImageStream")</const>
      <const from-guid="MF_DEVICESTREAM_INDEPENDENT_IMAGE_STREAM" class="Vortice.MediaFoundation.DeviceStreamAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="IndependentImageStream">new MediaAttributeKey&lt;bool&gt;("$1", "IndependentImageStream")</const>
      <const from-guid="MF_DEVICESTREAM_MAX_FRAME_BUFFERS" class="Vortice.MediaFoundation.DeviceStreamAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="MaxFrameBuffers">new MediaAttributeKey&lt;int&gt;("$1", "MaxFrameBuffers")</const>
      <const from-guid="MF_DEVICESTREAM_STREAM_CATEGORY" class="Vortice.MediaFoundation.DeviceStreamAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="StreamCategory">new MediaAttributeKey&lt;System.Guid&gt;("$1", "StreamCategory")</const>
      <const from-guid="MF_DEVICESTREAM_STREAM_ID" class="Vortice.MediaFoundation.DeviceStreamAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="StreamId">new MediaAttributeKey&lt;int&gt;("$1", "StreamId")</const>
      <const from-guid="MF_DEVICESTREAM_TAKEPHOTO_TRIGGER" class="Vortice.MediaFoundation.DeviceStreamAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="TakephotoTrigger">new MediaAttributeKey&lt;int&gt;("$1", "TakephotoTrigger")</const>
      <const from-guid="MF_DEVICESTREAM_TRANSFORM_STREAM_ID" class="Vortice.MediaFoundation.DeviceStreamAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="TransformStreamId">new MediaAttributeKey&lt;int&gt;("$1", "TransformStreamId")</const>

      <const from-guid="MF_USER_DATA_PAYLOAD" class="Vortice.MediaFoundation.MediaAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="UserDataPayload">new MediaAttributeKey&lt;byte[]&gt;("$1", "UserDataPayload")</const>
      <const from-guid="MF_VIDEO_PROCESSOR_MIRROR" class="Vortice.MediaFoundation.MediaAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="VideoProcessorMirror">new MediaAttributeKey&lt;int&gt;("$1", "VideoProcessorMirror")</const>
      <const from-guid="MF_VIDEO_PROCESSOR_ROTATION" class="Vortice.MediaFoundation.MediaAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="VideoProcessorRotation">new MediaAttributeKey&lt;int&gt;("$1", "VideoProcessorRotation")</const>
      <const from-guid="MF_VIDEODSP_MODE" class="Vortice.MediaFoundation.MediaAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="VideodspMode">new MediaAttributeKey&lt;int&gt;("$1", "VideodspMode")</const>
      <const from-guid="MF_XVP_DISABLE_FRC" class="Vortice.MediaFoundation.MediaAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="XvpDisableFrc">new MediaAttributeKey&lt;bool&gt;("$1", "XvpDisableFrc")</const>
      <const from-guid="MF_MEDIA_ENGINE_AUDIO_CATEGORY" class="Vortice.MediaFoundation.MediaEngineAttributeKeys" type="MediaAttributeKey&lt;Vortice.Multimedia.AudioStreamCategory&gt;" name="AudioCategory">new MediaAttributeKey&lt;Vortice.Multimedia.AudioStreamCategory&gt;("$1", "AudioCategory")</const>
      <const from-guid="MF_MEDIA_ENGINE_AUDIO_ENDPOINT_ROLE" class="Vortice.MediaFoundation.MediaEngineAttributeKeys" type="MediaAttributeKey&lt;Vortice.Multimedia.AudioEndpointRole&gt;" name="AudioEndpointRole">new MediaAttributeKey&lt;Vortice.Multimedia.AudioEndpointRole&gt;("$1", "AudioEndpointRole")</const>
      <const from-guid="MF_MEDIA_ENGINE_CALLBACK" class="Vortice.MediaFoundation.MediaEngineAttributeKeys" type="MediaAttributeKey&lt;Vortice.ComObject&gt;" name="Callback">new MediaAttributeKey&lt;Vortice.ComObject&gt;("$1", "Callback")</const>
      <const from-guid="MF_MEDIA_ENGINE_CONTENT_PROTECTION_FLAGS" class="Vortice.MediaFoundation.MediaEngineAttributeKeys" type="MediaAttributeKey&lt;MediaEngineProtectionFlags&gt;" name="ContentProtectionFlags">new MediaAttributeKey&lt;MediaEngineProtectionFlags&gt;("$1", "ContentProtectionFlags")</const>
      <const from-guid="MF_MEDIA_ENGINE_CONTENT_PROTECTION_MANAGER" class="Vortice.MediaFoundation.MediaEngineAttributeKeys" type="MediaAttributeKey&lt;Vortice.ComObject&gt;" name="ContentProtectionManager">new MediaAttributeKey&lt;Vortice.ComObject&gt;("$1", "ContentProtectionManager")</const>
      <const from-guid="MF_MEDIA_ENGINE_DXGI_MANAGER" class="Vortice.MediaFoundation.MediaEngineAttributeKeys" type="MediaAttributeKey&lt;DXGIDeviceManager&gt;" name="DxgiManager">new MediaAttributeKey&lt;DXGIDeviceManager&gt;("$1", "DxgiManager")</const>
      <const from-guid="MF_MEDIA_ENGINE_EXTENSION" class="Vortice.MediaFoundation.MediaEngineAttributeKeys" type="MediaAttributeKey&lt;MediaEngineExtension&gt;" name="Extension">new MediaAttributeKey&lt;MediaEngineExtension&gt;("$1", "Extension")</const>
      <const from-guid="MF_MEDIA_ENGINE_OPM_HWND" class="Vortice.MediaFoundation.MediaEngineAttributeKeys" type="MediaAttributeKey&lt;System.IntPtr&gt;" name="OpmHwnd">new MediaAttributeKey&lt;System.IntPtr&gt;("$1", "OpmHwnd")</const>
      <const from-guid="MF_MEDIA_ENGINE_OPM_IWINDOW" class="Vortice.MediaFoundation.MediaEngineAttributeKeys" type="MediaAttributeKey&lt;Vortice.ComObject&gt;" name="OpmIwindow">new MediaAttributeKey&lt;Vortice.ComObject&gt;("$1", "OpmIwindow")</const>
      <const from-guid="MF_MEDIA_ENGINE_PLAYBACK_HWND" class="Vortice.MediaFoundation.MediaEngineAttributeKeys" type="MediaAttributeKey&lt;System.IntPtr&gt;" name="PlaybackHwnd">new MediaAttributeKey&lt;System.IntPtr&gt;("$1", "PlaybackHwnd")</const>
      <const from-guid="MF_MEDIA_ENGINE_PLAYBACK_VISUAL" class="Vortice.MediaFoundation.MediaEngineAttributeKeys" type="MediaAttributeKey&lt;Vortice.ComObject&gt;" name="PlaybackVisual">new MediaAttributeKey&lt;Vortice.ComObject&gt;("$1", "PlaybackVisual")</const>
      <const from-guid="MF_MEDIA_ENGINE_VIDEO_OUTPUT_FORMAT" class="Vortice.MediaFoundation.MediaEngineAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="VideoOutputFormat">new MediaAttributeKey&lt;int&gt;("$1", "VideoOutputFormat")</const>

      <const from-guid="MF_MPEG4SINK_MOOV_BEFORE_MDAT" class="Vortice.MediaFoundation.Mpeg4MediaSinkAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="MoovBeforeMdat">new MediaAttributeKey&lt;int&gt;("$1", "MoovBeforeMdat")</const>
      <const from-guid="MF_MPEG4SINK_SPSPPS_PASSTHROUGH" class="Vortice.MediaFoundation.Mpeg4MediaSinkAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="SpsppsPassthrough">new MediaAttributeKey&lt;bool&gt;("$1", "SpsppsPassthrough")</const>

      <const from-guid="MF_NALU_LENGTH_INFORMATION" class="Vortice.MediaFoundation.NaluAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="LengthInformation">new MediaAttributeKey&lt;byte[]&gt;("$1", "LengthInformation")</const>
      <const from-guid="MF_NALU_LENGTH_SET" class="Vortice.MediaFoundation.NaluAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="LengthSet">new MediaAttributeKey&lt;int&gt;("$1", "LengthSet")</const>

      <const from-guid="MF_LOCAL_PLUGIN_CONTROL_POLICY" class="Vortice.MediaFoundation.MediaAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="LocalPluginControlPolicy">new MediaAttributeKey&lt;int&gt;("$1", "LocalPluginControlPolicy")</const>
      <const from-guid="MFPROTECTION_GRAPHICS_TRANSFER_AES_ENCRYPTION" class="Vortice.MediaFoundation.ProtectionAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="GraphicsTransferAesEncryption">new MediaAttributeKey&lt;System.Guid&gt;("$1", "GraphicsTransferAesEncryption")</const>
      <const from-guid="MFPROTECTION_VIDEO_FRAMES" class="Vortice.MediaFoundation.ProtectionAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="VideoFrames">new MediaAttributeKey&lt;int&gt;("$1", "VideoFrames")</const>
      <const from-guid="MFPROTECTIONATTRIBUTE_BEST_EFFORT" class="Vortice.MediaFoundation.ProtectionAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="BestEffort">new MediaAttributeKey&lt;bool&gt;("$1", "BestEffort")</const>
      <const from-guid="MFPROTECTIONATTRIBUTE_FAIL_OVER" class="Vortice.MediaFoundation.ProtectionAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="FailOver">new MediaAttributeKey&lt;bool&gt;("$1", "FailOver")</const>
      <const from-guid="MF_SOURCE_STREAM_SUPPORTS_HW_CONNECTION" class="Vortice.MediaFoundation.MediaAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="SourceStreamSupportsHardwareConnection">new MediaAttributeKey&lt;bool&gt;("$1", "SourceStreamSupportsHardwareConnection")</const>

      <const from-guid="MF_STREAM_SINK_SUPPORTS_HW_CONNECTION" class="Vortice.MediaFoundation.MediaAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="SupportsHardwareConnection">new MediaAttributeKey&lt;bool&gt;("$1", "SupportsHardwareConnection")</const>
      <const from-guid="MF_STREAM_SINK_SUPPORTS_ROTATION" class="Vortice.MediaFoundation.MediaAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="SupportsRotation">new MediaAttributeKey&lt;bool&gt;("$1", "SupportsRotation")</const>

    <create visibility="public static" class="DLNAMediaSinkAttributeKeys" />
    <create visibility="public static" class="EventAttributeKeys" />
    <create visibility="public static" class="EVRAttributeKeys" />
    <create visibility="public static" class="EVRConfigAttributeKeys" />
    <create visibility="public static" class="EVRCustomVideoAttributeKeys" />
    <create visibility="public static" class="MediaSessionAttributeKeys" />
    <create visibility="public static" class="MediaTypeAttributeKeys" />
    <create visibility="public static" class="PresentationDescriptionAttributeKeys" />
    <create visibility="public static" class="SampleAttributeKeys" />
    <create visibility="public static" class="SampleGrabberSinkAttributeKeys" />
    <create visibility="public static" class="SinkWriterAttributeKeys" />
    <create visibility="public static" class="SourceReaderAttributeKeys" />
    <create visibility="public static" class="StreamDescriptorAttributeKeys" />
    <create visibility="public static" class="TopologyAttributeKeys" />
    <create visibility="public static" class="TopologyNodeAttributeKeys" />
    <create visibility="public static" class="TranscodeAttributeKeys" />
    <create visibility="public static" class="TransformAttributeKeys" />

    <create visibility="public static" class="AudioFormatGuids" />
    <const from-guid="MFAudioFormat_(.*)" class="Vortice.MediaFoundation.AudioFormatGuids" type="System.Guid" name="$1">new System.Guid("$1")</const>

    <create visibility="public static" class="VideoFormatGuids" />
    <const from-guid="MFVideoFormat_([A-Z].*)" class="Vortice.MediaFoundation.VideoFormatGuids" type="System.Guid" name="$1">new System.Guid("$1")</const>
    <const from-guid="MFVideoFormat_420O" class="Vortice.MediaFoundation.VideoFormatGuids" type="System.Guid" name="Y420O">new System.Guid("$1")</const>

    <create visibility="public static" class="MediaTypeGuids" />
    <const from-guid="MFMediaType_(.*)" class="Vortice.MediaFoundation.MediaTypeGuids" type="System.Guid" name="$1">new System.Guid("$1")</const>

    <create visibility="public static" class="TranscodeContainerTypeGuids" />
    <const from-guid="MFTranscodeContainerType_([A-Z].*)" class="Vortice.MediaFoundation.TranscodeContainerTypeGuids" type="System.Guid" name="$1">new System.Guid("$1")</const>
    <const from-guid="MFTranscodeContainerType_3GP" class="Vortice.MediaFoundation.TranscodeContainerTypeGuids" type="System.Guid" name="Mobile3gp">new System.Guid("$1")</const>

    <const from-guid="EVRConfig_AllowBatching" class="Vortice.MediaFoundation.EVRConfigAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AllowBatching">new MediaAttributeKey&lt;int&gt;("$1", "AllowBatching")</const>
    <const from-guid="EVRConfig_AllowDropToBob" class="Vortice.MediaFoundation.EVRConfigAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AllowDropToBob">new MediaAttributeKey&lt;int&gt;("$1", "AllowDropToBob")</const>
    <const from-guid="EVRConfig_AllowDropToHalfInterlace" class="Vortice.MediaFoundation.EVRConfigAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AllowDropToHalfInterlace">new MediaAttributeKey&lt;int&gt;("$1", "AllowDropToHalfInterlace")</const>
    <const from-guid="EVRConfig_AllowDropToThrottle" class="Vortice.MediaFoundation.EVRConfigAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AllowDropToThrottle">new MediaAttributeKey&lt;int&gt;("$1", "AllowDropToThrottle")</const>
    <const from-guid="EVRConfig_AllowScaling" class="Vortice.MediaFoundation.EVRConfigAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AllowScaling">new MediaAttributeKey&lt;int&gt;("$1", "AllowScaling")</const>
    <const from-guid="EVRConfig_ForceBatching" class="Vortice.MediaFoundation.EVRConfigAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="ForceBatching">new MediaAttributeKey&lt;int&gt;("$1", "ForceBatching")</const>
    <const from-guid="EVRConfig_ForceBob" class="Vortice.MediaFoundation.EVRConfigAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="ForceBob">new MediaAttributeKey&lt;int&gt;("$1", "ForceBob")</const>
    <const from-guid="EVRConfig_ForceHalfInterlace" class="Vortice.MediaFoundation.EVRConfigAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="ForceHalfInterlace">new MediaAttributeKey&lt;int&gt;("$1", "ForceHalfInterlace")</const>
    <const from-guid="EVRConfig_ForceScaling" class="Vortice.MediaFoundation.EVRConfigAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="ForceScaling">new MediaAttributeKey&lt;int&gt;("$1", "ForceScaling")</const>
    <const from-guid="EVRConfig_ForceThrottle" class="Vortice.MediaFoundation.EVRConfigAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="ForceThrottle">new MediaAttributeKey&lt;int&gt;("$1", "ForceThrottle")</const>
    <const from-guid="MF_ACTIVATE_CUSTOM_VIDEO_MIXER_ACTIVATE" class="Vortice.MediaFoundation.EVRCustomVideoAttributeKeys" type="MediaAttributeKey&lt;Vortice.ComObject&gt;" name="MixerActivate">new MediaAttributeKey&lt;Vortice.ComObject&gt;("$1", "MixerActivate")</const>
    <const from-guid="MF_ACTIVATE_CUSTOM_VIDEO_MIXER_CLSID" class="Vortice.MediaFoundation.EVRCustomVideoAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="MixerClsid">new MediaAttributeKey&lt;System.Guid&gt;("$1", "MixerClsid")</const>
    <const from-guid="MF_ACTIVATE_CUSTOM_VIDEO_MIXER_FLAGS" class="Vortice.MediaFoundation.EVRCustomVideoAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="MixerFlags">new MediaAttributeKey&lt;int&gt;("$1", "MixerFlags")</const>
    <const from-guid="MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_ACTIVATE" class="Vortice.MediaFoundation.EVRCustomVideoAttributeKeys" type="MediaAttributeKey&lt;Vortice.ComObject&gt;" name="PresenterActivate">new MediaAttributeKey&lt;Vortice.ComObject&gt;("$1", "PresenterActivate")</const>
    <const from-guid="MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_CLSID" class="Vortice.MediaFoundation.EVRCustomVideoAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="PresenterClsid">new MediaAttributeKey&lt;System.Guid&gt;("$1", "PresenterClsid")</const>
    <const from-guid="MF_ACTIVATE_CUSTOM_VIDEO_PRESENTER_FLAGS" class="Vortice.MediaFoundation.EVRCustomVideoAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="PresenterFlags">new MediaAttributeKey&lt;int&gt;("$1", "PresenterFlags")</const>
    <const from-guid="MF_ACTIVATE_MFT_LOCKED" class="Vortice.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="ActivateMftLocked">new MediaAttributeKey&lt;bool&gt;("$1", "ActivateMftLocked")</const>
    <const from-guid="MF_ACTIVATE_VIDEO_WINDOW" class="Vortice.MediaFoundation.EVRCustomVideoAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="ActivateVideoWindow">new MediaAttributeKey&lt;long&gt;("$1", "ActivateVideoWindow")</const>
    <const from-guid="MF_ASFPROFILE_MAXPACKETSIZE" class="Vortice.MediaFoundation.AsfProfileAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Maxpacketsize">new MediaAttributeKey&lt;int&gt;("$1", "Maxpacketsize")</const>
    <const from-guid="MF_ASFPROFILE_MINPACKETSIZE" class="Vortice.MediaFoundation.AsfProfileAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Minpacketsize">new MediaAttributeKey&lt;int&gt;("$1", "Minpacketsize")</const>
    <const from-guid="MF_ASFSTREAMCONFIG_LEAKYBUCKET1" class="Vortice.MediaFoundation.AsfStreamConfigAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="LeakyBucket1">new MediaAttributeKey&lt;byte[]&gt;("$1", "LeakyBucket1")</const>
    <const from-guid="MF_ASFSTREAMCONFIG_LEAKYBUCKET2" class="Vortice.MediaFoundation.AsfStreamConfigAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="LeakyBucket2">new MediaAttributeKey&lt;byte[]&gt;("$1", "LeakyBucket2")</const>
    <const from-guid="MF_AUDIO_RENDERER_ATTRIBUTE_ENDPOINT_ID" class="Vortice.MediaFoundation.AudioRendererAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="EndpointId">new MediaAttributeKey&lt;string&gt;("$1", "EndpointId")</const>
    <const from-guid="MF_AUDIO_RENDERER_ATTRIBUTE_ENDPOINT_ROLE" class="Vortice.MediaFoundation.AudioRendererAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="EndpointRole">new MediaAttributeKey&lt;int&gt;("$1", "EndpointRole")</const>
    <const from-guid="MF_AUDIO_RENDERER_ATTRIBUTE_FLAGS" class="Vortice.MediaFoundation.AudioRendererAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Flags">new MediaAttributeKey&lt;int&gt;("$1", "Flags")</const>
    <const from-guid="MF_AUDIO_RENDERER_ATTRIBUTE_SESSION_ID" class="Vortice.MediaFoundation.AudioRendererAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="SessionId">new MediaAttributeKey&lt;System.Guid&gt;("$1", "SessionId")</const>
    <const from-guid="MF_AUDIO_RENDERER_ATTRIBUTE_STREAM_CATEGORY" class="Vortice.MediaFoundation.AudioRendererAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="StreamCategory">new MediaAttributeKey&lt;int&gt;("$1", "StreamCategory")</const>
    <const from-guid="MF_BYTESTREAM_CONTENT_TYPE" class="Vortice.MediaFoundation.ByteStreamAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="ContentType">new MediaAttributeKey&lt;string&gt;("$1", "ContentType")</const>
    <const from-guid="MF_BYTESTREAM_DURATION" class="Vortice.MediaFoundation.ByteStreamAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="Duration">new MediaAttributeKey&lt;long&gt;("$1", "Duration")</const>
    <const from-guid="MF_BYTESTREAM_EFFECTIVE_URL" class="Vortice.MediaFoundation.ByteStreamAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="EffectiveUrl">new MediaAttributeKey&lt;string&gt;("$1", "EffectiveUrl")</const>
    <const from-guid="MF_BYTESTREAM_IFO_FILE_URI" class="Vortice.MediaFoundation.ByteStreamAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="IfoFileUri">new MediaAttributeKey&lt;string&gt;("$1", "IfoFileUri")</const>
    <const from-guid="MF_BYTESTREAM_LAST_MODIFIED_TIME" class="Vortice.MediaFoundation.ByteStreamAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="LastModifiedTime">new MediaAttributeKey&lt;byte[]&gt;("$1", "LastModifiedTime")</const>
    <const from-guid="MF_BYTESTREAM_ORIGIN_NAME" class="Vortice.MediaFoundation.ByteStreamAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="OriginName">new MediaAttributeKey&lt;string&gt;("$1", "OriginName")</const>
    <const from-guid="MF_BYTESTREAMHANDLER_ACCEPTS_SHARE_WRITE" class="Vortice.MediaFoundation.ByteStreamAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="HandlerAcceptsShareWrite">new MediaAttributeKey&lt;int&gt;("$1", "HandlerAcceptsShareWrite")</const>



    <const from-guid="MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_GUID" class="Vortice.MediaFoundation.CaptureDeviceAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="SourceTypeVideoCapture">new MediaAttributeKey&lt;System.Guid&gt;("$1", "SourceTypeVideoCapture")</const>
    <const from-guid="MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_GUID" class="Vortice.MediaFoundation.CaptureDeviceAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="SourceTypeAudioCapture">new MediaAttributeKey&lt;System.Guid&gt;("$1", "SourceTypeAudioCapture")</const>
    <const from-guid="MF_DEVSOURCE_ATTRIBUTE_FRIENDLY_NAME" class="Vortice.MediaFoundation.CaptureDeviceAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="FriendlyName">new MediaAttributeKey&lt;string&gt;("$1", "FriendlyName")</const>
    <const from-guid="MF_DEVSOURCE_ATTRIBUTE_MEDIA_TYPE" class="Vortice.MediaFoundation.CaptureDeviceAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="MediaType">new MediaAttributeKey&lt;byte[]&gt;("$1", "MediaType")</const>
    <const from-guid="MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE" class="Vortice.MediaFoundation.CaptureDeviceAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="SourceType">new MediaAttributeKey&lt;System.Guid&gt;("$1", "SourceType")</const>
    <const from-guid="MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ENDPOINT_ID" class="Vortice.MediaFoundation.CaptureDeviceAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="SourceTypeAudcapEndpointId">new MediaAttributeKey&lt;string&gt;("$1", "SourceTypeAudcapEndpointId")</const>
    <const from-guid="MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_AUDCAP_ROLE" class="Vortice.MediaFoundation.CaptureDeviceAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="SourceTypeAudcapRole">new MediaAttributeKey&lt;int&gt;("$1", "SourceTypeAudcapRole")</const>
    <const from-guid="MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_CATEGORY" class="Vortice.MediaFoundation.CaptureDeviceAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="SourceTypeVidcapCategory">new MediaAttributeKey&lt;System.Guid&gt;("$1", "SourceTypeVidcapCategory")</const>
    <const from-guid="MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_HW_SOURCE" class="Vortice.MediaFoundation.CaptureDeviceAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="SourceTypeVidcapHwSource">new MediaAttributeKey&lt;int&gt;("$1", "SourceTypeVidcapHwSource")</const>
    <const from-guid="MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_MAX_BUFFERS" class="Vortice.MediaFoundation.CaptureDeviceAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="SourceTypeVidcapMaxBuffers">new MediaAttributeKey&lt;int&gt;("$1", "SourceTypeVidcapMaxBuffers")</const>
    <const from-guid="MF_DEVSOURCE_ATTRIBUTE_SOURCE_TYPE_VIDCAP_SYMBOLIC_LINK" class="Vortice.MediaFoundation.CaptureDeviceAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="SourceTypeVidcapSymbolicLink">new MediaAttributeKey&lt;string&gt;("$1", "SourceTypeVidcapSymbolicLink")</const>
    <const from-guid="MF_DISABLE_LOCALLY_REGISTERED_PLUGINS" class="Vortice.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="DisableLocallyRegisteredPlugins">new MediaAttributeKey&lt;int&gt;("$1", "DisableLocallyRegisteredPlugins")</const>
    <const from-guid="MF_ENABLE_3DVIDEO_OUTPUT" class="Vortice.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Enable3dvideoOutput">new MediaAttributeKey&lt;int&gt;("$1", "Enable3dvideoOutput")</const>
    <const from-guid="MF_EVENT_DO_THINNING" class="Vortice.MediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="DoThinning">new MediaAttributeKey&lt;bool&gt;("$1", "DoThinning")</const>
    <const from-guid="MF_EVENT_MFT_CONTEXT" class="Vortice.MediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="TransformContext">new MediaAttributeKey&lt;long&gt;("$1", "TransformContext")</const>
    <const from-guid="MF_EVENT_MFT_INPUT_STREAM_ID" class="Vortice.MediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="TransformInputStreamId">new MediaAttributeKey&lt;int&gt;("$1", "TransformInputStreamId")</const>
    <const from-guid="MF_EVENT_OUTPUT_NODE" class="Vortice.MediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="OutputNode">new MediaAttributeKey&lt;long&gt;("$1", "OutputNode")</const>
    <const from-guid="MF_EVENT_PRESENTATION_TIME_OFFSET" class="Vortice.MediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="PresentationTimeOffset">new MediaAttributeKey&lt;long&gt;("$1", "PresentationTimeOffset")</const>
    <const from-guid="MF_EVENT_SCRUBSAMPLE_TIME" class="Vortice.MediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="ScrubsampleTime">new MediaAttributeKey&lt;long&gt;("$1", "ScrubsampleTime")</const>
    <const from-guid="MF_EVENT_SESSIONCAPS" class="Vortice.MediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Sessioncaps">new MediaAttributeKey&lt;int&gt;("$1", "Sessioncaps")</const>
    <const from-guid="MF_EVENT_SESSIONCAPS_DELTA" class="Vortice.MediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="SessioncapsDelta">new MediaAttributeKey&lt;int&gt;("$1", "SessioncapsDelta")</const>
    <const from-guid="MF_EVENT_SOURCE_ACTUAL_START" class="Vortice.MediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="SourceActualStart">new MediaAttributeKey&lt;long&gt;("$1", "SourceActualStart")</const>
    <const from-guid="MF_EVENT_SOURCE_CHARACTERISTICS" class="Vortice.MediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="SourceCharacteristics">new MediaAttributeKey&lt;int&gt;("$1", "SourceCharacteristics")</const>
    <const from-guid="MF_EVENT_SOURCE_CHARACTERISTICS_OLD" class="Vortice.MediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="SourceCharacteristicsOld">new MediaAttributeKey&lt;int&gt;("$1", "SourceCharacteristicsOld")</const>
    <const from-guid="MF_EVENT_SOURCE_FAKE_START" class="Vortice.MediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="SourceFakeStart">new MediaAttributeKey&lt;int&gt;("$1", "SourceFakeStart")</const>
    <const from-guid="MF_EVENT_SOURCE_PROJECTSTART" class="Vortice.MediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="SourceProjectstart">new MediaAttributeKey&lt;long&gt;("$1", "SourceProjectstart")</const>
    <const from-guid="MF_EVENT_SOURCE_TOPOLOGY_CANCELED" class="Vortice.MediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="SourceTopologyCanceled">new MediaAttributeKey&lt;int&gt;("$1", "SourceTopologyCanceled")</const>
    <const from-guid="MF_EVENT_START_PRESENTATION_TIME" class="Vortice.MediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="StartPresentationTime">new MediaAttributeKey&lt;long&gt;("$1", "StartPresentationTime")</const>
    <const from-guid="MF_EVENT_START_PRESENTATION_TIME_AT_OUTPUT" class="Vortice.MediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="StartPresentationTimeAtOutput">new MediaAttributeKey&lt;long&gt;("$1", "StartPresentationTimeAtOutput")</const>
    <const from-guid="MF_EVENT_TOPOLOGY_STATUS" class="Vortice.MediaFoundation.EventAttributeKeys" type="MediaAttributeKey&lt;Vortice.MediaFoundation.TopologyStatus&gt;" name="TopologyStatus">new MediaAttributeKey&lt;Vortice.MediaFoundation.TopologyStatus&gt;("$1", "TopologyStatus")</const>

    <const from-guid="MF_LOW_LATENCY" class="Vortice.MediaFoundation.SinkWriterAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="LowLatency">new MediaAttributeKey&lt;bool&gt;("$1", "LowLatency")</const>


    <const from-guid="MF_MP2DLNA_AUDIO_BIT_RATE" class="Vortice.MediaFoundation.DLNAMediaSinkAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AudioBitRate">new MediaAttributeKey&lt;int&gt;("$1", "AudioBitRate")</const>
    <const from-guid="MF_MP2DLNA_ENCODE_QUALITY" class="Vortice.MediaFoundation.DLNAMediaSinkAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="EncodeQuality">new MediaAttributeKey&lt;int&gt;("$1", "EncodeQuality")</const>
    <const from-guid="MF_MP2DLNA_STATISTICS" class="Vortice.MediaFoundation.DLNAMediaSinkAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="Statistics">new MediaAttributeKey&lt;byte[]&gt;("$1", "Statistics")</const>
    <const from-guid="MF_MP2DLNA_USE_MMCSS" class="Vortice.MediaFoundation.DLNAMediaSinkAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="UseMmcss">new MediaAttributeKey&lt;bool&gt;("$1", "UseMmcss")</const>
    <const from-guid="MF_MP2DLNA_VIDEO_BIT_RATE" class="Vortice.MediaFoundation.DLNAMediaSinkAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="VideoBitRate">new MediaAttributeKey&lt;int&gt;("$1", "VideoBitRate")</const>


    <const from-guid="MF_MT_AAC_AUDIO_PROFILE_LEVEL_INDICATION" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AacAudioProfileLevelIndication">new MediaAttributeKey&lt;int&gt;("$1", "AacAudioProfileLevelIndication")</const>
    <const from-guid="MF_MT_AAC_PAYLOAD_TYPE" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AacPayloadType">new MediaAttributeKey&lt;int&gt;("$1", "AacPayloadType")</const>
    <const from-guid="MF_MT_ALL_SAMPLES_INDEPENDENT" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AllSamplesIndependent">new MediaAttributeKey&lt;int&gt;("$1", "AllSamplesIndependent")</const>
    <const from-guid="MF_MT_AM_FORMAT_TYPE" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="AmFormatType">new MediaAttributeKey&lt;System.Guid&gt;("$1", "AmFormatType")</const>
    <const from-guid="MF_MT_ARBITRARY_FORMAT" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="ArbitraryFormat">new MediaAttributeKey&lt;byte[]&gt;("$1", "ArbitraryFormat")</const>
    <const from-guid="MF_MT_ARBITRARY_HEADER" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="ArbitraryHeader">new MediaAttributeKey&lt;byte[]&gt;("$1", "ArbitraryHeader")</const>
    <const from-guid="MF_MT_AUDIO_AVG_BYTES_PER_SECOND" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AudioAvgBytesPerSecond">new MediaAttributeKey&lt;int&gt;("$1", "AudioAvgBytesPerSecond")</const>
    <const from-guid="MF_MT_AUDIO_BITS_PER_SAMPLE" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AudioBitsPerSample">new MediaAttributeKey&lt;int&gt;("$1", "AudioBitsPerSample")</const>
    <const from-guid="MF_MT_AUDIO_BLOCK_ALIGNMENT" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AudioBlockAlignment">new MediaAttributeKey&lt;int&gt;("$1", "AudioBlockAlignment")</const>
    <const from-guid="MF_MT_AUDIO_CHANNEL_MASK" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AudioChannelMask">new MediaAttributeKey&lt;int&gt;("$1", "AudioChannelMask")</const>
    <const from-guid="MF_MT_AUDIO_FLOAT_SAMPLES_PER_SECOND" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;double&gt;" name="AudioFloatSamplesPerSecond">new MediaAttributeKey&lt;double&gt;("$1", "AudioFloatSamplesPerSecond")</const>
    <const from-guid="MF_MT_AUDIO_FOLDDOWN_MATRIX" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="AudioFolddownMatrix">new MediaAttributeKey&lt;byte[]&gt;("$1", "AudioFolddownMatrix")</const>
    <const from-guid="MF_MT_AUDIO_NUM_CHANNELS" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AudioNumChannels">new MediaAttributeKey&lt;int&gt;("$1", "AudioNumChannels")</const>
    <const from-guid="MF_MT_AUDIO_PREFER_WAVEFORMATEX" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="AudioPreferWaveformatex">new MediaAttributeKey&lt;bool&gt;("$1", "AudioPreferWaveformatex")</const>
    <const from-guid="MF_MT_AUDIO_SAMPLES_PER_BLOCK" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AudioSamplesPerBlock">new MediaAttributeKey&lt;int&gt;("$1", "AudioSamplesPerBlock")</const>
    <const from-guid="MF_MT_AUDIO_SAMPLES_PER_SECOND" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AudioSamplesPerSecond">new MediaAttributeKey&lt;int&gt;("$1", "AudioSamplesPerSecond")</const>
    <const from-guid="MF_MT_AUDIO_VALID_BITS_PER_SAMPLE" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AudioValidBitsPerSample">new MediaAttributeKey&lt;int&gt;("$1", "AudioValidBitsPerSample")</const>
    <const from-guid="MF_MT_AUDIO_WMADRC_AVGREF" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AudioWmadrcAvgref">new MediaAttributeKey&lt;int&gt;("$1", "AudioWmadrcAvgref")</const>
    <const from-guid="MF_MT_AUDIO_WMADRC_AVGTARGET" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AudioWmadrcAvgtarget">new MediaAttributeKey&lt;int&gt;("$1", "AudioWmadrcAvgtarget")</const>
    <const from-guid="MF_MT_AUDIO_WMADRC_PEAKREF" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AudioWmadrcPeakref">new MediaAttributeKey&lt;int&gt;("$1", "AudioWmadrcPeakref")</const>
    <const from-guid="MF_MT_AUDIO_WMADRC_PEAKTARGET" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AudioWmadrcPeaktarget">new MediaAttributeKey&lt;int&gt;("$1", "AudioWmadrcPeaktarget")</const>
    <const from-guid="MF_MT_AVG_BIT_ERROR_RATE" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AvgBitErrorRate">new MediaAttributeKey&lt;int&gt;("$1", "AvgBitErrorRate")</const>
    <const from-guid="MF_MT_AVG_BITRATE" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AvgBitrate">new MediaAttributeKey&lt;int&gt;("$1", "AvgBitrate")</const>
    <const from-guid="MF_MT_COMPRESSED" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="Compressed">new MediaAttributeKey&lt;bool&gt;("$1", "Compressed")</const>
    <const from-guid="MF_MT_CUSTOM_VIDEO_PRIMARIES" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="CustomVideoPrimaries">new MediaAttributeKey&lt;byte[]&gt;("$1", "CustomVideoPrimaries")</const>
    <const from-guid="MF_MT_DEFAULT_STRIDE" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="DefaultStride">new MediaAttributeKey&lt;int&gt;("$1", "DefaultStride")</const>
    <const from-guid="MF_MT_DRM_FLAGS" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="DrmFlags">new MediaAttributeKey&lt;int&gt;("$1", "DrmFlags")</const>
    <const from-guid="MF_MT_DV_AAUX_CTRL_PACK_0" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="DvAauxCtrlPack0">new MediaAttributeKey&lt;int&gt;("$1", "DvAauxCtrlPack0")</const>
    <const from-guid="MF_MT_DV_AAUX_CTRL_PACK_1" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="DvAauxCtrlPack1">new MediaAttributeKey&lt;int&gt;("$1", "DvAauxCtrlPack1")</const>
    <const from-guid="MF_MT_DV_AAUX_SRC_PACK_0" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="DvAauxSrcPack0">new MediaAttributeKey&lt;int&gt;("$1", "DvAauxSrcPack0")</const>
    <const from-guid="MF_MT_DV_AAUX_SRC_PACK_1" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="DvAauxSrcPack1">new MediaAttributeKey&lt;int&gt;("$1", "DvAauxSrcPack1")</const>
    <const from-guid="MF_MT_DV_VAUX_CTRL_PACK" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="DvVauxCtrlPack">new MediaAttributeKey&lt;int&gt;("$1", "DvVauxCtrlPack")</const>
    <const from-guid="MF_MT_DV_VAUX_SRC_PACK" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="DvVauxSrcPack">new MediaAttributeKey&lt;int&gt;("$1", "DvVauxSrcPack")</const>
    <const from-guid="MF_MT_FIXED_SIZE_SAMPLES" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="FixedSizeSamples">new MediaAttributeKey&lt;int&gt;("$1", "FixedSizeSamples")</const>
    <const from-guid="MF_MT_FRAME_RATE" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="FrameRate">new MediaAttributeKey&lt;long&gt;("$1", "FrameRate")</const>
    <const from-guid="MF_MT_FRAME_RATE_RANGE_MAX" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="FrameRateRangeMax">new MediaAttributeKey&lt;long&gt;("$1", "FrameRateRangeMax")</const>
    <const from-guid="MF_MT_FRAME_RATE_RANGE_MIN" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="FrameRateRangeMin">new MediaAttributeKey&lt;long&gt;("$1", "FrameRateRangeMin")</const>
    <const from-guid="MF_MT_FRAME_SIZE" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="FrameSize">new MediaAttributeKey&lt;long&gt;("$1", "FrameSize")</const>
    <const from-guid="MF_MT_GEOMETRIC_APERTURE" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="GeometricAperture">new MediaAttributeKey&lt;byte[]&gt;("$1", "GeometricAperture")</const>
    <const from-guid="MF_MT_H264_CAPABILITIES" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="H264Capabilities">new MediaAttributeKey&lt;int&gt;("$1", "H264Capabilities")</const>
    <const from-guid="MF_MT_H264_DYNAMIC_RESOLUTION_SCALING" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="H264DynamicResolutionScaling">new MediaAttributeKey&lt;int&gt;("$1", "H264DynamicResolutionScaling")</const>
    <const from-guid="MF_MT_H264_LAYER_OR_VIEW_LAYOUT" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="H264LayerOrViewLayout">new MediaAttributeKey&lt;long&gt;("$1", "H264LayerOrViewLayout")</const>
    <const from-guid="MF_MT_H264_MAX_CODEC_CONFIG_DELAY" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="H264MaxCodecConfigDelay">new MediaAttributeKey&lt;int&gt;("$1", "H264MaxCodecConfigDelay")</const>
    <const from-guid="MF_MT_H264_MAX_MB_PER_SEC" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="H264MaxMbPerSec">new MediaAttributeKey&lt;byte[]&gt;("$1", "H264MaxMbPerSec")</const>
    <const from-guid="MF_MT_H264_RATE_CONTROL_MODES" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="H264RateControlModes">new MediaAttributeKey&lt;int&gt;("$1", "H264RateControlModes")</const>
    <const from-guid="MF_MT_H264_SIMULCAST_SUPPORT" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="H264SimulcastSupport">new MediaAttributeKey&lt;int&gt;("$1", "H264SimulcastSupport")</const>
    <const from-guid="MF_MT_H264_SUPPORTED_RATE_CONTROL_MODES" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="H264SupportedRateControlModes">new MediaAttributeKey&lt;int&gt;("$1", "H264SupportedRateControlModes")</const>
    <const from-guid="MF_MT_H264_SUPPORTED_SLICE_MODES" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="H264SupportedSliceModes">new MediaAttributeKey&lt;int&gt;("$1", "H264SupportedSliceModes")</const>
    <const from-guid="MF_MT_H264_SUPPORTED_SYNC_FRAME_TYPES" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="H264SupportedSyncFrameTypes">new MediaAttributeKey&lt;int&gt;("$1", "H264SupportedSyncFrameTypes")</const>
    <const from-guid="MF_MT_H264_SUPPORTED_USAGES" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="H264SupportedUsages">new MediaAttributeKey&lt;int&gt;("$1", "H264SupportedUsages")</const>
    <const from-guid="MF_MT_H264_SVC_CAPABILITIES" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="H264SvcCapabilities">new MediaAttributeKey&lt;int&gt;("$1", "H264SvcCapabilities")</const>
    <const from-guid="MF_MT_H264_USAGE" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="H264Usage">new MediaAttributeKey&lt;int&gt;("$1", "H264Usage")</const>
    <const from-guid="MF_MT_IMAGE_LOSS_TOLERANT" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="ImageLossTolerant">new MediaAttributeKey&lt;int&gt;("$1", "ImageLossTolerant")</const>
    <const from-guid="MF_MT_INTERLACE_MODE" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="InterlaceMode">new MediaAttributeKey&lt;int&gt;("$1", "InterlaceMode")</const>
    <const from-guid="MF_MT_MAJOR_TYPE" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="MajorType">new MediaAttributeKey&lt;System.Guid&gt;("$1", "MajorType")</const>
    <const from-guid="MF_MT_MAX_KEYFRAME_SPACING" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="MaxKeyframeSpacing">new MediaAttributeKey&lt;int&gt;("$1", "MaxKeyframeSpacing")</const>
    <const from-guid="MF_MT_MINIMUM_DISPLAY_APERTURE" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="MinimumDisplayAperture">new MediaAttributeKey&lt;byte[]&gt;("$1", "MinimumDisplayAperture")</const>
    <const from-guid="MF_MT_MPEG_SEQUENCE_HEADER" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="MpegSequenceHeader">new MediaAttributeKey&lt;byte[]&gt;("$1", "MpegSequenceHeader")</const>
    <const from-guid="MF_MT_MPEG_START_TIME_CODE" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="MpegStartTimeCode">new MediaAttributeKey&lt;int&gt;("$1", "MpegStartTimeCode")</const>
    <const from-guid="MF_MT_MPEG2_CONTENT_PACKET" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Mpeg2ContentPACKET">new MediaAttributeKey&lt;int&gt;("$1", "Mpeg2ContentPACKET")</const>
    <const from-guid="MF_MT_MPEG2_FLAGS" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Mpeg2Flags">new MediaAttributeKey&lt;int&gt;("$1", "Mpeg2Flags")</const>
    <const from-guid="MF_MT_MPEG2_LEVEL" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Mpeg2Level">new MediaAttributeKey&lt;int&gt;("$1", "Mpeg2Level")</const>
    <const from-guid="MF_MT_MPEG2_PROFILE" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Mpeg2Profile">new MediaAttributeKey&lt;int&gt;("$1", "Mpeg2Profile")</const>
    <const from-guid="MF_MT_MPEG2_STANDARD" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Mpeg2STANDARD">new MediaAttributeKey&lt;int&gt;("$1", "Mpeg2STANDARD")</const>
    <const from-guid="MF_MT_MPEG2_TIMECODE" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Mpeg2TIMECODE">new MediaAttributeKey&lt;int&gt;("$1", "Mpeg2TIMECODE")</const>
    <const from-guid="MF_MT_MPEG4_CURRENT_SAMPLE_ENTRY" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Mpeg4CurrentSampleEntry">new MediaAttributeKey&lt;int&gt;("$1", "Mpeg4CurrentSampleEntry")</const>
    <const from-guid="MF_MT_MPEG4_SAMPLE_DESCRIPTION" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="Mpeg4SampleDescription">new MediaAttributeKey&lt;byte[]&gt;("$1", "Mpeg4SampleDescription")</const>
    <const from-guid="MF_MT_ORIGINAL_4CC" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Original4cc">new MediaAttributeKey&lt;int&gt;("$1", "Original4cc")</const>
    <const from-guid="MF_MT_ORIGINAL_WAVE_FORMAT_TAG" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="OriginalWaveFormatTag">new MediaAttributeKey&lt;int&gt;("$1", "OriginalWaveFormatTag")</const>
    <const from-guid="MF_MT_PAD_CONTROL_FLAGS" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="PadControlFlags">new MediaAttributeKey&lt;int&gt;("$1", "PadControlFlags")</const>
    <const from-guid="MF_MT_PALETTE" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="Palette">new MediaAttributeKey&lt;byte[]&gt;("$1", "Palette")</const>
    <const from-guid="MF_MT_PAN_SCAN_APERTURE" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="PanScanAperture">new MediaAttributeKey&lt;byte[]&gt;("$1", "PanScanAperture")</const>
    <const from-guid="MF_MT_PAN_SCAN_ENABLED" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="PanScanEnabled">new MediaAttributeKey&lt;bool&gt;("$1", "PanScanEnabled")</const>
    <const from-guid="MF_MT_PIXEL_ASPECT_RATIO" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="PixelAspectRatio">new MediaAttributeKey&lt;long&gt;("$1", "PixelAspectRatio")</const>
    <const from-guid="MF_MT_SAMPLE_SIZE" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="SampleSize">new MediaAttributeKey&lt;int&gt;("$1", "SampleSize")</const>
    <const from-guid="MF_MT_SOURCE_CONTENT_HINT" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="SourceContentHint">new MediaAttributeKey&lt;int&gt;("$1", "SourceContentHint")</const>
    <const from-guid="MF_MT_SUBTYPE" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="Subtype">new MediaAttributeKey&lt;System.Guid&gt;("$1", "Subtype")</const>
    <const from-guid="MF_MT_TIMESTAMP_CAN_BE_DTS" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="TimestampCanBeDTS">new MediaAttributeKey&lt;bool&gt;("$1", "TimestampCanBeDTS")</const>
    <const from-guid="MF_MT_TRANSFER_FUNCTION" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="TransferFunction">new MediaAttributeKey&lt;int&gt;("$1", "TransferFunction")</const>
    <const from-guid="MF_MT_USER_DATA" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="UserData">new MediaAttributeKey&lt;byte[]&gt;("$1", "UserData")</const>
    <const from-guid="MF_MT_VIDEO_3D" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="Video3d">new MediaAttributeKey&lt;bool&gt;("$1", "Video3d")</const>
    <const from-guid="MF_MT_VIDEO_3D_FIRST_IS_LEFT" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="Video3dFirstIsLeft">new MediaAttributeKey&lt;bool&gt;("$1", "Video3dFirstIsLeft")</const>
    <const from-guid="MF_MT_VIDEO_3D_FORMAT" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Video3dFormat">new MediaAttributeKey&lt;int&gt;("$1", "Video3dFormat")</const>
    <const from-guid="MF_MT_VIDEO_3D_LEFT_IS_BASE" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="Video3dLeftIsBase">new MediaAttributeKey&lt;bool&gt;("$1", "Video3dLeftIsBase")</const>
    <const from-guid="MF_MT_VIDEO_3D_NUM_VIEWS" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Video3dNumViews">new MediaAttributeKey&lt;int&gt;("$1", "Video3dNumViews")</const>
    <const from-guid="MF_MT_VIDEO_CHROMA_SITING" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="VideoChromaSiting">new MediaAttributeKey&lt;int&gt;("$1", "VideoChromaSiting")</const>
    <const from-guid="MF_MT_VIDEO_LIGHTING" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="VideoLighting">new MediaAttributeKey&lt;int&gt;("$1", "VideoLighting")</const>
    <const from-guid="MF_MT_VIDEO_NOMINAL_RANGE" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="VideoNominalRange">new MediaAttributeKey&lt;int&gt;("$1", "VideoNominalRange")</const>
    <const from-guid="MF_MT_VIDEO_PRIMARIES" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="VideoPrimaries">new MediaAttributeKey&lt;int&gt;("$1", "VideoPrimaries")</const>
    <const from-guid="MF_MT_VIDEO_ROTATION" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="VideoRotation">new MediaAttributeKey&lt;int&gt;("$1", "VideoRotation")</const>
    <const from-guid="MF_MT_WRAPPED_TYPE" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="WrappedType">new MediaAttributeKey&lt;byte[]&gt;("$1", "WrappedType")</const>
    <const from-guid="MF_MT_YUV_MATRIX" class="Vortice.MediaFoundation.MediaTypeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="YuvMatrix">new MediaAttributeKey&lt;int&gt;("$1", "YuvMatrix")</const>


    <const from-guid="MF_PD_APP_CONTEXT" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;Vortice.ComObject&gt;" name="AppContext">new MediaAttributeKey&lt;Vortice.ComObject&gt;("$1", "AppContext")</const>
    <const from-guid="MF_PD_ASF_CODECLIST" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="AsfCodeclist">new MediaAttributeKey&lt;byte[]&gt;("$1", "AsfCodeclist")</const>
    <const from-guid="MF_PD_ASF_CONTENTENCRYPTION_KEYID" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="AsfContentencryptionKeyid">new MediaAttributeKey&lt;string&gt;("$1", "AsfContentencryptionKeyid")</const>
    <const from-guid="MF_PD_ASF_CONTENTENCRYPTION_LICENSE_URL" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="AsfContentencryptionLicenseUrl">new MediaAttributeKey&lt;string&gt;("$1", "AsfContentencryptionLicenseUrl")</const>
    <const from-guid="MF_PD_ASF_CONTENTENCRYPTION_SECRET_DATA" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="AsfContentencryptionSecretData">new MediaAttributeKey&lt;byte[]&gt;("$1", "AsfContentencryptionSecretData")</const>
    <const from-guid="MF_PD_ASF_CONTENTENCRYPTION_TYPE" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="AsfContentencryptionType">new MediaAttributeKey&lt;string&gt;("$1", "AsfContentencryptionType")</const>
    <const from-guid="MF_PD_ASF_CONTENTENCRYPTIONEX_ENCRYPTION_DATA" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="AsfContentencryptionexEncryptionData">new MediaAttributeKey&lt;byte[]&gt;("$1", "AsfContentencryptionexEncryptionData")</const>
    <const from-guid="MF_PD_ASF_DATA_LENGTH" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="AsfDataLength">new MediaAttributeKey&lt;long&gt;("$1", "AsfDataLength")</const>
    <const from-guid="MF_PD_ASF_DATA_START_OFFSET" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="AsfDataStartOffset">new MediaAttributeKey&lt;long&gt;("$1", "AsfDataStartOffset")</const>
    <const from-guid="MF_PD_ASF_FILEPROPERTIES_CREATION_TIME" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="AsfFilepropertiesCreationTime">new MediaAttributeKey&lt;byte[]&gt;("$1", "AsfFilepropertiesCreationTime")</const>
    <const from-guid="MF_PD_ASF_FILEPROPERTIES_FILE_ID" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="AsfFilepropertiesFileId">new MediaAttributeKey&lt;System.Guid&gt;("$1", "AsfFilepropertiesFileId")</const>
    <const from-guid="MF_PD_ASF_FILEPROPERTIES_FLAGS" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AsfFilepropertiesFlags">new MediaAttributeKey&lt;int&gt;("$1", "AsfFilepropertiesFlags")</const>
    <const from-guid="MF_PD_ASF_FILEPROPERTIES_MAX_BITRATE" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AsfFilepropertiesMaxBitrate">new MediaAttributeKey&lt;int&gt;("$1", "AsfFilepropertiesMaxBitrate")</const>
    <const from-guid="MF_PD_ASF_FILEPROPERTIES_MAX_PACKET_SIZE" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AsfFilepropertiesMaxPacketSize">new MediaAttributeKey&lt;int&gt;("$1", "AsfFilepropertiesMaxPacketSize")</const>
    <const from-guid="MF_PD_ASF_FILEPROPERTIES_MIN_PACKET_SIZE" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AsfFilepropertiesMinPacketSize">new MediaAttributeKey&lt;int&gt;("$1", "AsfFilepropertiesMinPacketSize")</const>
    <const from-guid="MF_PD_ASF_FILEPROPERTIES_PACKETS" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AsfFilepropertiesPackets">new MediaAttributeKey&lt;int&gt;("$1", "AsfFilepropertiesPackets")</const>
    <const from-guid="MF_PD_ASF_FILEPROPERTIES_PLAY_DURATION" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="AsfFilepropertiesPlayDuration">new MediaAttributeKey&lt;long&gt;("$1", "AsfFilepropertiesPlayDuration")</const>
    <const from-guid="MF_PD_ASF_FILEPROPERTIES_PREROLL" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="AsfFilepropertiesPreroll">new MediaAttributeKey&lt;long&gt;("$1", "AsfFilepropertiesPreroll")</const>
    <const from-guid="MF_PD_ASF_FILEPROPERTIES_SEND_DURATION" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="AsfFilepropertiesSendDuration">new MediaAttributeKey&lt;long&gt;("$1", "AsfFilepropertiesSendDuration")</const>
    <const from-guid="MF_PD_ASF_INFO_HAS_AUDIO" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="AsfInfoHasAudio">new MediaAttributeKey&lt;bool&gt;("$1", "AsfInfoHasAudio")</const>
    <const from-guid="MF_PD_ASF_INFO_HAS_NON_AUDIO_VIDEO" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="AsfInfoHasNonAudioVideo">new MediaAttributeKey&lt;bool&gt;("$1", "AsfInfoHasNonAudioVideo")</const>
    <const from-guid="MF_PD_ASF_INFO_HAS_VIDEO" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="AsfInfoHasVideo">new MediaAttributeKey&lt;bool&gt;("$1", "AsfInfoHasVideo")</const>
    <const from-guid="MF_PD_ASF_LANGLIST" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="AsfLanglist">new MediaAttributeKey&lt;byte[]&gt;("$1", "AsfLanglist")</const>
    <const from-guid="MF_PD_ASF_LANGLIST_LEGACYORDER" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="AsfLanglistLegacyorder">new MediaAttributeKey&lt;byte[]&gt;("$1", "AsfLanglistLegacyorder")</const>
    <const from-guid="MF_PD_ASF_MARKER" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="AsfMarker">new MediaAttributeKey&lt;byte[]&gt;("$1", "AsfMarker")</const>
    <const from-guid="MF_PD_ASF_METADATA_IS_VBR" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="AsfMetadataIsVbr">new MediaAttributeKey&lt;bool&gt;("$1", "AsfMetadataIsVbr")</const>
    <const from-guid="MF_PD_ASF_METADATA_LEAKY_BUCKET_PAIRS" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="AsfMetadataLeakyBucketPairs">new MediaAttributeKey&lt;byte[]&gt;("$1", "AsfMetadataLeakyBucketPairs")</const>
    <const from-guid="MF_PD_ASF_METADATA_V8_BUFFERAVERAGE" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AsfMetadataV8Bufferaverage">new MediaAttributeKey&lt;int&gt;("$1", "AsfMetadataV8Bufferaverage")</const>
    <const from-guid="MF_PD_ASF_METADATA_V8_VBRPEAK" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AsfMetadataV8Vbrpeak">new MediaAttributeKey&lt;int&gt;("$1", "AsfMetadataV8Vbrpeak")</const>
    <const from-guid="MF_PD_ASF_SCRIPT" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="AsfScript">new MediaAttributeKey&lt;byte[]&gt;("$1", "AsfScript")</const>
    <const from-guid="MF_PD_AUDIO_ENCODING_BITRATE" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AudioEncodingBitrate">new MediaAttributeKey&lt;int&gt;("$1", "AudioEncodingBitrate")</const>
    <const from-guid="MF_PD_AUDIO_ISVARIABLEBITRATE" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AudioIsvariablebitrate">new MediaAttributeKey&lt;int&gt;("$1", "AudioIsvariablebitrate")</const>
    <const from-guid="MF_PD_DURATION" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="Duration">new MediaAttributeKey&lt;long&gt;("$1", "Duration")</const>
    <const from-guid="MF_PD_LAST_MODIFIED_TIME" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="LastModifiedTime">new MediaAttributeKey&lt;byte[]&gt;("$1", "LastModifiedTime")</const>
    <const from-guid="MF_PD_MIME_TYPE" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="MimeType">new MediaAttributeKey&lt;string&gt;("$1", "MimeType")</const>
    <const from-guid="MF_PD_PLAYBACK_BOUNDARY_TIME" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="PlaybackBoundaryTime">new MediaAttributeKey&lt;long&gt;("$1", "PlaybackBoundaryTime")</const>
    <const from-guid="MF_PD_PLAYBACK_ELEMENT_ID" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="PlaybackElementId">new MediaAttributeKey&lt;int&gt;("$1", "PlaybackElementId")</const>
    <const from-guid="MF_PD_PMPHOST_CONTEXT" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;Vortice.ComObject&gt;" name="PmphostContext">new MediaAttributeKey&lt;Vortice.ComObject&gt;("$1", "PmphostContext")</const>
    <const from-guid="MF_PD_PREFERRED_LANGUAGE" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="PreferredLanguage">new MediaAttributeKey&lt;string&gt;("$1", "PreferredLanguage")</const>
    <const from-guid="MF_PD_SAMI_STYLELIST" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="SamiStylelist">new MediaAttributeKey&lt;byte[]&gt;("$1", "SamiStylelist")</const>
    <const from-guid="MF_PD_TOTAL_FILE_SIZE" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="TotalFileSize">new MediaAttributeKey&lt;long&gt;("$1", "TotalFileSize")</const>
    <const from-guid="MF_PD_VIDEO_ENCODING_BITRATE" class="Vortice.MediaFoundation.PresentationDescriptionAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="VideoEncodingBitrate">new MediaAttributeKey&lt;int&gt;("$1", "VideoEncodingBitrate")</const>
    <const from-guid="MF_READWRITE_D3D_OPTIONAL" class="Vortice.MediaFoundation.SinkWriterAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="ReadwriteD3DOptional">new MediaAttributeKey&lt;bool&gt;("$1", "ReadwriteD3DOptional")</const>
    <const from-guid="MF_READWRITE_DISABLE_CONVERTERS" class="Vortice.MediaFoundation.SinkWriterAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="ReadwriteDisableConverters">new MediaAttributeKey&lt;int&gt;("$1", "ReadwriteDisableConverters")</const>
    <const from-guid="MF_READWRITE_ENABLE_HARDWARE_TRANSFORMS" class="Vortice.MediaFoundation.SinkWriterAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="ReadwriteEnableHardwareTransforms">new MediaAttributeKey&lt;int&gt;("$1", "ReadwriteEnableHardwareTransforms")</const>
    <const from-guid="MF_READWRITE_MMCSS_CLASS" class="Vortice.MediaFoundation.SinkWriterAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="ReadwriteMmcssClass">new MediaAttributeKey&lt;string&gt;("$1", "ReadwriteMmcssClass")</const>
    <const from-guid="MF_READWRITE_MMCSS_CLASS_AUDIO" class="Vortice.MediaFoundation.SinkWriterAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="ReadwriteMmcssClassAudio">new MediaAttributeKey&lt;string&gt;("$1", "ReadwriteMmcssClassAudio")</const>
    <const from-guid="MF_READWRITE_MMCSS_PRIORITY" class="Vortice.MediaFoundation.SinkWriterAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="ReadwriteMmcssPriority">new MediaAttributeKey&lt;int&gt;("$1", "ReadwriteMmcssPriority")</const>
    <const from-guid="MF_READWRITE_MMCSS_PRIORITY_AUDIO" class="Vortice.MediaFoundation.SinkWriterAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="ReadwriteMmcssPriorityAudio">new MediaAttributeKey&lt;int&gt;("$1", "ReadwriteMmcssPriorityAudio")</const>
    <const from-guid="MF_SA_BUFFERS_PER_SAMPLE" class="Vortice.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="BuffersPerSample">new MediaAttributeKey&lt;int&gt;("$1", "BuffersPerSample")</const>
    <const from-guid="MF_SA_D3D_AWARE" class="Vortice.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="D3DAware">new MediaAttributeKey&lt;bool&gt;("$1", "D3DAware")</const>
    <const from-guid="MF_SA_D3D11_AWARE" class="Vortice.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="D3D11Aware">new MediaAttributeKey&lt;bool&gt;("$1", "D3D11Aware")</const>
    <const from-guid="MF_SA_D3D11_BINDFLAGS" class="Vortice.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="D3D11Bindflags">new MediaAttributeKey&lt;int&gt;("$1", "D3D11Bindflags")</const>
    <const from-guid="MF_SA_D3D11_USAGE" class="Vortice.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="D3D11Usage">new MediaAttributeKey&lt;int&gt;("$1", "D3D11Usage")</const>
    <const from-guid="MF_SA_REQUIRED_SAMPLE_COUNT" class="Vortice.MediaFoundation.EVRAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="SaRequiredSampleCount">new MediaAttributeKey&lt;int&gt;("$1", "SaRequiredSampleCount")</const>
    <const from-guid="MF_SAMPLEGRABBERSINK_IGNORE_CLOCK" class="Vortice.MediaFoundation.SampleGrabberSinkAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="IgnoreClock">new MediaAttributeKey&lt;int&gt;("$1", "IgnoreClock")</const>
    <const from-guid="MF_SAMPLEGRABBERSINK_SAMPLE_TIME_OFFSET" class="Vortice.MediaFoundation.SampleGrabberSinkAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="SampleTimeOffset">new MediaAttributeKey&lt;long&gt;("$1", "SampleTimeOffset")</const>
    <const from-guid="MF_SD_ASF_EXTSTRMPROP_AVG_BUFFERSIZE" class="Vortice.MediaFoundation.StreamDescriptorAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AsfExtstrmpropAvgBuffersize">new MediaAttributeKey&lt;int&gt;("$1", "AsfExtstrmpropAvgBuffersize")</const>
    <const from-guid="MF_SD_ASF_EXTSTRMPROP_AVG_DATA_BITRATE" class="Vortice.MediaFoundation.StreamDescriptorAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AsfExtstrmpropAvgDataBitrate">new MediaAttributeKey&lt;int&gt;("$1", "AsfExtstrmpropAvgDataBitrate")</const>
    <const from-guid="MF_SD_ASF_EXTSTRMPROP_LANGUAGE_ID_INDEX" class="Vortice.MediaFoundation.StreamDescriptorAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AsfExtstrmpropLanguageIdIndex">new MediaAttributeKey&lt;int&gt;("$1", "AsfExtstrmpropLanguageIdIndex")</const>
    <const from-guid="MF_SD_ASF_EXTSTRMPROP_MAX_BUFFERSIZE" class="Vortice.MediaFoundation.StreamDescriptorAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AsfExtstrmpropMaxBuffersize">new MediaAttributeKey&lt;int&gt;("$1", "AsfExtstrmpropMaxBuffersize")</const>
    <const from-guid="MF_SD_ASF_EXTSTRMPROP_MAX_DATA_BITRATE" class="Vortice.MediaFoundation.StreamDescriptorAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AsfExtstrmpropMaxDataBitrate">new MediaAttributeKey&lt;int&gt;("$1", "AsfExtstrmpropMaxDataBitrate")</const>
    <const from-guid="MF_SD_ASF_METADATA_DEVICE_CONFORMANCE_TEMPLATE" class="Vortice.MediaFoundation.StreamDescriptorAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="AsfMetadataDeviceConformanceTemplate">new MediaAttributeKey&lt;string&gt;("$1", "AsfMetadataDeviceConformanceTemplate")</const>
    <const from-guid="MF_SD_ASF_STREAMBITRATES_BITRATE" class="Vortice.MediaFoundation.StreamDescriptorAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="AsfStreambitratesBitrate">new MediaAttributeKey&lt;int&gt;("$1", "AsfStreambitratesBitrate")</const>
    <const from-guid="MF_SD_LANGUAGE" class="Vortice.MediaFoundation.StreamDescriptorAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="Language">new MediaAttributeKey&lt;string&gt;("$1", "Language")</const>
    <const from-guid="MF_SD_MUTUALLY_EXCLUSIVE" class="Vortice.MediaFoundation.StreamDescriptorAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="MutuallyExclusive">new MediaAttributeKey&lt;int&gt;("$1", "MutuallyExclusive")</const>
    <const from-guid="MF_SD_PROTECTED" class="Vortice.MediaFoundation.StreamDescriptorAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="Protected">new MediaAttributeKey&lt;bool&gt;("$1", "Protected")</const>
    <const from-guid="MF_SD_SAMI_LANGUAGE" class="Vortice.MediaFoundation.StreamDescriptorAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="SamiLanguage">new MediaAttributeKey&lt;string&gt;("$1", "SamiLanguage")</const>
    <const from-guid="MF_SD_STREAM_NAME" class="Vortice.MediaFoundation.StreamDescriptorAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="StreamName">new MediaAttributeKey&lt;string&gt;("$1", "StreamName")</const>
    <const from-guid="MF_SESSION_APPROX_EVENT_OCCURRENCE_TIME" class="Vortice.MediaFoundation.MediaSessionAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="ApproxEventOccurrenceTime">new MediaAttributeKey&lt;long&gt;("$1", "ApproxEventOccurrenceTime")</const>
    <const from-guid="MF_SESSION_CONTENT_PROTECTION_MANAGER" class="Vortice.MediaFoundation.MediaSessionAttributeKeys" type="MediaAttributeKey&lt;Vortice.ComObject&gt;" name="ContentProtectionManager">new MediaAttributeKey&lt;Vortice.ComObject&gt;("$1", "ContentProtectionManager")</const>
    <const from-guid="MF_SESSION_GLOBAL_TIME" class="Vortice.MediaFoundation.MediaSessionAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="GlobalTime">new MediaAttributeKey&lt;bool&gt;("$1", "GlobalTime")</const>
    <const from-guid="MF_SESSION_QUALITY_MANAGER" class="Vortice.MediaFoundation.MediaSessionAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="QualityManager">new MediaAttributeKey&lt;System.Guid&gt;("$1", "QualityManager")</const>
    <const from-guid="MF_SESSION_REMOTE_SOURCE_MODE" class="Vortice.MediaFoundation.MediaSessionAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="RemoteSourceMode">new MediaAttributeKey&lt;bool&gt;("$1", "RemoteSourceMode")</const>
    <const from-guid="MF_SESSION_SERVER_CONTEXT" class="Vortice.MediaFoundation.MediaSessionAttributeKeys" type="MediaAttributeKey&lt;Vortice.ComObject&gt;" name="ServerContext">new MediaAttributeKey&lt;Vortice.ComObject&gt;("$1", "ServerContext")</const>
    <const from-guid="MF_SESSION_TOPOLOADER" class="Vortice.MediaFoundation.MediaSessionAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="Topoloader">new MediaAttributeKey&lt;System.Guid&gt;("$1", "Topoloader")</const>
    <const from-guid="MF_SINK_WRITER_ASYNC_CALLBACK" class="Vortice.MediaFoundation.SinkWriterAttributeKeys" type="MediaAttributeKey&lt;Vortice.ComObject&gt;" name="AsyncCallback">new MediaAttributeKey&lt;Vortice.ComObject&gt;("$1", "AsyncCallback")</const>
    <const from-guid="MF_SINK_WRITER_D3D_MANAGER" class="Vortice.MediaFoundation.SinkWriterAttributeKeys" type="MediaAttributeKey&lt;Vortice.ComObject&gt;" name="D3DManager">new MediaAttributeKey&lt;Vortice.ComObject&gt;("$1", "D3DManager")</const>
    <const from-guid="MF_SINK_WRITER_DISABLE_THROTTLING" class="Vortice.MediaFoundation.SinkWriterAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="DisableThrottling">new MediaAttributeKey&lt;int&gt;("$1", "DisableThrottling")</const>
    <const from-guid="MF_SINK_WRITER_ENCODER_CONFIG" class="Vortice.MediaFoundation.SinkWriterAttributeKeys" type="MediaAttributeKey&lt;Vortice.ComObject&gt;" name="EncoderConfig">new MediaAttributeKey&lt;Vortice.ComObject&gt;("$1", "EncoderConfig")</const>
    <const from-guid="MF_SOURCE_READER_ASYNC_CALLBACK" class="Vortice.MediaFoundation.SourceReaderAttributeKeys" type="MediaAttributeKey&lt;Vortice.ComObject&gt;" name="AsyncCallback">new MediaAttributeKey&lt;Vortice.ComObject&gt;("$1", "AsyncCallback")</const>
    <const from-guid="MF_SOURCE_READER_D3D_MANAGER" class="Vortice.MediaFoundation.SourceReaderAttributeKeys" type="MediaAttributeKey&lt;Vortice.ComObject&gt;" name="D3DManager">new MediaAttributeKey&lt;Vortice.ComObject&gt;("$1", "D3DManager")</const>
    <const from-guid="MF_SOURCE_READER_DISABLE_CAMERA_PLUGINS" class="Vortice.MediaFoundation.SourceReaderAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="DisableCameraPlugins">new MediaAttributeKey&lt;bool&gt;("$1", "DisableCameraPlugins")</const>
    <const from-guid="MF_SOURCE_READER_DISABLE_DXVA" class="Vortice.MediaFoundation.SourceReaderAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="DisableDxva">new MediaAttributeKey&lt;int&gt;("$1", "DisableDxva")</const>
    <const from-guid="MF_SOURCE_READER_DISCONNECT_MEDIASOURCE_ON_SHUTDOWN" class="Vortice.MediaFoundation.SourceReaderAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="DisconnectMediasourceOnShutdown">new MediaAttributeKey&lt;int&gt;("$1", "DisconnectMediasourceOnShutdown")</const>
    <const from-guid="MF_SOURCE_READER_ENABLE_ADVANCED_VIDEO_PROCESSING" class="Vortice.MediaFoundation.SourceReaderAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="EnableAdvancedVideoProcessing">new MediaAttributeKey&lt;bool&gt;("$1", "EnableAdvancedVideoProcessing")</const>
    <const from-guid="MF_SOURCE_READER_ENABLE_TRANSCODE_ONLY_TRANSFORMS" class="Vortice.MediaFoundation.SourceReaderAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="EnableTranscodeOnlyTransforms">new MediaAttributeKey&lt;bool&gt;("$1", "EnableTranscodeOnlyTransforms")</const>
    <const from-guid="MF_SOURCE_READER_ENABLE_VIDEO_PROCESSING" class="Vortice.MediaFoundation.SourceReaderAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="EnableVideoProcessing">new MediaAttributeKey&lt;int&gt;("$1", "EnableVideoProcessing")</const>
    <const from-guid="MF_SOURCE_READER_MEDIASOURCE_CHARACTERISTICS" class="Vortice.MediaFoundation.SourceReaderAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="MediaSourceCharacteristics">new MediaAttributeKey&lt;int&gt;("$1", "MediaSourceCharacteristics")</const>
    <const from-guid="MF_SOURCE_READER_MEDIASOURCE_CONFIG" class="Vortice.MediaFoundation.SourceReaderAttributeKeys" type="MediaAttributeKey&lt;Vortice.ComObject&gt;" name="MediaSourceConfig">new MediaAttributeKey&lt;Vortice.ComObject&gt;("$1", "MediaSourceConfig")</const>



    <const from-guid="MF_TOPOLOGY_DISABLE_LOCAL_TRANSFORMS" class="Vortice.MediaFoundation.TopologyAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="DisableLocalTransforms">new MediaAttributeKey&lt;bool&gt;("$1", "DisableLocalTransforms")</const>
    <const from-guid="MF_TOPOLOGY_DXVA_MODE" class="Vortice.MediaFoundation.TopologyAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="DXVAMode">new MediaAttributeKey&lt;int&gt;("$1", "DXVAMode")</const>
    <const from-guid="MF_TOPOLOGY_DYNAMIC_CHANGE_NOT_ALLOWED" class="Vortice.MediaFoundation.TopologyAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="DynamicChangeNotAllowed">new MediaAttributeKey&lt;int&gt;("$1", "DynamicChangeNotAllowed")</const>
    <const from-guid="MF_TOPOLOGY_ENUMERATE_SOURCE_TYPES" class="Vortice.MediaFoundation.TopologyAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="EnumerateSourceTypes">new MediaAttributeKey&lt;int&gt;("$1", "EnumerateSourceTypes")</const>
    <const from-guid="MF_TOPOLOGY_HARDWARE_MODE" class="Vortice.MediaFoundation.TopologyAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="HardwareMode">new MediaAttributeKey&lt;int&gt;("$1", "HardwareMode")</const>
    <const from-guid="MF_TOPOLOGY_NO_MARKIN_MARKOUT" class="Vortice.MediaFoundation.TopologyAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="NoMarkinMarkout">new MediaAttributeKey&lt;bool&gt;("$1", "NoMarkinMarkout")</const>
    <const from-guid="MF_TOPOLOGY_PLAYBACK_FRAMERATE" class="Vortice.MediaFoundation.TopologyAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="PlaybackFramerate">new MediaAttributeKey&lt;long&gt;("$1", "PlaybackFramerate")</const>
    <const from-guid="MF_TOPOLOGY_PLAYBACK_MAX_DIMS" class="Vortice.MediaFoundation.TopologyAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="PlaybackMaxDimensions">new MediaAttributeKey&lt;long&gt;("$1", "PlaybackMaxDimensions")</const>
    <const from-guid="MF_TOPOLOGY_PROJECTSTART" class="Vortice.MediaFoundation.TopologyAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="ProjectStart">new MediaAttributeKey&lt;long&gt;("$1", "ProjectStart")</const>
    <const from-guid="MF_TOPOLOGY_PROJECTSTOP" class="Vortice.MediaFoundation.TopologyAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="ProjectStop">new MediaAttributeKey&lt;long&gt;("$1", "ProjectStop")</const>
    <const from-guid="MF_TOPOLOGY_RESOLUTION_STATUS" class="Vortice.MediaFoundation.TopologyAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="ResolutionStatus">new MediaAttributeKey&lt;int&gt;("$1", "ResolutionStatus")</const>
    <const from-guid="MF_TOPOLOGY_START_TIME_ON_PRESENTATION_SWITCH" class="Vortice.MediaFoundation.TopologyAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="StartTimeOnPresentationSwitch">new MediaAttributeKey&lt;long&gt;("$1", "StartTimeOnPresentationSwitch")</const>
    <const from-guid="MF_TOPOLOGY_STATIC_PLAYBACK_OPTIMIZATIONS" class="Vortice.MediaFoundation.TopologyAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="StaticPlaybackOptimizations">new MediaAttributeKey&lt;int&gt;("$1", "StaticPlaybackOptimizations")</const>
    <const from-guid="MF_TOPONODE_CONNECT_METHOD" class="Vortice.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="ConnectMethod">new MediaAttributeKey&lt;int&gt;("$1", "ConnectMethod")</const>
    <const from-guid="MF_TOPONODE_D3DAWARE" class="Vortice.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="D3DAWARE">new MediaAttributeKey&lt;bool&gt;("$1", "D3DAWARE")</const>
    <const from-guid="MF_TOPONODE_DECODER" class="Vortice.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="Decoder">new MediaAttributeKey&lt;bool&gt;("$1", "Decoder")</const>
    <const from-guid="MF_TOPONODE_DECRYPTOR" class="Vortice.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="Decryptor">new MediaAttributeKey&lt;bool&gt;("$1", "Decryptor")</const>
    <const from-guid="MF_TOPONODE_DISABLE_PREROLL" class="Vortice.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="DisablePreroll">new MediaAttributeKey&lt;bool&gt;("$1", "DisablePreroll")</const>
    <const from-guid="MF_TOPONODE_DISCARDABLE" class="Vortice.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="Discardable">new MediaAttributeKey&lt;byte[]&gt;("$1", "Discardable")</const>
    <const from-guid="MF_TOPONODE_DRAIN" class="Vortice.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Drain">new MediaAttributeKey&lt;int&gt;("$1", "Drain")</const>
    <const from-guid="MF_TOPONODE_ERROR_MAJORTYPE" class="Vortice.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="ErrorMajortype">new MediaAttributeKey&lt;System.Guid&gt;("$1", "ErrorMajortype")</const>
    <const from-guid="MF_TOPONODE_ERROR_SUBTYPE" class="Vortice.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="ErrorSubtype">new MediaAttributeKey&lt;System.Guid&gt;("$1", "ErrorSubtype")</const>
    <const from-guid="MF_TOPONODE_ERRORCODE" class="Vortice.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Errorcode">new MediaAttributeKey&lt;int&gt;("$1", "Errorcode")</const>
    <const from-guid="MF_TOPONODE_FLUSH" class="Vortice.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Flush">new MediaAttributeKey&lt;int&gt;("$1", "Flush")</const>
    <const from-guid="MF_TOPONODE_LOCKED" class="Vortice.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="Locked">new MediaAttributeKey&lt;bool&gt;("$1", "Locked")</const>
    <const from-guid="MF_TOPONODE_MARKIN_HERE" class="Vortice.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="MarkinHere">new MediaAttributeKey&lt;bool&gt;("$1", "MarkinHere")</const>
    <const from-guid="MF_TOPONODE_MARKOUT_HERE" class="Vortice.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="MarkoutHere">new MediaAttributeKey&lt;bool&gt;("$1", "MarkoutHere")</const>
    <const from-guid="MF_TOPONODE_MEDIASTART" class="Vortice.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="Mediastart">new MediaAttributeKey&lt;long&gt;("$1", "Mediastart")</const>
    <const from-guid="MF_TOPONODE_MEDIASTOP" class="Vortice.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="Mediastop">new MediaAttributeKey&lt;long&gt;("$1", "Mediastop")</const>
    <const from-guid="MF_TOPONODE_NOSHUTDOWN_ON_REMOVE" class="Vortice.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="NoshutdownOnRemove">new MediaAttributeKey&lt;bool&gt;("$1", "NoshutdownOnRemove")</const>
    <const from-guid="MF_TOPONODE_PRESENTATION_DESCRIPTOR" class="Vortice.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;Vortice.ComObject&gt;" name="PresentationDescriptor">new MediaAttributeKey&lt;Vortice.ComObject&gt;("$1", "PresentationDescriptor")</const>
    <const from-guid="MF_TOPONODE_PRIMARYOUTPUT" class="Vortice.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Primaryoutput">new MediaAttributeKey&lt;int&gt;("$1", "Primaryoutput")</const>
    <const from-guid="MF_TOPONODE_RATELESS" class="Vortice.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="Rateless">new MediaAttributeKey&lt;bool&gt;("$1", "Rateless")</const>
    <const from-guid="MF_TOPONODE_SEQUENCE_ELEMENTID" class="Vortice.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="SequenceElementid">new MediaAttributeKey&lt;int&gt;("$1", "SequenceElementid")</const>
    <const from-guid="MF_TOPONODE_SOURCE" class="Vortice.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;Vortice.ComObject&gt;" name="Source">new MediaAttributeKey&lt;Vortice.ComObject&gt;("$1", "Source")</const>
    <const from-guid="MF_TOPONODE_STREAM_DESCRIPTOR" class="Vortice.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;Vortice.ComObject&gt;" name="StreamDescriptor">new MediaAttributeKey&lt;Vortice.ComObject&gt;("$1", "StreamDescriptor")</const>
    <const from-guid="MF_TOPONODE_STREAMID" class="Vortice.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Streamid">new MediaAttributeKey&lt;int&gt;("$1", "Streamid")</const>
    <const from-guid="MF_TOPONODE_TRANSFORM_OBJECTID" class="Vortice.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="TransformObjectid">new MediaAttributeKey&lt;System.Guid&gt;("$1", "TransformObjectid")</const>
    <const from-guid="MF_TOPONODE_WORKQUEUE_ID" class="Vortice.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="WorkqueueId">new MediaAttributeKey&lt;int&gt;("$1", "WorkqueueId")</const>
    <const from-guid="MF_TOPONODE_WORKQUEUE_ITEM_PRIORITY" class="Vortice.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="WorkqueueItemPriority">new MediaAttributeKey&lt;int&gt;("$1", "WorkqueueItemPriority")</const>
    <const from-guid="MF_TOPONODE_WORKQUEUE_MMCSS_CLASS" class="Vortice.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="WorkqueueMmcssClass">new MediaAttributeKey&lt;string&gt;("$1", "WorkqueueMmcssClass")</const>
    <const from-guid="MF_TOPONODE_WORKQUEUE_MMCSS_PRIORITY" class="Vortice.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="WorkqueueMmcssPriority">new MediaAttributeKey&lt;int&gt;("$1", "WorkqueueMmcssPriority")</const>
    <const from-guid="MF_TOPONODE_WORKQUEUE_MMCSS_TASKID" class="Vortice.MediaFoundation.TopologyNodeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="WorkqueueMmcssTaskid">new MediaAttributeKey&lt;int&gt;("$1", "WorkqueueMmcssTaskid")</const>
    <const from-guid="MF_TRANSCODE_ADJUST_PROFILE" class="Vortice.MediaFoundation.TranscodeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="TranscodeAdjustProfile">new MediaAttributeKey&lt;int&gt;("$1", "TranscodeAdjustProfile")</const>
    <const from-guid="MF_TRANSCODE_CONTAINERTYPE" class="Vortice.MediaFoundation.TranscodeAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="TranscodeContainertype">new MediaAttributeKey&lt;System.Guid&gt;("$1", "TranscodeContainertype")</const>
    <const from-guid="MF_TRANSCODE_DONOT_INSERT_ENCODER" class="Vortice.MediaFoundation.TranscodeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="TranscodeDonotInsertEncoder">new MediaAttributeKey&lt;int&gt;("$1", "TranscodeDonotInsertEncoder")</const>
    <const from-guid="MF_TRANSCODE_ENCODINGPROFILE" class="Vortice.MediaFoundation.TranscodeAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="TranscodeEncodingprofile">new MediaAttributeKey&lt;string&gt;("$1", "TranscodeEncodingprofile")</const>
    <const from-guid="MF_TRANSCODE_QUALITYVSSPEED" class="Vortice.MediaFoundation.TranscodeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="TranscodeQualityvsspeed">new MediaAttributeKey&lt;int&gt;("$1", "TranscodeQualityvsspeed")</const>
    <const from-guid="MF_TRANSCODE_SKIP_METADATA_TRANSFER" class="Vortice.MediaFoundation.TranscodeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="TranscodeSkipMetadataTransfer">new MediaAttributeKey&lt;int&gt;("$1", "TranscodeSkipMetadataTransfer")</const>
    <const from-guid="MF_TRANSCODE_TOPOLOGYMODE" class="Vortice.MediaFoundation.TranscodeAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="TranscodeTopologymode">new MediaAttributeKey&lt;int&gt;("$1", "TranscodeTopologymode")</const>
    <const from-guid="MF_TRANSFORM_ASYNC" class="Vortice.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="TransformAsync">new MediaAttributeKey&lt;int&gt;("$1", "TransformAsync")</const>
    <const from-guid="MF_TRANSFORM_ASYNC_UNLOCK" class="Vortice.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="TransformAsyncUnlock">new MediaAttributeKey&lt;int&gt;("$1", "TransformAsyncUnlock")</const>
    <const from-guid="MF_TRANSFORM_CATEGORY_Attribute" class="Vortice.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="TransformCategoryAttribute">new MediaAttributeKey&lt;System.Guid&gt;("$1", "TransformCategoryAttribute")</const>
    <const from-guid="MF_TRANSFORM_FLAGS_Attribute" class="Vortice.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="TransformFlagsAttribute">new MediaAttributeKey&lt;int&gt;("$1", "TransformFlagsAttribute")</const>


    <const from-guid="MFASFSPLITTER_PACKET_BOUNDARY" class="Vortice.MediaFoundation.AsfSplitterAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="PacketBoundary">new MediaAttributeKey&lt;bool&gt;("$1", "PacketBoundary")</const>


    <const from-guid="MFSampleExtension_3DVideo" class="Vortice.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="Video3D">new MediaAttributeKey&lt;bool&gt;("$1", "Video3D")</const>
    <const from-guid="MFSampleExtension_3DVideo_SampleFormat" class="Vortice.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="Video3DSampleFormat">new MediaAttributeKey&lt;int&gt;("$1", "Video3DSampleFormat")</const>
    <const from-guid="MFSampleExtension_BottomFieldFirst" class="Vortice.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="BottomFieldFirst">new MediaAttributeKey&lt;bool&gt;("$1", "BottomFieldFirst")</const>
    <const from-guid="MFSampleExtension_CleanPoint" class="Vortice.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="CleanPoint">new MediaAttributeKey&lt;bool&gt;("$1", "CleanPoint")</const>
    <const from-guid="MFSampleExtension_DecodeTimestamp" class="Vortice.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="DecodeTimestamp">new MediaAttributeKey&lt;long&gt;("$1", "DecodeTimestamp")</const>
    <const from-guid="MFSampleExtension_DerivedFromTopField" class="Vortice.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="DerivedFromTopField">new MediaAttributeKey&lt;bool&gt;("$1", "DerivedFromTopField")</const>
    <const from-guid="MFSampleExtension_DeviceTimestamp" class="Vortice.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="DeviceTimestamp">new MediaAttributeKey&lt;long&gt;("$1", "DeviceTimestamp")</const>
    <const from-guid="MFSampleExtension_Discontinuity" class="Vortice.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="Discontinuity">new MediaAttributeKey&lt;bool&gt;("$1", "Discontinuity")</const>
    <const from-guid="MFSampleExtension_FrameCorruption" class="Vortice.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="FrameCorruption">new MediaAttributeKey&lt;int&gt;("$1", "FrameCorruption")</const>
    <const from-guid="MFSampleExtension_Interlaced" class="Vortice.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="Interlaced">new MediaAttributeKey&lt;bool&gt;("$1", "Interlaced")</const>
    <const from-guid="MFSampleExtension_PacketCrossOffsets" class="Vortice.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="PacketCrossOffsets">new MediaAttributeKey&lt;byte[]&gt;("$1", "PacketCrossOffsets")</const>
    <const from-guid="MFSampleExtension_RepeatFirstField" class="Vortice.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="RepeatFirstField">new MediaAttributeKey&lt;bool&gt;("$1", "RepeatFirstField")</const>
    <const from-guid="MFSampleExtension_SingleField" class="Vortice.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="SingleField">new MediaAttributeKey&lt;bool&gt;("$1", "SingleField")</const>
    <const from-guid="MFSampleExtension_Token" class="Vortice.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;Vortice.ComObject&gt;" name="Token">new MediaAttributeKey&lt;Vortice.ComObject&gt;("$1", "Token")</const>
    <const from-guid="MFSampleExtension_VideoDSPMode" class="Vortice.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="VideoDSPMode">new MediaAttributeKey&lt;int&gt;("$1", "VideoDSPMode")</const>
    <const from-guid="MFSampleExtension_VideoEncodePictureType" class="Vortice.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="VideoEncodePictureType">new MediaAttributeKey&lt;int&gt;("$1", "VideoEncodePictureType")</const>
    <const from-guid="MFSampleExtension_VideoEncodeQP" class="Vortice.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="VideoEncodeQP">new MediaAttributeKey&lt;long&gt;("$1", "VideoEncodeQP")</const>
    <const from-guid="MFT_CODEC_MERIT_Attribute" class="Vortice.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="MftCodecMeritAttribute">new MediaAttributeKey&lt;int&gt;("$1", "MftCodecMeritAttribute")</const>
    <const from-guid="MFT_CONNECTED_STREAM_ATTRIBUTE" class="Vortice.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;Vortice.ComObject&gt;" name="MftConnectedStreamAttribute">new MediaAttributeKey&lt;Vortice.ComObject&gt;("$1", "MftConnectedStreamAttribute")</const>
    <const from-guid="MFT_CONNECTED_TO_HW_STREAM" class="Vortice.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="MftConnectedToHwStream">new MediaAttributeKey&lt;int&gt;("$1", "MftConnectedToHwStream")</const>
    <const from-guid="MFT_DECODER_EXPOSE_OUTPUT_TYPES_IN_NATIVE_ORDER" class="Vortice.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="MftDecoderExposeOutputTypesInNativeOrder">new MediaAttributeKey&lt;int&gt;("$1", "MftDecoderExposeOutputTypesInNativeOrder")</const>
    <const from-guid="MFT_DECODER_FINAL_VIDEO_RESOLUTION_HINT" class="Vortice.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="MftDecoderFinalVideoResolutionHint">new MediaAttributeKey&lt;long&gt;("$1", "MftDecoderFinalVideoResolutionHint")</const>
    <const from-guid="MFT_ENUM_HARDWARE_URL_Attribute" class="Vortice.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="MftEnumHardwareUrlAttribute">new MediaAttributeKey&lt;string&gt;("$1", "MftEnumHardwareUrlAttribute")</const>
    <const from-guid="MFT_ENUM_HARDWARE_VENDOR_ID_Attribute" class="Vortice.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="MftEnumHardwareVendorIdAttribute">new MediaAttributeKey&lt;string&gt;("$1", "MftEnumHardwareVendorIdAttribute")</const>
    <const from-guid="MFT_ENUM_TRANSCODE_ONLY_ATTRIBUTE" class="Vortice.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="MftEnumTranscodeOnlyAttribute">new MediaAttributeKey&lt;int&gt;("$1", "MftEnumTranscodeOnlyAttribute")</const>
    <const from-guid="MFT_FIELDOFUSE_UNLOCK_Attribute" class="Vortice.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;Vortice.ComObject&gt;" name="MftFieldofuseUnlockAttribute">new MediaAttributeKey&lt;Vortice.ComObject&gt;("$1", "MftFieldofuseUnlockAttribute")</const>
    <const from-guid="MFT_FRIENDLY_NAME_Attribute" class="Vortice.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;string&gt;" name="MftFriendlyNameAttribute">new MediaAttributeKey&lt;string&gt;("$1", "MftFriendlyNameAttribute")</const>
    <const from-guid="MFT_HW_TIMESTAMP_WITH_QPC_Attribute" class="Vortice.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="MftHwTimestampWithQpcAttribute">new MediaAttributeKey&lt;int&gt;("$1", "MftHwTimestampWithQpcAttribute")</const>
    <const from-guid="MFT_INPUT_TYPES_Attributes" class="Vortice.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="MftInputTypesAttributes">new MediaAttributeKey&lt;byte[]&gt;("$1", "MftInputTypesAttributes")</const>
    <const from-guid="MFT_OUTPUT_TYPES_Attributes" class="Vortice.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="MftOutputTypesAttributes">new MediaAttributeKey&lt;byte[]&gt;("$1", "MftOutputTypesAttributes")</const>
    <const from-guid="MFT_PREFERRED_ENCODER_PROFILE" class="Vortice.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;Vortice.ComObject&gt;" name="MftPreferredEncoderProfile">new MediaAttributeKey&lt;Vortice.ComObject&gt;("$1", "MftPreferredEncoderProfile")</const>
    <const from-guid="MFT_PREFERRED_OUTPUTTYPE_Attribute" class="Vortice.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;Vortice.ComObject&gt;" name="MftPreferredOutputtypeAttribute">new MediaAttributeKey&lt;Vortice.ComObject&gt;("$1", "MftPreferredOutputtypeAttribute")</const>
    <const from-guid="MFT_PROCESS_LOCAL_Attribute" class="Vortice.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="MftProcessLocalAttribute">new MediaAttributeKey&lt;int&gt;("$1", "MftProcessLocalAttribute")</const>
    <const from-guid="MFT_SUPPORT_3DVIDEO" class="Vortice.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="MftSupport3dvideo">new MediaAttributeKey&lt;bool&gt;("$1", "MftSupport3dvideo")</const>
    <const from-guid="MFT_SUPPORT_DYNAMIC_FORMAT_CHANGE" class="Vortice.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;bool&gt;" name="MftSupportDynamicFormatChange">new MediaAttributeKey&lt;bool&gt;("$1", "MftSupportDynamicFormatChange")</const>
    <const from-guid="MFT_TRANSFORM_CLSID_Attribute" class="Vortice.MediaFoundation.TransformAttributeKeys" type="MediaAttributeKey&lt;System.Guid&gt;" name="MftTransformClsidAttribute">new MediaAttributeKey&lt;System.Guid&gt;("$1", "MftTransformClsidAttribute")</const>
    <const from-guid="VIDEO_ZOOM_RECT" class="Vortice.MediaFoundation.EVRAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="VideoZoomRect">new MediaAttributeKey&lt;byte[]&gt;("$1", "VideoZoomRect")</const>

    <create visibility="public static" class="MediaServiceKeys" />
    <const from-guid="MF_METADATA_PROVIDER_SERVICE" class='Vortice.MediaFoundation.MediaServiceKeys' type='System.Guid' name="MetadataProvider">new System.Guid("$1")</const>
    <const from-guid="MF_PMP_SERVER_CONTEXT" class='Vortice.MediaFoundation.MediaServiceKeys' type='System.Guid' name="PMPServer">new System.Guid("$1")</const>
    <const from-guid="MF_QUALITY_SERVICES" class='Vortice.MediaFoundation.MediaServiceKeys' type='System.Guid' name="Qualiy">new System.Guid("$1")</const>
    <const from-guid="MF_RATE_CONTROL_SERVICE" class='Vortice.MediaFoundation.MediaServiceKeys' type='System.Guid' name="RateControl">new System.Guid("$1")</const>
    <const from-guid="MF_RATE_CONTROL_SERVICE" class='Vortice.MediaFoundation.MediaServiceKeys' type='System.Guid' name="">new System.Guid("$1")</const>
    <const from-guid="MF_REMOTE_PROXY" class='Vortice.MediaFoundation.MediaServiceKeys' type='System.Guid' name="RemoteProxy">new System.Guid("$1")</const>
    <const from-guid="MF_SAMI_SERVICE" class='Vortice.MediaFoundation.MediaServiceKeys' type='System.Guid' name="SAMI">new System.Guid("$1")</const>
    <const from-guid="MF_SOURCE_PRESENTATION_PROVIDER_SERVICE" class='Vortice.MediaFoundation.MediaServiceKeys' type='System.Guid' name="SourcePresentationProvider">new System.Guid("$1")</const>
    <const from-guid="MF_TIMECODE_SERVICE" class='Vortice.MediaFoundation.MediaServiceKeys' type='System.Guid' name="TimeCode">new System.Guid("$1")</const>
    <const from-guid="MF_TOPONODE_ATTRIBUTE_EDITOR_SERVICE" class='Vortice.MediaFoundation.MediaServiceKeys' type='System.Guid' name="ToplogyNodeAttributeEditor">new System.Guid("$1")</const>
    <const from-guid="MF_WRAPPED_OBJECT" class='Vortice.MediaFoundation.MediaServiceKeys' type='System.Guid' name="WrappedObject">new System.Guid("$1")</const>
    <const from-guid="MF_WORKQUEUE_SERVICES" class='Vortice.MediaFoundation.MediaServiceKeys' type='System.Guid' name="WorkQueue">new System.Guid("$1")</const>
    <const from-guid="MFNET_SAVEJOB_SERVICE" class='Vortice.MediaFoundation.MediaServiceKeys' type='System.Guid' name="SaveJob">new System.Guid("$1")</const>
    <const from-guid="MFNETSOURCE_STATISTICS_SERVICE" class='Vortice.MediaFoundation.MediaServiceKeys' type='System.Guid' name="NetworkSourceStatistics">new System.Guid("$1")</const>
    <const from-guid="MR_AUDIO_POLICY_SERVICE" class='Vortice.MediaFoundation.MediaServiceKeys' type='System.Guid' name="AudioPolicy">new System.Guid("$1")</const>
    <const from-guid="MR_BUFFER_SERVICE" class='Vortice.MediaFoundation.MediaServiceKeys' type='System.Guid' name="Buffer">new System.Guid("$1")</const>
    <const from-guid="MR_CAPTURE_POLICY_VOLUME_SERVICE" class='Vortice.MediaFoundation.MediaServiceKeys' type='System.Guid' name="CapturePolicyVolume">new System.Guid("$1")</const>
    <const from-guid="MR_POLICY_VOLUME_SERVICE" class='Vortice.MediaFoundation.MediaServiceKeys' type='System.Guid' name="PolicyVolume">new System.Guid("$1")</const>
    <const from-guid="MR_STREAM_VOLUME_SERVICE" class='Vortice.MediaFoundation.MediaServiceKeys' type='System.Guid' name="StreamVolume">new System.Guid("$1")</const>
    <const from-guid="MR_VIDEO_ACCELERATION_SERVICE" class='Vortice.MediaFoundation.MediaServiceKeys' type='System.Guid' name="VideoAcceleration">new System.Guid("$1")</const>

 

    <const from-guid="CLSID_MFMediaEngineClassFactory" visibility="internal" class="Vortice.MediaFoundation.MediaEngineClassFactory" type="System.Guid" name="CLSID_MFMediaEngineClassFactory">new System.Guid("$1")</const>
    <const from-guid="CLSID_MFCaptureEngineClassFactory" visibility="internal" class="Vortice.MediaFoundation.CaptureEngineClassFactory" type="System.Guid" name="CLSID_MFCaptureEngineClassFactory">new System.Guid("$1")</const>
    <const from-guid="CLSID_MFCaptureEngine" visibility="internal" class="Vortice.MediaFoundation.CaptureEngine" type="System.Guid" name="CLSID_MFCaptureEngine">new System.Guid("$1")</const>

    <const from-guid="MFSampleExtension_DescrambleData" class="Vortice.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="DescrambleData">new MediaAttributeKey&lt;long&gt;("$1", "DescrambleData")</const>
    <const from-guid="MFSampleExtension_SampleKeyID" class="Vortice.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;int&gt;" name="SampleKeyID">new MediaAttributeKey&lt;int&gt;("$1", "SampleKeyID")</const>
    <const from-guid="MFSampleExtension_GenKeyFunc" class="Vortice.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="GenKeyFunc">new MediaAttributeKey&lt;long&gt;("$1", "GenKeyFunc")</const>
    <const from-guid="MFSampleExtension_GenKeyCtx" class="Vortice.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;long&gt;" name="GenKeyCtx">new MediaAttributeKey&lt;long&gt;("$1", "GenKeyCtx")</const>
    <const from-guid="MFSampleExtension_PacketCrossOffsets" class="Vortice.MediaFoundation.SampleAttributeKeys" type="MediaAttributeKey&lt;byte[]&gt;" name="PacketCrossOffsets">new MediaAttributeKey&lt;byte[]&gt;("$1", "PacketCrossOffsets")</const>
    <const from-guid="MFT_CATEGORY_(.*)" class="Vortice.MediaFoundation.TransformCategoryGuids" type="System.Guid" name="$1">new System.Guid("$1")</const>

    <create-cpp enum="MFASYNC_CALLBACK_FLAGS" macro="MFASYNC_.*_CALLBACK"/>
    <create-cpp enum="MFASYNC_CALLBACK_QUEUE" macro="MFASYNC_CALLBACK_QUEUE_.*"/>

  </extension>

  <bindings>
    <bind from="MEDIA_EVENT_TYPES" to="Vortice.MediaFoundation.MediaEventTypes"/>
    <bind from="MPEG1VIDEOINFO" to="Vortice.MediaFoundation.Mpeg1VideoInformation"/>
    <bind from="MPEG2VIDEOINFO" to="Vortice.MediaFoundation.Mpeg2VideoInformation"/>
    <bind from="VIDEOINFOHEADER2" to="Vortice.MediaFoundation.VideoInformationHeader2"/>
    <bind from="RESOURCE_CHARACTERISTICS" to="Vortice.MediaFoundation.ResourceCharacteristics"/>
    <bind from="MFARGB" to="Vortice.Mathematics.Color4"/>
  </bindings>

  <naming>
    <short name="MFINPUTTRUSTAUTHORITY">InputTrustAuthority</short>
    <short name="GETFULLTOPOLOGY">GetFullTopology</short>
    <short name="SETTOPOLOGY">SetTopology</short>
    <short name="MEDIASOURCE">MediaSource</short>
    <short name="BYTESTREAM">ByteStream</short>
    <short name="EDGEMODE">EdgeMode</short>
    <short name="ACCESSMODE">AccessMode</short>
    <short name="OPENMODE">OpenMode</short>
  </naming>

  

  <mapping>
    <!-- Enums -->
    <remove enum-item=".*_Mask"/>
    <map enum="MF(.*)" name-tmp="$1"/>
    <map enum="_MFT_(.*)" name-tmp="$1"/>
    <map enum-item="MFT_(.*)" name-tmp="$1"/>
    <map enum="MFT_INPUT_STREAM_INFO" name="InputStreamInfo"/>
    <map enum="MFT_OUTPUT_DATA_BUFFER" name="OutputDataBuffer"/>
    <map enum="MFT_OUTPUT_STREAM_INFO" name="OutputStreamInfo"/>
    <map enum="MFT_REGISTER_TYPE_INFO" name="RegisterTypeInfo"/>
    <map enum="MFT_STREAM_STATE_PARAM" name="StreamStateParam"/>
    <map enum-item="MFNominalRange_([0-9].*)" name="Range$1"/>

    <map enum="MF_TOPOSTATUS" name="TopologyStatus"/>

    <map enum="MFASYNC_CALLBACK_QUEUE" name="WorkQueueType"/>
    <map enum-item="MFASYNC_CALLBACK_QUEUE_(.*)" name-tmp="$1"/>

    <map enum="#MF_RESOLUTION_MEDIASOURCE" name="SourceResolverFlags" none="true" flags="true"/>
    <map enum-item="MF_RESOLUTION_(.*)" name-tmp="$1"/>

    <map enum="#MF_ACTIVATE_CUSTOM_MIXER_ALLOWFAIL" name="ActivateCustomMixerFlags" none="true" flags="true"/>
    <map enum-item="MF_ACTIVATE_CUSTOM_MIXER_ALLOWFAIL" name="AllowFail"/>

    <map enum="#MF_ACTIVATE_CUSTOM_PRESENTER_ALLOWFAIL" name="ActivateCustomPresenterFlags" none="true" flags="true"/>
    <map enum-item="MF_ACTIVATE_CUSTOM_PRESENTER_ALLOWFAIL" name="AllowFail"/>

    <map enum="MF2DBuffer_LockFlags" name="Buffer2DLockFlags"/>
    <remove enum-item="MF2DBuffer_LockFlags_ForceDWORD"/>


    <map enum="MF3DVideoOutputType" name="Video3DOutputType"/>
    <map enum-item="MFCameraIntrinsic_DistortionModelType_6KT" name="SixKT"/>
    <map enum-item="MFVideoSphericalFormat_3DMesh" name="ThreeDMesh"/>
    <map enum-item="MFVideoRotationFormat_(.*)" name="Angle$1"/>
    <map enum-item="MFVideoSrcContentHintFlag_16x9" name="Hint16x9"/>
    <map enum-item="MFVideoSrcContentHintFlag_235_1" name="Hint235_1"/>

    <map enum="#MEUnknown" name="MediaEventTypes"/>
    <map enum-item="ME(.*)" name-tmp="$1"/>
    <map enum-item="MEWMDRM(.*)" name-tmp="WindowsMediaDRM$1"/>
    <remove enum="MEReservedMax"/>

    <!-- WASAIP -->
    <map enum="EDataFlow" name="DataFlow"/>
    <map enum="ERole" name="Role"/>

    <map enum-item="eRender" name="Render"/>
    <map enum-item="eCapture" name="Capture"/>
    <map enum-item="eConsole" name="Console"/>
    <map enum-item="eAll" name="All"/>
    <map enum-item="eMultimedia" name="Multimedia"/>
    <map enum-item="eCommunications" name="Communications"/>
    <remove enum-item=".*_enum_count"/>

    <!-- Structs -->
    <map struct="MF(.*)" name-tmp="$1"/>

    <!-- IMFByteStream -->
    <map interface="IMFByteStream" callback="true" callback-dual="true" callback-visibility="public" autogen-shadow="true" callback-name="MFByteStream" />
    <map param="IMFByteStream::*.*::pb" type="void" attribute="in"/>
    <map param="IMFByteStream::Begin[RW].*::punkState" type="void"/>

    <!-- Interfaces -->
    <!-- IMFMediaSession -->
    <map method="IMFMediaSession::(.*)" hresult="true" check="false"/>
    <map param="IMFMediaSession::GetFullTopology::dwGetFullTopologyFlags" type="MFSESSION_SETTOPOLOGY_FLAGS"/>
    <map param="IMFMediaSession::SetTopology::dwSetTopologyFlags" type="MFSESSION_SETTOPOLOGY_FLAGS"/>

    <!-- IMFSourceResolver -->
    <map method="IMFSourceResolver::(.*)" hresult="true" check="false"/>
    <map method="IMFSourceResolver::CreateObjectFromURL" visibility="internal"/>
    <map param="IMFSourceResolver::CreateObjectFromURL::ppObject" attribute="out" type="void"/>
    <map method="IMFSourceResolver::CreateObjectFromByteStream" visibility="internal"/>
    <map param="IMFSourceResolver::CreateObjectFromByteStream::ppObject" attribute="out" type="void"/>


    <!-- IMFMediaEvent -->
    <map param="IMFMediaEvent::GetType::pmet" type="MEDIA_EVENT_TYPES"/>

    <!-- IMMDeviceEnumerator -->
    <map method="IMMDeviceEnumerator::(.*)" hresult="true" check="false"/>
    <map method="IMMDeviceEnumerator::EnumAudioEndpoints" visibility="internal"/>

    <!-- IMMDeviceCollection -->
    <map interface="IMMDeviceCollection" visibility="internal" />

    <!-- IMMDevice -->
    <map method="IMMDevice::(.*)" hresult="true" check="false"/>
    <map method="IMMDevice::GetState" visibility="internal" property="false" />
    <map method="IMMDevice::OpenPropertyStore" visibility="internal" />
    <map method="IMMDevice::GetId" visibility="internal" />

    <!-- IMFDXGIDeviceManager -->
    <map method="IMFDXGIDeviceManager::(.*)" hresult="true" check="false"/>
    <map method="IMFDXGIDeviceManager::ResetDevice" visibility="internal" />
    <map method="IMFDXGIDeviceManager::LockDevice" visibility="internal"/>
    <map method="IMFDXGIDeviceManager::UnlockDevice" visibility="internal" />

    <!-- Functions -->
    <remove function="IMF.*"/>
    <map function="MF.*" dll='"Mfplat.dll"' group="Vortice.MediaFoundation.MediaFactory" />
    <!--<map function="MFCreateLegacyMediaBufferOnMFMediaBuffer" dll='"Mfplat.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />-->
    <remove function="MFCreateLegacyMediaBufferOnMFMediaBuffer"/>
    <remove function="MFInitMediaTypeFromVideoInfoHeader" />
    <remove function="MFInitMediaTypeFromMPEG1VideoInfo" />
    <remove function="MFInitMediaTypeFromVideoInfoHeader2" />
    <remove function="MFInitMediaTypeFromAMMediaType" />
    <remove function="MFInitMediaTypeFromVideoInfoHeader" />
    <remove function="MFInitMediaTypeFromMPEG2VideoInfo" />
    <remove function="MFInitAMMediaTypeFromMFMediaType" />
    <remove function="MFCreateAMMediaTypeFromMFMediaType"/>

    <map function="MFStartup" visibility="private" />
    <map param="MFCreateAttributes::cInitialSize" default="0"/>

    <map function="MFCreateVideoPresenter" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateVideoMixer" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateVideoMixerAndPresenter" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateVideoRenderer" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateVideoSampleFromSurface" dll='"EVR.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateVideoSampleAllocator" dll='"EVR.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />

    <map function="MFSerializeAttributesToStream" dll='"Mfplat.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFDeserializeAttributesFromStream" dll='"Mfplat.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateTransformActivate" dll='"Mfplat.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />

    <map function="MFTranscodeGetAudioOutputAvailableTypes" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFShutdownObject" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFRR_CreateActivate" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFRequireProtectedEnvironment" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFReadSequencerSegmentOffset" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFLoadSignedLibrary" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFGetTopoNodeCurrentType" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFGetSystemId" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFGetSupportedSchemes" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFGetSupportedMimeTypes" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFGetService" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFGetMultipleServiceProviders" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFGetLocalId" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFEnumDeviceSources" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateWMVEncoderActivate" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateWMAEncoderActivate" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateVideoRendererActivate" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateVideoRenderer" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateUrlmonSchemePlugin" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateTranscodeTopologyFromByteStream" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateTranscodeTopology" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateTranscodeSinkActivate" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateTranscodeProfile" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateTopologyNode" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateTopology" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateTopoLoader" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateStandardQualityManager" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />

    <map function="MFCreateSoundEventSchemePlugin" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateSimpleTypeHandler" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateSequencerSourceRemoteStream" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateSequencerSource" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateSequencerSegmentOffset" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateSecureHttpSchemePlugin" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateSampleGrabberSinkActivate" visibility="internal" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateSampleCopierMFT" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateSAMIByteStreamPlugin" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateRemoteDesktopPlugin" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateProxyLocator" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateProtectedEnvironmentAccess" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreatePresentationDescriptorFromASFProfile" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreatePresentationClock" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreatePMPServer" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreatePMPMediaSession" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreatePMPHost" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateNSCByteStreamPlugin" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateNetSchemePlugin" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateMuxSink" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateMPEG4MediaSink" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateMP3MediaSink" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateMP3ByteStreamPlugin" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateMediaSession" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateMediaProcessor" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateLPCMByteStreamPlugin" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateHttpSchemePlugin" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateFMPEG4MediaSink" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateFileSchemePlugin" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateFileBlockMap" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateDrmNetNDSchemePlugin" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateDeviceSourceActivate" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateDeviceSource" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateCredentialCache" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateCacheManager" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateByteCacheFile" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateAudioRendererActivate" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateAudioRenderer" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateASFStreamSelector" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateASFStreamingMediaSinkActivate" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateASFStreamingMediaSink" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateASFSplitter" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateASFProfileFromPresentationDescriptor" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateASFProfile" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateASFMultiplexer" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateASFMediaSinkActivate" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateASFMediaSink" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateASFIndexerByteStream" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateASFIndexer" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateASFContentInfo" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateASFByteStreamPlugin" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateAppSourceProxy" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateAggregateSource" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateADTSMediaSink" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateAC3MediaSink" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreate3GPMediaSink" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MergePropertyStore" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="ExtractPropVariant" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="DllGetClassObject" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="DllGetActivationFactory" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="DllCanUnloadNow" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="CreateNamedPropertyStore" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="CopyPropertyStore" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="ConvertPropVariant" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="AppendPropVariant" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />

    <map function="MFPCreateMediaPlayer" dll='"mfplay.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateSourceResolver" dll='"mfplat.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="CreatePropertyStore" dll='"mfplat.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFGetSystemTime" dll='"mfplat.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateSystemTimeSource" dll='"mfplat.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreatePresentationDescriptor" dll='"mfplat.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFSerializePresentationDescriptor" dll='"mfplat.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFDeserializePresentationDescriptor" dll='"mfplat.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateStreamDescriptor" dll='"mfplat.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateAVIMediaSink" dll='"mfplat.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateWAVEMediaSink" dll='"mfplat.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateTrackedSample" dll='"mfplat.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />

    <!-- MFCreateMFByteStreamOnStream -->
    <map function="MFCreateMFByteStreamOnStream" dll='"mfplat.dll"' group="Vortice.MediaFoundation.MediaFactory" visibility="internal" />
    <map param="MFCreateMFByteStreamOnStream::ppByteStream" attribute="out fast"/>

    <!--MFCreateMFByteStreamOnStreamEx -->
    <map function="MFCreateMFByteStreamOnStreamEx" dll='"mfplat.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map param="MFCreateMFByteStreamOnStreamEx::ppByteStream" attribute="out fast"/>

    <map function="MFCreateStreamOnMFByteStream" dll='"mfplat.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateStreamOnMFByteStreamEx" dll='"mfplat.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateMediaTypeFromProperties" dll='"mfplat.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreatePropertiesFromMediaType" dll='"mfplat.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateContentProtectionDevice" dll='"mfplat.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFIsContentProtectionDeviceSupported" dll='"mfplat.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateContentDecryptorContext" dll='"mfplat.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateSensorGroup" dll='"Mfsensorgroup.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateSensorStream" dll='"Mfsensorgroup.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateSensorProfile" dll='"Mfsensorgroup.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateSensorProfileCollection" dll='"Mfsensorgroup.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateSensorActivityMonitor" dll='"Mfsensorgroup.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateExtendedCameraIntrinsics" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateExtendedCameraIntrinsicModel" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />
    <map function="MFCreateRelativePanelWatcher" dll='"mf.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />

    <map function="MFCreateVideoSampleFromSurface" dll='"EVR.dll"' group="Vortice.MediaFoundation.MediaFactory" hresult="true" check="false" />

    <map function="MFCreateDXGIDeviceManager" visibility="internal" hresult="true" check="false" />



    
    <!-- WASAPI -->
    <remove function="ActivateAudioInterfaceAsync"/>
  </mapping>
</config>
