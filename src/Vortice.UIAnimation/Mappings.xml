<?xml version="1.0" encoding="utf-8"?>
<config id="vortice-uianimation" xmlns="urn:SharpGen.Config">
  <namespace>Vortice.UIAnimation</namespace>
  <depends>SharpGen.Runtime.COM</depends>
  
  <sdk name="WindowsSdk" version="10.0.22000.0" />
  <sdk name="StdLib" />

  <include file="UIAnimation.h" namespace="Vortice.UIAnimation" attach="true"/>

  <bindings>
    <bind from="__MIDL___MIDL_itf_UIAnimation_0000_0002_0003" to="System.IntPtr" />
    <bind from="UINT" to="System.Int32" />
  </bindings>
  
  <extension>
  </extension>

  <naming>
  </naming>

  <mapping>
    <!-- Enums -->
    <map enum="UI_ANIMATION_(.*)" name-tmp="$1"/>
    <map enum-item="UI_ANIMATION_(.*)" name-tmp="$1"/>
    <map enum="UI_ANIMATION_DEPENDENCIES" flags="true"/>
    <map enum-item="UI_ANIMATION_DEPENDENCY_(.*)" name-tmp="$1"/>

    <map enum-item="UI_ANIMATION_IDLE_BEHAVIOR_(.*)" name-tmp="$1"/>
    <map enum-item="UI_ANIMATION_MANAGER_(.*)" name-tmp="$1"/>

    <map enum-item="UI_ANIMATION_MODE_(.*)" name-tmp="$1"/>
    <map enum-item="UI_ANIMATION_PRIORITY_EFFECT_(.*)" name-tmp="$1"/>
    <map enum-item="UI_ANIMATION_SCHEDULING_(.*)" name-tmp="$1"/>
    <map enum-item="UI_ANIMATION_SLOPE_(.*)" name-tmp="$1"/>
    <map enum-item="UI_ANIMATION_STORYBOARD_(.*)" name-tmp="$1"/>
    <map enum-item="UI_ANIMATION_TIMER_CLIENT_(.*)" name-tmp="$1"/>
    <map enum-item="UI_ANIMATION_UPDATE_(.*)" name-tmp="$1"/>
    <map enum-item="UI_ANIMATION_REPEAT_MODE_(.*)" name-tmp="$1"/>
    <map enum-item="UI_ANIMATION_ROUNDING_(.*)" name-tmp="$1"/>
    
    <!-- Structs -->
    <map struct="UI_ANIMATION_(.*)" name-tmp="$1"/>

    <!-- Callbacks -->
    <map interface="IUIAnimationPriorityComparison" callback="true" callback-dual="false" callback-visibility="public" />
    <map method="IUIAnimationPriorityComparison::(.*)" hresult="true" check="false"/>

    <map interface="IUIAnimationPriorityComparison2" callback="true" callback-dual="false" callback-visibility="public" />
    <map method="IUIAnimationPriorityComparison2::(.*)" hresult="true" check="false"/>

    <map interface=".*Handler?" callback="true" callback-dual="true" callback-visibility="internal" />
    <map interface="IUIAnimationStoryboardEventHandler2" callback="true" callback-dual="true" callback-visibility="internal" />
    <map interface="IUIAnimationVariableCurveChangeHandler2" callback="true" callback-dual="true" callback-visibility="internal" />
    <map interface="IUIAnimationVariableChangeHandler2" callback="true"  />
    <map method="IUIAnimationVariableChangeHandler2::.+" hidden="true" managed-partial="true" />

    <map interface="IUIAnimationVariableIntegerChangeHandler2" callback="true"  />
    <map method="IUIAnimationVariableIntegerChangeHandler2::.+" hidden="true" managed-partial="true" />
    
    <!-- IUIAnimationTimer -->
    <map method="IUIAnimationTimer::IsEnabled" return="true" check="false" property="false" name="IsEnabled_" visibility="internal"/>

    <!-- IUIAnimationTransitionLibrary2 -->
    <map param="IUIAnimationTransitionLibrary2::CreateCubicBezierLinearVectorTransition::cDimension" relation="length(finalValue)"/>
    <map param="IUIAnimationTransitionLibrary2::CreateCubicVectorTransition::cDimension" relation="length(finalValue)"/>
    <map param="IUIAnimationTransitionLibrary2::CreateDiscreteVectorTransition::cDimension" relation="length(finalValue)"/>
    <map param="IUIAnimationTransitionLibrary2::CreateInstantaneousVectorTransition::cDimension" relation="length(finalValue)"/>
    <map param="IUIAnimationTransitionLibrary2::CreateLinearVectorTransition::cDimension" relation="length(finalValue)"/>
    <map param="IUIAnimationTransitionLibrary2::CreateLinearVectorTransitionFromSpeed::cDimension" relation="length(finalValue)"/>

    <!-- IUIAnimationTransition2 -->
    <map method="IUIAnimationTransition2::IsDurationKnown" return="true" check="false" property="false" name="IsDurationKnown_" visibility="internal"/>
    <map param="IUIAnimationTransition2::SetInitialVectorValue::cDimension" relation="length(value)" />
    <map param="IUIAnimationTransition2::SetInitialVectorValue::cDimension" relation="length(value)" />
    <map param="IUIAnimationTransition2::SetInitialVectorVelocity::cDimension" relation="length(velocity)" />

    <!-- IUIAnimationManager2 -->
    <map param="IUIAnimationManager2::CreateAnimationVectorVariable::cDimension" relation="length(initialValue)" />

    <!-- IUIAnimationVariable2 -->
    <!-- Remove dependencies on IDCompositionAnimation from this library, replace with ComObject. See Vortice.DirectComposition for the actual wrappers. -->
    <map param="IUIAnimationVariable2::GetCurve::animation" type="IUnknown" />
    <map method="IUIAnimationVariable2::GetFinalIntegerVectorValue" visibility="internal" />
    <map param="IUIAnimationVariable2::GetFinalIntegerVectorValue::cDimension" relation="length(finalValue)" />
    <map method="IUIAnimationVariable2::GetFinalVectorValue" visibility="internal" />
    <map param="IUIAnimationVariable2::GetFinalVectorValue::cDimension" relation="length(finalValue)" />
    <map method="IUIAnimationVariable2::GetIntegerVectorValue" visibility="internal" />
    <map param="IUIAnimationVariable2::GetIntegerVectorValue::cDimension" relation="length(value)" />
    <map method="IUIAnimationVariable2::GetPreviousIntegerVectorValue" visibility="internal" />
    <map param="IUIAnimationVariable2::GetPreviousIntegerVectorValue::cDimension" relation="length(previousValue)" />
    <map method="IUIAnimationVariable2::GetPreviousVectorValue" visibility="internal" />
    <map param="IUIAnimationVariable2::GetPreviousVectorValue::cDimension" relation="length(previousValue)" />
    <map param="IUIAnimationVariable2::GetVectorCurve::cDimension" relation="length(animation)" />
    <!-- Remove dependencies on IDCompositionAnimation from this library, replace with ComObject. See Vortice.DirectComposition for the actual wrappers. -->
    <map param="IUIAnimationVariable2::GetVectorCurve::animation" type="IUnknown" />
    <map method="IUIAnimationVariable2::GetVectorValue" visibility="internal" />
    <map param="IUIAnimationVariable2::GetVectorValue::cDimension" relation="length(value)" />
    <map method="IUIAnimationVariable2::SetLowerBoundVector" visibility="internal" />
    <map param="IUIAnimationVariable2::SetLowerBoundVector::cDimension" relation="length(bound)" />
    <map method="IUIAnimationVariable2::SetUpperBoundVector" visibility="internal" />
    <map param="IUIAnimationVariable2::SetUpperBoundVector::cDimension" relation="length(bound)" />
  </mapping>
</config>
